{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Assignment - Bias-Variance Tradeoff.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ayush100497/ayush100497/blob/main/Copy_of_Assignment_Bias_Variance_Tradeoff.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oq9OIkpjU3hr"
      },
      "source": [
        "# <b> The Boston Housing Dataset is a derived from information collected by the U.S. Census Service concerning housing in the area of Boston MA. The following describes the dataset columns:\n",
        "\n",
        "* CRIM - per capita crime rate by town\n",
        "* ZN - proportion of residential land zoned for lots over 25,000 sq.ft.\n",
        "* INDUS - proportion of non-retail business acres per town.\n",
        "* CHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n",
        "* NOX - nitric oxides concentration (parts per 10 million)\n",
        "* RM - average number of rooms per dwelling\n",
        "* AGE - proportion of owner-occupied units built prior to 1940\n",
        "* DIS - weighted distances to five Boston employment centres\n",
        "* RAD - index of accessibility to radial highways\n",
        "* TAX - full-value property-tax rate per \\$10,000\n",
        "* PTRATIO - pupil-teacher ratio by town\n",
        "* B - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n",
        "* LSTAT - % lower status of the population\n",
        "* MEDV - Median value of owner-occupied homes in $1000's\n",
        "\n",
        "## <b>MEDV is the dependent variable.\n",
        "\n",
        "## Fit polynomial regression on this dataset for degrees 1 to 10. To do such a regression, consider only one variable and then run polynomial fit and plot the train and test errors w.r.t model complexity. You can also repeat this experiment for all the other variables. Also do not use <code>np.polyfit</code>function, but use the <code>LinearRegression()</code> using the scikit-learn library.</b>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p0gkUooyR6Ix"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.model_selection import cross_val_predict\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LuyvogIiarj8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "97b7f21c-99eb-49e3-a7ca-6a04747cd0cf"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QFEeG83ealKN"
      },
      "source": [
        " dataset = pd.read_csv('/content/drive/MyDrive/Linear regression/housing.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "jZ6kLlw2bM-Z",
        "outputId": "f2b3c74d-611b-48d2-8089-495e44ae94c1"
      },
      "source": [
        "dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.02731   0.00   7.070  0  0.4690  6.4210  78...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.02729   0.00   7.070  0  0.4690  7.1850  61...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.03237   0.00   2.180  0  0.4580  6.9980  45...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.06905   0.00   2.180  0  0.4580  7.1470  54...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.02985   0.00   2.180  0  0.4580  6.4300  58...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>500</th>\n",
              "      <td>0.06263   0.00  11.930  0  0.5730  6.5930  69...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>0.04527   0.00  11.930  0  0.5730  6.1200  76...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>0.06076   0.00  11.930  0  0.5730  6.9760  91...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>0.10959   0.00  11.930  0  0.5730  6.7940  89...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>0.04741   0.00  11.930  0  0.5730  6.0300  80...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>505 rows Ã— 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00\n",
              "0     0.02731   0.00   7.070  0  0.4690  6.4210  78...                                              \n",
              "1     0.02729   0.00   7.070  0  0.4690  7.1850  61...                                              \n",
              "2     0.03237   0.00   2.180  0  0.4580  6.9980  45...                                              \n",
              "3     0.06905   0.00   2.180  0  0.4580  7.1470  54...                                              \n",
              "4     0.02985   0.00   2.180  0  0.4580  6.4300  58...                                              \n",
              "..                                                 ...                                              \n",
              "500   0.06263   0.00  11.930  0  0.5730  6.5930  69...                                              \n",
              "501   0.04527   0.00  11.930  0  0.5730  6.1200  76...                                              \n",
              "502   0.06076   0.00  11.930  0  0.5730  6.9760  91...                                              \n",
              "503   0.10959   0.00  11.930  0  0.5730  6.7940  89...                                              \n",
              "504   0.04741   0.00  11.930  0  0.5730  6.0300  80...                                              \n",
              "\n",
              "[505 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "Lavwrqw3bNxf",
        "outputId": "d364ddde-1537-47a4-ce53-e942f6b66a54"
      },
      "source": [
        "import re\n",
        "dataset.rename(columns={' 0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00': 'MEDV'}, inplace=True)\n",
        "dataset\n",
        "string = ' 0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00'\n",
        "dataset['MEDV'].str.strip()\n",
        "dataset['MEDV']\n",
        "# string split and assigning columns\n",
        "dataset[['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','BLACKS_PROP','LSTAT','MEDV']] = dataset.MEDV.str.split(expand=True)\n",
        "dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MEDV</th>\n",
              "      <th>CRIM</th>\n",
              "      <th>ZN</th>\n",
              "      <th>INDUS</th>\n",
              "      <th>CHAS</th>\n",
              "      <th>NOX</th>\n",
              "      <th>RM</th>\n",
              "      <th>AGE</th>\n",
              "      <th>DIS</th>\n",
              "      <th>RAD</th>\n",
              "      <th>TAX</th>\n",
              "      <th>PTRATIO</th>\n",
              "      <th>BLACKS_PROP</th>\n",
              "      <th>LSTAT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21.60</td>\n",
              "      <td>0.02731</td>\n",
              "      <td>0.00</td>\n",
              "      <td>7.070</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4690</td>\n",
              "      <td>6.4210</td>\n",
              "      <td>78.90</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.80</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>34.70</td>\n",
              "      <td>0.02729</td>\n",
              "      <td>0.00</td>\n",
              "      <td>7.070</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4690</td>\n",
              "      <td>7.1850</td>\n",
              "      <td>61.10</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.80</td>\n",
              "      <td>392.83</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33.40</td>\n",
              "      <td>0.03237</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.180</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4580</td>\n",
              "      <td>6.9980</td>\n",
              "      <td>45.80</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.70</td>\n",
              "      <td>394.63</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.20</td>\n",
              "      <td>0.06905</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.180</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4580</td>\n",
              "      <td>7.1470</td>\n",
              "      <td>54.20</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.70</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28.70</td>\n",
              "      <td>0.02985</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.180</td>\n",
              "      <td>0</td>\n",
              "      <td>0.4580</td>\n",
              "      <td>6.4300</td>\n",
              "      <td>58.70</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.70</td>\n",
              "      <td>394.12</td>\n",
              "      <td>5.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>500</th>\n",
              "      <td>22.40</td>\n",
              "      <td>0.06263</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.930</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5730</td>\n",
              "      <td>6.5930</td>\n",
              "      <td>69.10</td>\n",
              "      <td>2.4786</td>\n",
              "      <td>1</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.00</td>\n",
              "      <td>391.99</td>\n",
              "      <td>9.67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>20.60</td>\n",
              "      <td>0.04527</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.930</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5730</td>\n",
              "      <td>6.1200</td>\n",
              "      <td>76.70</td>\n",
              "      <td>2.2875</td>\n",
              "      <td>1</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.00</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>23.90</td>\n",
              "      <td>0.06076</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.930</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5730</td>\n",
              "      <td>6.9760</td>\n",
              "      <td>91.00</td>\n",
              "      <td>2.1675</td>\n",
              "      <td>1</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.00</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>22.00</td>\n",
              "      <td>0.10959</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.930</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5730</td>\n",
              "      <td>6.7940</td>\n",
              "      <td>89.30</td>\n",
              "      <td>2.3889</td>\n",
              "      <td>1</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.00</td>\n",
              "      <td>393.45</td>\n",
              "      <td>6.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>11.90</td>\n",
              "      <td>0.04741</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.930</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5730</td>\n",
              "      <td>6.0300</td>\n",
              "      <td>80.80</td>\n",
              "      <td>2.5050</td>\n",
              "      <td>1</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.00</td>\n",
              "      <td>396.90</td>\n",
              "      <td>7.88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>505 rows Ã— 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      MEDV     CRIM    ZN   INDUS CHAS  ... RAD    TAX PTRATIO BLACKS_PROP LSTAT\n",
              "0    21.60  0.02731  0.00   7.070    0  ...   2  242.0   17.80      396.90  9.14\n",
              "1    34.70  0.02729  0.00   7.070    0  ...   2  242.0   17.80      392.83  4.03\n",
              "2    33.40  0.03237  0.00   2.180    0  ...   3  222.0   18.70      394.63  2.94\n",
              "3    36.20  0.06905  0.00   2.180    0  ...   3  222.0   18.70      396.90  5.33\n",
              "4    28.70  0.02985  0.00   2.180    0  ...   3  222.0   18.70      394.12  5.21\n",
              "..     ...      ...   ...     ...  ...  ...  ..    ...     ...         ...   ...\n",
              "500  22.40  0.06263  0.00  11.930    0  ...   1  273.0   21.00      391.99  9.67\n",
              "501  20.60  0.04527  0.00  11.930    0  ...   1  273.0   21.00      396.90  9.08\n",
              "502  23.90  0.06076  0.00  11.930    0  ...   1  273.0   21.00      396.90  5.64\n",
              "503  22.00  0.10959  0.00  11.930    0  ...   1  273.0   21.00      393.45  6.48\n",
              "504  11.90  0.04741  0.00  11.930    0  ...   1  273.0   21.00      396.90  7.88\n",
              "\n",
              "[505 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "25i1VeWVB9og",
        "outputId": "82a8cf2a-b553-4dc0-bc2c-e9195304c716"
      },
      "source": [
        "#converting whole dataset to integer or float\n",
        "dataset = dataset.apply(pd.to_numeric)\n",
        "#check for null values if any\n",
        "dataset.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MEDV           0\n",
              "CRIM           0\n",
              "ZN             0\n",
              "INDUS          0\n",
              "CHAS           0\n",
              "NOX            0\n",
              "RM             0\n",
              "AGE            0\n",
              "DIS            0\n",
              "RAD            0\n",
              "TAX            0\n",
              "PTRATIO        0\n",
              "BLACKS_PROP    0\n",
              "LSTAT          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hn95iDyvlcSq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "da608601-7750-47e8-ed52-ed6a7ba5d1d1"
      },
      "source": [
        "X = dataset[['MEDV']]\n",
        "# y = dataset['CRIM']\n",
        "# y = dataset.drop('MEDV', axis =1)\n",
        "X"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MEDV</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>34.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>500</th>\n",
              "      <td>22.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>20.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>23.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>11.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>505 rows Ã— 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     MEDV\n",
              "0    21.6\n",
              "1    34.7\n",
              "2    33.4\n",
              "3    36.2\n",
              "4    28.7\n",
              "..    ...\n",
              "500  22.4\n",
              "501  20.6\n",
              "502  23.9\n",
              "503  22.0\n",
              "504  11.9\n",
              "\n",
              "[505 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l80PTk779ite"
      },
      "source": [
        "\n",
        "# sns.set(rc={'figure.figsize':(12, 8)})\n",
        "# g = sns.PairGrid(dataset, vars=['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','BLACKS_PROP','LSTAT','MEDV'], height=1.5, aspect=1.5)\n",
        "# g = g.map_diag(plt.hist)\n",
        "# g = g.map_lower(sns.regplot, lowess=True, scatter_kws={'s': 15, 'alpha':0.3}, \n",
        "#                 line_kws={'color':'red', 'linewidth': 2})\n",
        "# g = g.map_upper(sns.kdeplot, n_levels=15, cmap='coolwarm')\n",
n",
        "# plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "KtbfoC44dgcs",
        "outputId": "3a1910c4-6099-4df2-a936-07cbdb212a45"
      },
      "source": [
        "# high_corr = dataset[['ZN','RM','CHAS','BLACKS_PROP']]\n",
        "# #DIS and ZN are highly correlated so we will remove one of them to remove multi collinearity\n",
        "# multi_col = dataset[['ZN','RM','CHAS','DIS','BLACKS_PROP']]\n",
        "# low_corr = dataset.drop(['ZN','RM','CHAS','DIS','BLACKS_PROP'], axis=1)\n",
        "\n",
        "# Y = dataset[['LSTAT', 'RM', 'CRIM', 'NOX']]\n",
        "\n",
        "# A = dataset['CRIM'].values\n",
        "# B = dataset['INDUS'].values\n",
        "# C = dataset['NOX'].values\n",
        "# D = dataset['RM'].values\n",
        "# E = dataset['AGE'].values\n",
        "# F = dataset['DIS'].values\n",
        "# G = dataset['RAD'].values\n",
        "# H = dataset['TAX'].values\n",
        "# I = dataset['PTRATIO'].values\n",
        "# J = dataset['BLACKS_PROP'].values\n",
        "# K = dataset['LSTAT'].values\n",
        "# #Independent variable\n",
        "# Y = dataset['MEDV'].values\n",
        "\n",
        "dataset.corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MEDV</th>\n",
              "      <th>CRIM</th>\n",
              "      <th>ZN</th>\n",
              "      <th>INDUS</th>\n",
              "      <th>CHAS</th>\n",
              "      <th>NOX</th>\n",
              "      <th>RM</th>\n",
              "      <th>AGE</th>\n",
              "      <th>DIS</th>\n",
              "      <th>RAD</th>\n",
              "      <th>TAX</th>\n",
              "      <th>PTRATIO</th>\n",
              "      <th>BLACKS_PROP</th>\n",
              "      <th>LSTAT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>MEDV</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.388249</td>\n",
              "      <td>0.360393</td>\n",
              "      <td>-0.484126</td>\n",
              "      <td>0.175364</td>\n",
              "      <td>-0.427295</td>\n",
              "      <td>0.695365</td>\n",
              "      <td>-0.376932</td>\n",
              "      <td>0.249896</td>\n",
              "      <td>-0.381690</td>\n",
              "      <td>-0.468543</td>\n",
              "      <td>-0.508411</td>\n",
              "      <td>0.333394</td>\n",
              "      <td>-0.738187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CRIM</th>\n",
              "      <td>-0.388249</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.200283</td>\n",
              "      <td>0.406251</td>\n",
              "      <td>-0.056132</td>\n",
              "      <td>0.420934</td>\n",
              "      <td>-0.218978</td>\n",
              "      <td>0.352701</td>\n",
              "      <td>-0.379627</td>\n",
              "      <td>0.625396</td>\n",
              "      <td>0.582568</td>\n",
              "      <td>0.289394</td>\n",
              "      <td>-0.384839</td>\n",
              "      <td>0.455329</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZN</th>\n",
              "      <td>0.360393</td>\n",
              "      <td>-0.200283</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.534022</td>\n",
              "      <td>-0.042550</td>\n",
              "      <td>-0.516574</td>\n",
              "      <td>0.311835</td>\n",
              "      <td>-0.569524</td>\n",
              "      <td>0.664395</td>\n",
              "      <td>-0.311717</td>\n",
              "      <td>-0.314351</td>\n",
              "      <td>-0.391713</td>\n",
              "      <td>0.175319</td>\n",
              "      <td>-0.412894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>INDUS</th>\n",
              "      <td>-0.484126</td>\n",
              "      <td>0.406251</td>\n",
              "      <td>-0.534022</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.062350</td>\n",
              "      <td>0.764556</td>\n",
              "      <td>-0.391330</td>\n",
              "      <td>0.645543</td>\n",
              "      <td>-0.708848</td>\n",
              "      <td>0.594167</td>\n",
              "      <td>0.720561</td>\n",
              "      <td>0.380955</td>\n",
              "      <td>-0.356506</td>\n",
              "      <td>0.602737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CHAS</th>\n",
              "      <td>0.175364</td>\n",
              "      <td>-0.056132</td>\n",
              "      <td>-0.042550</td>\n",
              "      <td>0.062350</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.091134</td>\n",
              "      <td>0.091497</td>\n",
              "      <td>0.086461</td>\n",
              "      <td>-0.099109</td>\n",
              "      <td>-0.007907</td>\n",
              "      <td>-0.035965</td>\n",
              "      <td>-0.122570</td>\n",
              "      <td>0.049040</td>\n",
              "      <td>-0.054576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NOX</th>\n",
              "      <td>-0.427295</td>\n",
              "      <td>0.420934</td>\n",
              "      <td>-0.516574</td>\n",
              "      <td>0.764556</td>\n",
              "      <td>0.091134</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.302127</td>\n",
              "      <td>0.731461</td>\n",
              "      <td>-0.769221</td>\n",
              "      <td>0.611758</td>\n",
              "      <td>0.668141</td>\n",
              "      <td>0.188918</td>\n",
              "      <td>-0.380006</td>\n",
              "      <td>0.591262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RM</th>\n",
              "      <td>0.695365</td>\n",
              "      <td>-0.218978</td>\n",
              "      <td>0.311835</td>\n",
              "      <td>-0.391330</td>\n",
              "      <td>0.091497</td>\n",
              "      <td>-0.302127</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.240211</td>\n",
              "      <td>0.205170</td>\n",
              "      <td>-0.209277</td>\n",
              "      <td>-0.291680</td>\n",
              "      <td>-0.355116</td>\n",
              "      <td>0.127754</td>\n",
              "      <td>-0.613734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AGE</th>\n",
              "      <td>-0.376932</td>\n",
              "      <td>0.352701</td>\n",
              "      <td>-0.569524</td>\n",
              "      <td>0.645543</td>\n",
              "      <td>0.086461</td>\n",
              "      <td>0.731461</td>\n",
              "      <td>-0.240211</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.747872</td>\n",
              "      <td>0.456232</td>\n",
              "      <td>0.506527</td>\n",
              "      <td>0.261724</td>\n",
              "      <td>-0.273486</td>\n",
              "      <td>0.602782</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DIS</th>\n",
              "      <td>0.249896</td>\n",
              "      <td>-0.379627</td>\n",
              "      <td>0.664395</td>\n",
              "      <td>-0.708848</td>\n",
              "      <td>-0.099109</td>\n",
              "      <td>-0.769221</td>\n",
              "      <td>0.205170</td>\n",
              "      <td>-0.747872</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.494798</td>\n",
              "      <td>-0.534492</td>\n",
              "      <td>-0.232561</td>\n",
              "      <td>0.291451</td>\n",
              "      <td>-0.497277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAD</th>\n",
              "      <td>-0.381690</td>\n",
              "      <td>0.625396</td>\n",
              "      <td>-0.311717</td>\n",
              "      <td>0.594167</td>\n",
              "      <td>-0.007907</td>\n",
              "      <td>0.611758</td>\n",
              "      <td>-0.209277</td>\n",
              "      <td>0.456232</td>\n",
              "      <td>-0.494798</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.910202</td>\n",
              "      <td>0.463322</td>\n",
              "      <td>-0.444065</td>\n",
              "      <td>0.487608</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TAX</th>\n",
              "      <td>-0.468543</td>\n",
              "      <td>0.582568</td>\n",
              "      <td>-0.314351</td>\n",
              "      <td>0.720561</td>\n",
              "      <td>-0.035965</td>\n",
              "      <td>0.668141</td>\n",
              "      <td>-0.291680</td>\n",
              "      <td>0.506527</td>\n",
              "      <td>-0.534492</td>\n",
              "      <td>0.910202</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.460100</td>\n",
              "      <td>-0.441505</td>\n",
              "      <td>0.543435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PTRATIO</th>\n",
              "      <td>-0.508411</td>\n",
              "      <td>0.289394</td>\n",
              "      <td>-0.391713</td>\n",
              "      <td>0.380955</td>\n",
              "      <td>-0.122570</td>\n",
              "      <td>0.188918</td>\n",
              "      <td>-0.355116</td>\n",
              "      <td>0.261724</td>\n",
              "      <td>-0.232561</td>\n",
              "      <td>0.463322</td>\n",
              "      <td>0.460100</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.176515</td>\n",
              "      <td>0.372148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BLACKS_PROP</th>\n",
              "      <td>0.333394</td>\n",
              "      <td>-0.384839</td>\n",
              "      <td>0.175319</td>\n",
              "      <td>-0.356506</td>\n",
              "      <td>0.049040</td>\n",
              "      <td>-0.380006</td>\n",
              "      <td>0.127754</td>\n",
              "      <td>-0.273486</td>\n",
              "      <td>0.291451</td>\n",
              "      <td>-0.444065</td>\n",
              "      <td>-0.441505</td>\n",
              "      <td>-0.176515</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.365637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LSTAT</th>\n",
              "      <td>-0.738187</td>\n",
              "      <td>0.455329</td>\n",
              "      <td>-0.412894</td>\n",
              "      <td>0.602737</td>\n",
              "      <td>-0.054576</td>\n",
              "      <td>0.591262</td>\n",
              "      <td>-0.613734</td>\n",
              "      <td>0.602782</td>\n",
              "      <td>-0.497277</td>\n",
              "      <td>0.487608</td>\n",
              "      <td>0.543435</td>\n",
              "      <td>0.372148</td>\n",
              "      <td>-0.365637</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 MEDV      CRIM        ZN  ...   PTRATIO  BLACKS_PROP     LSTAT\n",
              "MEDV         1.000000 -0.388249  0.360393  ... -0.508411     0.333394 -0.738187\n",
              "CRIM        -0.388249  1.000000 -0.200283  ...  0.289394    -0.384839  0.455329\n",
              "ZN           0.360393 -0.200283  1.000000  ... -0.391713     0.175319 -0.412894\n",
              "INDUS       -0.484126  0.406251 -0.534022  ...  0.380955    -0.356506  0.602737\n",
              "CHAS         0.175364 -0.056132 -0.042550  ... -0.122570     0.049040 -0.054576\n",
              "NOX         -0.427295  0.420934 -0.516574  ...  0.188918    -0.380006  0.591262\n",
              "RM           0.695365 -0.218978  0.311835  ... -0.355116     0.127754 -0.613734\n",
              "AGE         -0.376932  0.352701 -0.569524  ...  0.261724    -0.273486  0.602782\n",
              "DIS          0.249896 -0.379627  0.664395  ... -0.232561     0.291451 -0.497277\n",
              "RAD         -0.381690  0.625396 -0.311717  ...  0.463322    -0.444065  0.487608\n",
              "TAX         -0.468543  0.582568 -0.314351  ...  0.460100    -0.441505  0.543435\n",
              "PTRATIO     -0.508411  0.289394 -0.391713  ...  1.000000    -0.176515  0.372148\n",
              "BLACKS_PROP  0.333394 -0.384839  0.175319  ... -0.176515     1.000000 -0.365637\n",
              "LSTAT       -0.738187  0.455329 -0.412894  ...  0.372148    -0.365637  1.000000\n",
              "\n",
              "[14 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 673
        },
        "id": "IDcUW40NMKPY",
        "outputId": "283c7fe3-1772-40e2-bda0-fd1c73ae81cf"
      },
      "source": [
        "fig, ax = plt.subplots(figsize=(10,10))\n",
        "sns.heatmap(dataset.corr(),annot=True)\n",
        "#remove RAD,TAX,DIS,INDUS,NOX,AGE\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1bd8e5bb50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAnAAAAJ/CAYAAAD4Re52AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd1QU19vA8e9soSxFpIMYxYZdAbtGxcSGiWLUxEosEXvsGls01hgTSzRGE02MpvhLTI9YYovGghpL7L2CdJC2LMvuvH8sLiCgi43gez/ncM7uzJ155k7bu8+9s0iyLCMIgiAIgiCUHoqS3gBBEARBEASheEQDThAEQRAEoZQRDThBEARBEIRSRjTgBEEQBEEQShnRgBMEQRAEQShlRANOEARBEAShlBENOEEQBEEQhEckSdIXkiTFSpJ0uoj5kiRJH0uSdFmSpH8lSQp4EnFFA04QBEEQBOHRrQM6PGB+R6Bqzl8Y8OmTCCoacIIgCIIgCI9IluW9QOIDinQB1ssmhwAnSZK8HjeuaMAJgiAIgiA8PeWAW3ne386Z9lhUj7sCoSB9/NUS+/9kvQLHlFRoAD5vkFKi8bscUpZo/NUa6xKNP15XouH5cVHjEo0fOulYicVe7J5WYrEBxsXal2j8eENGicbXGvUlGn+zf8n+W8pyO6+VaPzMzJvSs4z3LD9nrdwqD8HU9XnPZ7Isf/as4hdFNOAEQRAEQRCKkNNYe5wGWyRQPs97n5xpj0U04ARBEARBKF2MhpLeguL4DRgpSdJGoDFwV5blO4+7UtGAEwRBEARBeESSJH0HtAZcJUm6DcwE1ACyLK8CwoFg4DKQAQx4EnFFA04QBEEQhNJFNpb0FpjJstzrIfNlYMSTjiueQhUEQRAEQShlRAZOEARBEITSxfjfycCVFJGBEwRBEARBKGVEA04QBEEQBKGUEV2ogiAIgiCUKvJ/6CGGkiIycIIgCIIgCKWMyMAJgiAIglC6iIcYRAZOEARBEAShtBEZOEEQBEEQShcxBk5k4ARBEARBEEobkYH7D5k+fzF79x/GuawTv3y96qnEGDhrMP5BDcjS6lgxYSnXTl8tUGbaV7Mo614WpUrJucNnWDNjNUajkQo1KhI2fzg2GhvibseybPRHaNO0FsdW1W+EZuBIUCjR7dyM7udv8823atcZmw4hyEYjZGpJX/Uhxts3AFBWqIRmyHgkjQaMMimTh4I+q9j1f3v2CJq0aYxOq2PB2A+4ePpSkWUXfDkHrxe86P/SWwBUqVWZ8e+PwcraCkO2gSVTl3HuxAWLY9u9GIjH9CFISgXJ328j4bMf8s23bVgbz2lhWPv5Ejn2fVK37jfPc580EPvWDUEhkb7/ODFzVhez5iZD3htCw6CG6LQ6Fo9fzJXTV4os++7ad/F8wZPhbYcD0G98P5q0a4LRaORuwl0Wj19MYkziI23H/ktRfBD+D0ZZpmtAZQa2rJVv/qIt/3DkWgwAmXoDiemZ/D21xyPFymvArMEEBAWi0+r4ZMKyIs7/mTiZz/+zrM05/yvW9GXwvGFYWasxGIysmb6KyyeLPn/ysmnaEKfxI0ChIP3XcFK/2phvvn3v7th3CUY2GDAmJ5M4exGG6FgAfA5tR3/lGgCG6Fjix88oVXW/Z9Ts4TRu04hMrY6FYxdx6fTlIsvO/WI23i94MvDlMADeXTmN8pXLA2DvaEdaSjqD2w8tVvxxc0bRtE0TdNpM5ox9nwunCm7/yk1LcfFwRpdpureM7jmBpIRk6jeuy9jZI6lcozIzhs1m9+a/ihVbHdgIu7BRoFCQuX0zmT/kv/dZd+yMzStdwWhA1mpJX/4hhls3UFWrjt2oCTmlJLTfriPr4L5ixb7no4/eo0OHIDIytAwePJ4TJ07nm29vb8fOnZvM78uV8+K7735m4sT3zNNCQjqyceNqmjV7hWPH/n2k7XhiStc/s38qnosGnCRJMvCNLMt9c96rgDtAhCzLr0iS1B9YBETmWaw3pn8qew44D9gAqcBKWZbXSZLUCnhfluWmeeKoctbhL8ty1JOuR0hwW3p368zUOR8+6VUD4B8UiJevN6NaDaGqvx9hc4cxJWRigXKLRyw0N8wmrHqHpp2as//3fQxbOIr1877gbMQZ2rz+Ml2GvMbGj76xLLhCgWbwaNJmT8CYEIfDwlXoj+w3N9AAsvbtIGv7bwCoGzRD038EaXMngUKJZvQ0MpbNx3DjCpK9Ixiyi13/Jm0a4ePrQ+8WodQMqMG4BaMZ+urIQsu27NiCjPT8jdNh08JYt3gDEbsP06RNI4ZOC2N0j/EW199z1nBu9p+GPjoe3x+XkrrrEFmXb5mLZEfFEjV5Mc6DuuVb1Na/BrYBNbn6iulf6VXYuAhNozpkHD5VjNpDg6AGlKtYjrdavoWfvx8j541kbJexhZZt1qEZmemZ+aZtWr2JDR9tAKDzgM70Ht2bFVNXFGsbAAxGIwv+OMqqN9vg4WhLn9XbaFXdh8ruZcxlJnYMNL/+7tAFzt9JKnac+5nOfy9GtRpKVf9qDJ47jKmFnv8fmM//8asm06RTcw78vo++U97kh2UbObHnGP5BgfSd8iazek5/eGCFgrKT3iZ25CQMMXF4fLUS7d6DZF/LPff1Fy4TEzoMWafDrturOL0dRsLUuQDIuixi+gwpnXXP0bhNI8r5lqNvi/7UCKjB2AVvM/zVtwst+2LHFmRm5L/2Zg+fZ349bMYQ0lPTLY4N0LRNY8r7+tCjeR9qBdRk0oKxDHpleKFlZ46Yx/l/838xi4mMZc6Y9+k99I1ixQVAocBu2BhSpo/HGB9HmSWr0R/aj+FWnnvfnh3otuTc+xo3QzN4BKnvTiL7xjXujh4CRgNSWWecVnxBVsSBYjde2rcPokqVitSq1ZJGjfz5+ON5tGzZJV+ZtLR0GjfuaH5/4MBmfv11i/m9vb0dI0cOJCLiWPH3gfBUPC9dqOlAbUmSbHPetyV/Yw3gf7Is18/zdzZn+hVZlv1lWa4B9ATGSJI0ANgH+EiSVCHPOl4GzjyNxhtAg/p1KOPo8DRWDUDDto3Z8+NuAC4dv4DG0Q4n97IFyt27gStVSlRqFab/wwtevt6cjTgDwMl9J2jcsWmBZYuirFIdY3Qkxpg7kJ2N/u9dWDVsfl/gjNzXNjaQE1dVvwGG61cx3DBli+S0lEd6AqlF++Zs27QdgLPHzmFfxh4Xd+cC5Ww1Nrwe1p31y/I3TmVZxs5BA4Cdgx3xMQkWx7atW42sG1Hob0WDPpuUzXtxeCn//tNHxqK7cL3g2A5ZRrJWI6lVSFZqJJWK7IRki2Pf06RdE3b+uBOAC8cvYOdoR9lCjr+Nxoaug7vy3fLv8k3Pm2210diYz4viOn07gfLO9vg426NWKWlfpwJ7zt8usvyWUzfoUKdCkfMt1bBtI/4yn/8XsbPw/L93HsoyaOxNx1/joCEp1rLso1Wt6uhvRWKINJ37GX/uxrZVs3xldP+cQNbpAMg6dQ6lu9ujVbIIJVX3e5q3a8r2TTsAOHfsHHaO9jgXcu3ZaGzoMbgbG5YV/cWw9ast2fnr7mLFb9m+OeGbtgFw5tjZIq/9oty5Hc3lc1eRjcU/51XVamCIisQYbTr+ur27UDdpka+MnOfeJ9nYwr0wOp25sSZZWZmPR3G9+mo7vvnmRwAOHz6Ok5Mjnp7uRZavUsUXd3cX/v77sHnazJkT+PDDT9HlnKclTjY+u7//qOciA5cjHOgEbAJ6Ad8BLxZnBbIsX5UkaRzwkSzLX0qS9D2mRt3CnCI9c9ZbKrl4upAQFWd+nxidgIuHC8mxBbMb09fPokr9ahzf8w+Hwg8AcPvSTRq2a8yR7RE07dQcVy9Xi2MrnN0wxufGNibGoaxas0A56w4hWL/aA0mlJnWWKTuk9CoPyNjP+ADJ0Ymsv3eh+3VjgWUfxtXTldg89Y+7E4erpysJ930YDZo0gP+t/gGdNn8GavnMlXz47fsMnzEESVIwvMsoi2OrPF3IvhNvfq+Pjse2np9Fy2pPnCfj0L9UPfA1SBJJG34n68qthy94H1dPV+Lu5NY/PjoeV09Xku47/v0m9OOnz35Cpy14ow6dGMpL3V4iPTWdd954p9jbABCbqsWzjJ35vYejhlO34wstG5WcTlRSGo0qeTxSrLycPV1IiMqNkxAdj3MR5/+09bOoUr8qJ/Kc/+tmr2H6+ln0mzYAhUJi2muTLYqrdHPFEJO73w0xcVjVrlFkebsuHck8kPvBKVlZ4fHVSmSDgdSvNqL9a3+RyxalpOp+j+naizW/j79jOvcS77v2Bk7sz/efbSKzkHMPoG7jOiTFJRN57f7v5w/m5umW79qPjYrDzdOtwLUPMH3JZIxGI7s3/8WXSzcUK05hFC6uGONz626Mj0PtV/D4W3cKwbbr66BSkzJ1jHm6yq8GdqMno3T3IO2j+Y/Udejt7cnt23fM7yMjo/H29iQ6OrbQ8q+/3pkffvjd/L5+/dr4+Hixdesuxo17vGyw8OQ8Lxk4gI1AT0mSbIC6QMR989+QJOlEnj/bgqsA4BhQPef1d5gabUiSZA0EAz8WtpAkSWGSJB2VJOnomvWlto1nNjd0FoMbvonaSk3tZnUB+GTix3ToF8zCPxZja2dLtr743ZgPo9v6Cykj+pCxYTU23fqZJiqVqKrXIX3pPFKnjcKq8Yuo6gQ88dhgGudWroI3+7YW/JDsEvoqK2Z9SveGvVjx3komfzShkDU8eeoXvLCuUp5LL4ZyqUU/NE3rYdug1sMXfASValbCq4IXB7cdLHT++kXrebPJm+z5ZQ+v9n/1qWxDXttO3eDlWi+gVDzbW9W80FmENeyPykpN7WZ1AGjXtyPr5qxlWNNBrJu9lmEfWN6At5Sm48tY1ahGyobvzdPudO5NzJvDSZgxH6dxw1GW83ricfMqqbpXrlkZ7wre/F3ItXdPmy5Bxc6+FcfMkXPp+9JAhoaMon7junTs3u6pxbqfbvMvJL/Vm4wvV2P7Rqh5evaFc9wd3p+7Y4di26MPqK2e+rb06NGZ7783delKksQHH8zgnXfmPvW4xWI0Pru//6jnpgEny/K/QEVM2bfwQorc34Va1Oh7Kc86jwL2kiT5AR0xjakrtO9AluXPZFluIMtyg7dCez1WXZ6kDqHBLApfyqLwpSTFJuLinds14+zpQsIDugH1Oj1HtkfQsF1jAKKuRDKn30wmvzKOv3/bS/SNaIu3w5gYh8I1N7bC2Q05Ia7I8vr9u7BqZOpmMCbEkX32JHLqXcjSoT92CGWlqhbF7fpmF9ZuX83a7atJiEnAPU/93bzciI/On/mpFVgTv7rV+N+hb1jxyzLKV/Jh2Q8fAdChRzv+CjcNIN79+1/UqF8dS2VHJ6DKk7FUe7qSbWEXrEO7ZmhPXEDOyETOyCR971Fs/YvO4OT1SugrLN+ynOVblpMYm4ibV279XT1dC9S/ekB1qtatypf7v+TDHz+knG853v/f+wXWu/vn3TTv2LzAdEu4O9gSfTd3DFNMSgbujppCy259zO7T9qHBLApfwqLwJSTFJuHinXsMXDxdSXzo+X/YfP637hZExBZTw/bg5v1UqWfZOWiIi0fpkbvflR5uGOIKZhytGwXgOKC36SEFvT7f8gCGyDvojp3Eys+yuCVd95A3O/P5tlV8vm0VCbGJuHvndtm5ehU892oF1sCvbjW+O7iB5T8vwaeSD0t+yB0PrFAqeLFjC3b/vsei+nfrH8L6P9ew/s81JMTmv/bdvd2Iiy54/4nL2aaMdC3bf95JTQuvswcxJsSjcM2tu8LVDUNC4RlngKy9O7Fq2qLAdMOtG8iZWpQVfC2KO2RIKBERW4iI2EJ0dCw+PrkN/3LlPImKKvz+XadODVQqJcePm8bYOjjYU7OmH9u3/48LF/bTqJE/mzatJSCgrkXbITw9z00DLsdvwIc8XjenP6YHG+65l4Urld2nW9eHMzF4DBODx3B4ewStuwUBUNXfj4zUjAJdKDYaG/PYGIVSQUCbBkReMY1PcnQxDTKXJInuo17nz2+2WrwdhssXUHj5oHD3BJUKdYs2ZB09kK+Mwquc+bU6sAmGO6ZukuwTh1FWqARW1qBQoqpVP98A4Af5+atfGdRuCIPaDWHftv20z/lGXTOgBukp6QW6UH5d/zuvBb7BG036MDJkNLeu3jY/qJAQk0D9pvUACGjhz+1idONoT13EqqI3ah8PUKtw7NSS1J2HLFpWHxWHpmFtUCpApUTTsA5ZV25atOwf6/9gVMdRjOo4ioPbDvJSt5cA8PP3Iz01vUD3afjX4fRr2I8BzQcwodsEIq9FmrtKvSt6m8s1adeE21eKHrf2ILXKuXAzMZXIpDT02Qa2nbpBq+rlCpS7FneXlMws6pW3vKv+ftvWhzMxeCwTg8dyZPshWpnP/2pkpKY/9PwPzHP+J8YmUrNJbQBqN69L9HXLhsJmnT2P+oVyKL1N576mbRDavfnPfXW1KjhPGUv8+BkYk3LHN0oO9qBWm7anjCNWdWuhv2bZuV/Sdf/lq98Y3H4og9sPZf/W/bTr/jIANQJqkJ6aXqD79LcNf9CjQU96Ne3HqK5juX31NmN75Ga5A18M4NaVW8TfKbrxk9eP634htO1bhLZ9i7+2/k1w9/YA1AqoSVoh175SqaSMs+kep1Qpaf5yU66ev2ZRrAfJvngeZTkfFB6m42/dsg36iPxZRoV3nntfw6YYo0z7XeHhCQql6bWbB0qfFzDGWvbFefXq9TRu3JHGjTvy22/b6NPH9HBUo0b+3L2b+oDu0y7m7BtASkoqPj718fNrjp9fcw4fPk737oNK/ClUWTY+s7//qudpDBzAF0CyLMunJElqXdyFJUmqiKkBuDzP5O8wNQzLAIMefxOLNnHm+xw5/i/JySm8FNKX4YP60e3V9k9s/cd2HSUgKJAVe1ej0+pYOeFj87xF4UuZGDwGa40N76yZjtpKjaSQOH3wFNu/Nj2J1KJzSzqEBgMQsfUgu77fYXlwo4GMNcuwn7EIFAqydm3BeOs6Nj0HYLh8Af3RA1h37Iq6biBytgE5PZX0FQsAkNPT0P3+A44frAIZ9McOkX3MssZPXod2RtC0TWO+278BnTaTBeMWmeet3b6aQe0ePLbjg4mLeXv2CJQqJVmZWSyatNjy4AYj0e99Svkv5pp+RmTTdrIu38R1dF8yT10ibVcENnWq4rNyBkpHe+yDGuP2dl+uBg8jdevf2DWtS6XNK0GGtL3/kLbr8MNj3ufIriM0DGrI2n1r0Wl1LJmwxDxv+ZbljOr44G6xAe8MoFzlcshGmdjIWFZMKf4TqAAqpYJ3OjVg2PrdGI0yXQIqUcXdiZU7/6VmOWdaV/cBcrJvtSsgSdJD1miZY7v+wT+oAcv3riJLq+OTCbmX+aLwJUwMHou1xprJa6aZz/8zB0+x/WvTF5XVkz9hwKy3UCiV6HV6Vr+z0rLABiNJHyzH7eOFSEoFab9tIfvqDRyH9Cfr3AUy9x7EaXQYkq0tLu+/a1ok5+dC1L4vUHbKWDDKoJBI/WpjvqdX//N1z3Fo12Eat2nM139/hS5Tx8JxuZm1z7etsugnQdp0DmLnL4/WfXpg5yGavdSYTQe+IVOrY+7YheZ56/9cQ2jbt1BbqVn27QeoVCoUSgVH9v3Dr9/8AUCNen4sXDsXByd7WrRtyuAJ/ekdNMCy4EYD6Z8uxXHOh6BQoPszHMPN69j2HUj2pfPoIw5g88prqOsHgiEbOS2NtMWme5+qZl1se/Q2PXVvlElbuQQ55W6x67916y46dAji7Nl9ZGRoCQvLbRhHRGzJ9/Rp9+6v0KXLm8WOITx70qM+SfZfIklSmizL9vdNaw1MeMDPiAwHoijiZ0TuW9cJ4Lwsyz0t2R59/NUS26m9Asc8vNBT9HmDlBKN3+WQskTjr9ZYl2j88SX8gNiPixqXaPzQSSX3EweL3dNKLDbAuFj7hxd6iuINGQ8v9BRpjfqHF3qKNvuX7GdpuZ2Pny18HJmZN5/MNy0L6S4deGY73Lpqs2daN0s9Fxm4+xtvOdP2AHtyXq8D1hWxeFEPM+RdV/1H3jhBEARBEIQn7HkbAycIgiAIgvDcey4ycIIgCIIg/D/yH3644FkRGThBEARBEIRSRmTgBEEQBEEoXcQ/sxcZOEEQBEEQhNJGZOAEQRAEQShdxBg4kYETBEEQBEEobUQGThAEQRCE0uU//E/mnxWRgRMEQRAEQShlRAZOEARBEITSRYyBExk4QRAEQRCE0kZk4ARBEARBKF3EGDiRgRMEQRAEQShtRAbuKegVOKbEYn/3z9ISiw0wL3BGicb/vV1Mycbf5lyi8Td2ii3R+HMnXyjR+KsDkkss9pBjTiUWG+CrKRVLND4ZGSUaPvW3SyUaf8jpMiUaPy6sbonGf9ZkWfwnBpGBEwRBEARBKGVEBk4QBEEQhNJFPIUqMnCCIAiCIAiljWjACYIgCIIglDKiC1UQBEEQhNJF/IyIyMAJgiAIgiCUNiIDJwiCIAhC6SIeYhAZOEEQBEEQhNJGZOAEQRAEQShdjOKHfEUGThAEQRAEoZQRGThBEARBEEoXMQZOZOAEQRAEQRBKG5GBEwRBEAShdBG/AycycIIgCIIgCKWNyMA9YwNnDcY/qAFZWh0rJizl2umrBcpM+2oWZd3LolQpOXf4DGtmrMZoNFKhRkXC5g/HRmND3O1Ylo3+CG2a9olt2/T5i9m7/zDOZZ345etVT2y9Rek4K5SqQfXQa7P4ZcJq7py+nm++2saKHp++jfMLHhiNRi7uOMaOhf975Hiq2g2x6T0cFAr0e7egC99YeLnAF7EbOZO094ZjuH4Ryc4RzYh3Ufr6kbV/G5lfryhW3AZz+lGuTX2ytToOjv2MxFPXC5RxrlORpkuHoLKxInLXCY7O2ABA3fGvUaV3azITUwE4seB7onadBMCpRnkaLxyI2sEW2SizJfjdB26HslYDbHoOQ1IoyNq3laythe9LVUALNMPeJW3uCIw3LqGsEYBNt0GgVIEhm8xNn2M4f6JY++CeTjND8Quqj16bxY8TVhF1Jv++UNtY0WvlaJwreGA0GDm/8xjbF5qOU/NBwTTo2RpjtpH0xBR+mvQZyZHxFsdW+zdCM2gUKBTodmwm86dv8823bt8Z645dwWhAztSSvvJDjLdvoHDzpMzy9RiibgKQffEsGasWP1L9B8waTEBQIDqtjk8mLCvi+p+Jk/n6P8vanOu/Yk1fBs8bhpW1GoPByJrpq7h88pJFcfdfj2PRnnMYjRBS24eBjSoVKLP9wh1WHbqMhEQ1NwcWBNcjKkXL+N+PY5Rlsg0yPeu/QI96LxS73oqKtbBq3RMUCrJP7SP7yNZ885U1m2HVsjtyWjIA+hO7MJz+GwD1i91Q+tYFScJw8yz63YVftw9i1agRDiNHglKJdvNmMr7Nf+w1PXpg26kTssGAMTmZlA8+wBgTA4B9WBjWTZsCkLZ+Pbrdu4sdHx7v3l+xpi9h84ajtlZjNBj4vBjHHjBdw6+Fme59B7eTtWNToeVU9ZphO2gq6YvGYLx1GQCFd0Vs3hgJNrYgy2R8OBay9Y+0D54oMQbu+W3ASZLkCSwFGgLJQAwwBjgJXACsgKPAIFmW9ZIktQYmyLL8iiRJ/YEvgbayLO/IWV8I8DPQQ5blws/+h/APCsTL15tRrYZQ1d+PsLnDmBIysUC5xSMWmhtmE1a9Q9NOzdn/+z6GLRzF+nlfcDbiDG1ef5kuQ15j40ffPMqmFCokuC29u3Vm6pwPn9g6i1I1qB7Ovp583Go8Pv5V6DR3AGtCZhYod+CzcK4fPItSrST026lUaV2Py3tOFj+gpMCm3yjSP5yMnBiH/bufoD9xAGPOh7KZjS3WbbuSfeWceZKszyLz53Uoy1VE4VOxWGG929TDwdeTX5uPxzWgMo0W9GfrK7MKlGv0/gAiJq4h/tgVgr6eiHdQXaJ2/wvAuc+3cm5VeP7qKBU0Xz6M/W+vIvnsTazK2iPrsx9Yf9veI0lf8g5yUjx205aTffIgxjv31d/aFquXupJ9NU/90+6SsXwG8t1EFN4V0YyZT9qk3sXaDwDVWtfH1deTxa3HUd6/Cp3nDWRVSMFG577PN3Mt55gP/GYa1VrX4+Kek0Sdvc7KV6ejz8yiUd+XaT+lF/8budyy4AoFmrAxpM4ajzEhDscPVpN1eD/G2zfMRXR7d6Db9hsA6obN0AwYQdqcSQAYYiJJGfdWseucl+n692JUq6FU9a/G4LnDmFro9f+B+fofv2oyTTo158Dv++g75U1+WLaRE3uO4R8USN8pbzKr5/SHxjUYZd7fdZZPX2uIh4MNfb49SKvK7lR2sTeXuZGUzhdHrrLujSY42qhJzNAB4GZnzVdvNMFKpSAjK5vuG/6mVWV33O1tLK+4JGHVpje6H5cgpyZh02cahisnkRPv5CuWffEI+l3f5Zum8KqMwrsKmRtmAWD9xmQUPtUw3r5oeXyFAofRo0meMAFDXBzOq1ah278fw43cY6+/dImMIUNAp8O2c2cchgzh7uzZWDVpgqpaNRLeegvUapyXLiUrIgI5I8Py+Dz+vb/flP78sOw7jucc+35T+jOz5zTLgksKbHoMI+OT6cjJCWgmLCH7dATG6Fv5y1nbom7VGcP18/n2nU2/8WRuWIwx6hpoHMAgfr7jv+K57EKVJEnC1NjaI8tyZVmWA4EpgAdwRZbl+kAdwAd4vYjVnAJ65nnfC1Pj75E1bNuYPT+avr1dOn4BjaMdTu5lC5S7dwErVUpUahWyLAPg5evN2YgzAJzcd4LGHZs+zuYU0KB+Hco4OjzRdRbFr20gJ3/cB8Dt45excdRg7+6Ur4w+M4vrB88CYNAbuHP6Oo6ezo8UT1nJD2NsFHLcHTBkoz+8B7V/8wLlbLr2Rxf+P9Bn5U7MysRw6TRy3mkWKt8+kGubTJmE+GNXsCpjh+199bR1d0LtYEv8sSsAXNv0N+U7NHjger1a1SH53C2Sz5oaYFlJachGucjySl8/jHFRyPHRpvof+QtV/WYFylmHvGnKzOWpq/HWFeS7iabXUdeRrKxApbag9vnVaDzZloEAACAASURBVBfI8Z9Mx/zW8cvYOGhwcCt4zK/lOeZRZ3KP+bWDZ9FnZuUsf4kyxTgXVFVrYLwTiTHmDmRnk/X3LqwatchfSJv7oSxZ2xa7fg/TsG0j/jJf/xexs/D6J+f6l2XQ2GsA0DhoSIpNtCju6ehkyjtp8HHSoFYqaO/nyZ4rMfnK/HzqNq/XewFHG9NxddZYA6BWKrBSmT4msgzGe5tSLApPX+TkOOS78WA0kH3+CMrK9S1cWkZSqU3ZX6UaFErkjJRixVdXr44hMhLDHdOxz9y1C+vm+a99/YkToDM1WvVnz6JwcwNAVaEC+pMnTY2WzEyyr1zBqlGjYsWHx7/3y7KMrfnY25Fo4bEHUFSohjHuDnJCDBiyyT62F1WdJgXKWXfqS9aOTcj63OyasnoAxqjrpsYbQEbqfyfzZTQ+u7//qOeyAQcEAXpZls39gLIsnwRu5XlvAA4D5YpYxz6gkSRJakmS7IEqwKP1G+Vw8XQhISrO/D4xOgEXD5dCy05fP4u1xzagTddyKPwAALcv3aRhu8YANO3UHFcv18fZnBLl6OlMSlSC+X1KdCKOHgVvaPfYOGrwezmAa/tPP1I8qawrcmKs+b0xMQ6pbP59r6hQBYWzO9n/RjxSjMLYepYlPU8906MSsfUsW6BMxp3EIsv4DWhLpx3zabJ4MFZlTDdxx0qeyLJMm28nEbxtLjWHd3rgdkhOrhgTc889OSkOhdN99X+hCoqybmSfOlzkelQBL2K4cfmRulAcPcpyNyq3ninRiTh6PviYV38pgCv7zxSY1+D1IC4WIxMrObtiiM9z/BPiULgUvH6sO4ZQ5tNvsX1zKBlrlpmnK929cPxoDQ5zl6GqUdfiuHk5e7qQEJXb5ZsQHY9zEdf/tPWzWHNsPZl5rv91s9fQb2p/Pj24ltBpA/hm4QaL4sam6fBwyG2QetjbEJemy1fmRnI6N5My6L/xEKHfHWT/9dxzJTpVy+sb/qbjmj30b+BbvOwbINk7IafmHnc5LQnJwalAOVWVAGz6zcTqlaFI9qbzwnjnKoZb57EN+xDbIYsw3jiDnBhdrPgKNzeMcbn1McbFocxpoBXGtlMnsg6brgFzg83aGqlMGdT+/ijd3YsVHx7/3v/l7DX0mzqAVeZjv97i2AonF4zJeeqfHI9U5r5r36cykpMrhrNH80939wZkbIfNRjNxKVYvdbM4rvD0Pa8NuNrAPw8qIEmSDdAY2FpEERnYAbQHugC/PckNfJi5obMY3PBN1FZqajczfWB8MvFjOvQLZuEfi7G1syX7QV1mzxGFUkG35SOJ+HIbSbfiHr7Ao5AkbHsOQ7vx6Y/9K46LX+3g16bj2Nx2GtqYZAJm9gFAUilxb1SN/SNXsi1kNuU7NMCzRa1HDyRJ2Lw+hMwfPiuyiMK7AjbdBqH9elmRZZ4UhVLBGx+P5OC6rSTdis03r15Ic7zr+rLvsz+eeFzdll+4O6w32vWrse0RCoAxKYHksNdJGf8WGV98gt24GWCreeKx85oXOouwhv1RWamp3awOAO36dmTdnLUMazqIdbPXMuyDUU8snsEoczM5nc97NGJBcD3m/HmG1ExTI93TwZbv+7Xg1wEt+f1sFAnpuoes7RHiXz2Jdu0UMje8h/HGWaw6DARAcnJD4eyF9vNJaD+bhKJ8dRTlqj7x+PfYtG2Lys+P9I2mcXZZR4+SFRGB8yefUGbGDPRnzjz1jExh9/72fTuybs4ahjYdxLrZaxj+BI89koR117fQ/bK24DyFEmWlmmSu/5CMpZNR1W2Kslq9Jxf7cYgM3HPbgHuQypIkncA0Ju6OLMv/PqDsRkzdqD2B7x5QDkmSwiRJOipJ0tGrabljKzqEBrMofCmLwpeSFJuIi3fuNz9nTxcSYhIKWx0Aep2eI9sjzFm3qCuRzOk3k8mvjOPv3/YSfaN430RLWsPQtgwNn8/Q8Pmkxibj6J37LdDR05mUmKRCl3v1/UEkXovm0BdFtbUfTk6KR3LO/eascHZDTsqz7200KMpVxP6dj3BY9DXKyjXQvD0bZcVqxY5Vrf/LBP85j+A/56GNTcYuTz3tvJ3RRuevpzY6CY2Xc6FlMuNTTF2jsszlb3bjWt80+DzjTiIxhy6gS0zDoM0iatdJnOtULLr+yfEonHPPPamsG8bkvPW3ReFdEbsJi7BfsB5lpRpoRs5GUaFqTnlXbIfPRPvFB6ZuaAs17teWkeHzGZlzzMt459bT0dOZlOjCj3nIgreIvxbNgfuOeeXmtWk9MoSv3/oIQ5blX2DkxHiUrnmOv4sbxoSiH4DI+nsn6ntdrNl65FRTt53h6kWM0ZEovctbFLd9aDCLwpewKHwJSbFJuHjnZv1cPF1JfOj1f9h8/bfuFkTEloMAHNy8nyr1LGvIuNtbE5Oa+7BTTFombvbW95WxoVVld9RKBeXKaKhQVsPN5IwCZaq42nMssvBjVhQ5LRnJIfe4S/ZlkVOT8xfKTAeD6Xhmn96HwsP0oISyij+GO1dBrwO9DsP10yi8Cj6A8SDGuDhzlyiYMnKGuIJfBK0CA7Hr25fkqVMhTzdi+tdfk/jWWyRPmACSRPatWwWWLcyTvPe36tbmvmNv+X3JmJyAwilP/Z1cke/miW1ti8LrBTSjFmA3cy3Kin7Yhs1AUb4KcnIChstnkNNTQK8j++xRFD6VLY79/4kkSR0kSbogSdJlSZLeKWT+C5Ik7ZYk6bgkSf9KkhT8uDGf1wbcGSCwiHn3xsBVBgIlSepc1EpkWT6MaaycqyzLDxw1K8vyZ7IsN5BluUEl+wrm6VvXhzMxeAwTg8dweHsErbsFAVDV34+M1AySY/PfDG00NuaxEQqlgoA2DYi8chsAR5cyAEiSRPdRr/PnN4/eoCkJR9b/yargqawKnsr57Uep1+1FAHz8q6BL1ZIWm1xgmTYTemDtoGHre5Z1FxXFcO0CSvdySK6eoFShbtQa/fEDuQW06aS+3Y3UiX1JndgXw5VzZHz8LobrxRgsnePiuh2Et51GeNtp3N76D77dTQ0B14DKZKVkoL2vntrYZPSpWlwDTDdG3+4tuLXNlEDOO16ufMcGJF8wnQt39vxL2RrlUdpaISkVuDetzt2LkUXX//oFFHnr37AV2ScP5tmIDNLG9SBtSihpU0IxXD1Hxop3Md64BLZ2aEbNQffjWgxXzhZrX0Rs+JMVwVNZETyVc9uP4v+a6ZiXzznmqXEFj/nL403HPHx2/mPuVasCXeYP4uu3PiI9oXjjoLIvnUfh5YPC3RNUKqxatEF/ZH++Mgqv3NEU6sCmGO+Y9rXkWAYUplulwsMLpZcPxpgoi+JuWx/OxOCxTAwey5Hth2hlvv6rkZGa/tDrPzDP9Z8Ym0jNJrUBqN28LtHXLduGWp5luJmUQeTdDPQGI9suRNO6Uv5uwKAq7hy9ZermTNJmcSMpg3JlbIlJzSQz2zRoPSVTz/HIJCo621kU9x5j9HUkJ3ckR1dQKFFVb4jh6n3d33ZlzC+VletjzOkmlVMSUfpUA0lhygb5VCvw8MPD6C9cQOnjg8LTdOxt2rRBd+BAvjKqKlVwGDeO5KlTkZPznJMKBZKjo6lMpUqoK1cm62j+bsaiPMl7f1JsIrVyjn2d5nW5Y+GxBzDevIjCzRvJ2QOUKlQBLck+lWeYSGYG6VP7kP7eINLfG4Th+gW0n83BeOsy2ef+QeFdAdTWoFCgrFIbY/TNooP9PyVJkhL4BOgI1AR6SZJU875i04HvZVn2x5QUWvm4cZ/Xp1B3AfMlSQqTZfkzAEmS6gLmu4Qsy/E5reQpPLh79B0g80ls1LFdRwkICmTF3tXotDpWTvjYPG9R+FImBo/BWmPDO2umo7ZSIykkTh88xfavtwDQonNLOoSaGu0RWw+y6/sdT2KzzCbOfJ8jx/8lOTmFl0L6MnxQP7q92v6Jxrjn0q4TVA2qz9t7F6PXZvHrhNXmeUPD57MqeCqOns60HBVC3OVIhmyeB8Dh9ds5tnFP8QMajWi/WY7d+PdNj9Lv24ox6gbWIW9iuH6R7BMHH7i4w6KvwUaDpFKj9m9O+keTCz7BWojInSfwfqkeXQ58RLY2i4Njc7sog/+cR3hb05Nkh6eso9nSMJQ2VkTtPmn+qRD/6T0pW6sCyDLpt+OJmPQFAFl3Mzi3egsdw2eDLBO56ySRO08QWNRQOKORzG9XoBkzH0lSkLV/m6n+nUMx3LhI9slDRdbBqk0XFO7lsH61L9av9gUgY8mUglmUh7iw+wTVguoz7q8l6LU6fpqYe8xHhs9nRc4xDxrVldjLkYzIOeaHvtrO0f/tocOUPlhrbOi18m0AkiMT+HrwR5YFNxrI+HwpDjM/NP2MyM5wDLeuY9trINmXz6M/cgCb4NdQ1Q0EQzZyWhrpHy8AQFWzHra9BpoyREaZ9FWLkdNSi1V3gGO7/sE/qAHL964iS6vjkwm5T9AuCl/CxOCxWGusmbxmmvn6P3PwFNu/Nn1RWz35EwbMeguFUolep2f1O5bd/1UKBZPb1GT4T0cxyjJdavlQ2dWBlQcuUdOjDK0ru9OsgisHb8Tz2lf7UEoSY1r64WRrxaEb8Szeex6QAJnQQF+quhbzQSfZSNbub7HuNsaUwTq9HzkhCnWzzhijb2C4ehK1fxuUleqDbEDOTCdr65cAGC79g+KF6tiEzgJkDNfPYLj6oE6TQhgMpC5bRtlFi0ChIHPLFgzXr2M3YADZFy6gO3AA+2HDkGxtKfPeewAYY2JInjYNVCqcPzbdp40ZGdydN++RnsJ83Hv/qskrGDBrMEqlEr0ui9XvfGJ5cKORzE2r0Ayfbbr3HfoTY/RNrIL7YLh5CcPpose8ok0na/cvaCYsBhkMZ48WGCdXUkzD2P8zGgGXZVm+CiBJ0kZMQ6/yfuOVAcec12UAy1vhRZDkR3msqBSQJMkb08+IBGJqgF3H9DMiP8uyXDunjITpwYSRgJL8PyPSQJblkfetcx3wx8N+RqR7hc4ltlO/+2dpSYUGYF7gjBKNP7ZNzMMLPUW/b/Ms0fidO8U+vNBTtPDPkn2wZrx/0VnIp23IsYID85+lr6ZULNH4FPOnNZ601N8s/120p2HENceHF3qKvuxSsmO1HD7+Q3qW8bR71z2zz1lNqwFDgLA8kz67lxwCkCSpO9BBluW3ct73AxrnbUNIkuQFbAfKAnbAy7IsP3Cs/sM8rxk4ZFmOovCfCKmdp4wM5B2RuSdn+jpgXSHr7P8EN1EQBEEQhEfxDB8uyGmsFf2El2V6AetkWf5IkqSmwAZJkmrL8qP/LsvzOgZOEARBEAThWYgE8j7Z5JMzLa9BwPcAsiwfBGyAx+qyEA04QRAEQRBKF9n47P4e7ghQVZIkX0mSrDA9pHD/2PqbwEsAkiTVwNSAe6zfxRINOEEQBEEQhEcky3I2prH024BzmJ42PSNJ0uw8v3QxHhgsSdJJTD9L1l9+zIcQntsxcIIgCIIgPKf+Yz+wK8tyOBB+37R387w+CxT8/42PQWTgBEEQBEEQShmRgRMEQRAEoXR59Ic3nxsiAycIgiAIglDKiAycIAiCIAily39sDFxJEBk4QRAEQRCEUkZk4ARBEARBKF3EGDiRgRMEQRAEQShtRAZOEARBEITSRYyBExk4QRAEQRCE0kY04ARBEARBEEoZ0YX6FHzeIKXEYs8LnFFisQGm/TOnROM3rfNmicYfLz3Wv7Z7bC9v1pVo/M21Iks0/osHMkss9tFFNUssNsDb714u0fgyJXvuJ8qOJRp/nlV2icbv/UvJ5mN+//gZBxRdqCIDJwiCIAiCUNqIDJwgCIIgCKWL+BkRkYETBEEQBEEobUQGThAEQRCE0kWMgRMZOEEQBEEQhNJGZOAEQRAEQShdxBg4kYETBEEQBEEobUQGThAEQRCE0kWMgRMZOEEQBEEQhNJGZOAEQRAEQShdxBg4kYETBEEQBEEobUQGThAEQRCE0kWMgRMZOEEQBEEQhNJGZOAEQRAEQShdRAZONOCeJVX9RmgGjgSFEt3Ozeh+/jbffKt2nbHpEIJsNEKmlvRVH2K8fQMAZYVKaIaMR9JowCiTMnko6LMea3s6zgqlalA99Nosfpmwmjunr+ebr7axosenb+P8ggdGo5GLO46xY+H/HitmUabPX8ze/YdxLuvEL1+veioxACbMGU3zl5qQqdUxa8x8Lpy6WKDM6h8/xtXdhcxMHQAje44jKSGZbqFd6NG/KwaDEW2GlnkTF3Ht4vWHxgyYE4p3m3oYtFkcGruapFMFlylbpyJNlg5FaaMmatdJjs1Yn29+9SHB+M/sw4+1h5CVmEa59oHUndgdWZYxZhs4NnMD8YcL1uV+4+e8TbM2jcnU6pg9dgEXTl0qUObTTUtx9XBBl1P/UT0nkJSQTO+w1+ncuxOGbAPJCcnMGbeQ6MiYh8a8R92gEfbDRyEpFGi3bEb7v/znv80rnbHt3BWMBmStltQlH2K4eQPJwRHHd2ej9vMjc/tW0lYsszjm/abMG0fLl5qh1WYy7e05nDt1oUCZL39aiZuHq7n+g994m8T4JCbPHkOj5oGmbbW1wdm1LE2rvWxR3P1Xovlg+78YZZmu9SsysJlfgTLbzt5m9b5zAFTzKMP7IY0AuHM3g/c2HyMmRYskwfI3mlHOya7Yde85cwB1ggLI0ur4csIn3DxzrUCZ0V9No4y7E0qlkktHzvHNjLXIRiOBwU3oPOZ1PKuUY36XKdw4dbXY8XvNHEidIH+ytFl8MWFFofHHfDWNMu5lUZjjr8mJ35TOY17Hq0o55nWZwo1TV4odf9CswQQENUCn1bFiwlKuni5YhxlfzaKse1kUKiXnDp/h8xmrMRqNVKxRkSHzh2OjsSH2dixLR3+ENk1rcWy7FwPxmD4ESakg+fttJHz2Q775tg1r4zktDGs/XyLHvk/q1v3mee6TBmLfuiEoJNL3Hydmzupi1x0g7L0wAnPqv2z8Uq6cLnofTl87A88XPBnZdgQAzTs1p/fY3vhUKc/4zuO4/O/lR9oG4cn6f9+AkySpKzDzvsl1gRHASuBtWZaX55RdARyVZXldsQMpFGgGjyZt9gSMCXE4LFyF/sh+cwMNIGvfDrK2/waAukEzNP1HkDZ3EiiUaEZPI2PZfAw3riDZO4Ih+1Gqa1Y1qB7Ovp583Go8Pv5V6DR3AGtC7t8NcOCzcK4fPItSrST026lUaV2Py3tOPlbswoQEt6V3t85MnfPhE1/3Pc3bNKF8JR+6NutF7YCaTHl/PP07DSm07PSRszl3Mv+H+9af/uTH9b8C0LJdc8bOGsnbvSc8MKZXm3o4+HryR/PxuARUocGCAfz5SsH93PD9gRyeuIaEY5dp9fUkvILqcWe3aT9rvJ3xbFWH9Nvx5vIx+06zZds/ADjVKE/z1W+zueXEB25LszaNKe/rQ7fmfagdUJPJC8Yx8JVhhZZ9d8Rczv2bv/4XTl/izY5h6LQ6uoV2YdSMoUwb+t4DY5opFDiMGkPy5PEY4+Mou2I1WQf3Y7iZe/7rdu0g8w/T+W/VtBn2Q0dwd+okZH0W6evWovL1RVXR17J4hXjxpWZU8C1PxybdqRtYm3c/mESvjoMKLTt5+LucOXk+37SF7y41v+49qAc16hRshBXGYJRZsPUkq3q3wMPRlj5f7KZVVS8quzmay9xITOOLAxdYF9oKR1srEtMzzfOm/3aUt5r70bSSBxlZ2UhScWptUru1P+6+XkxrPYpK/lXpM28wC0KmFii3esRiMnMaJkM/HU+DTk048vsBIi/cYuXQD+k3P6z4wYE6OfGn5sTvOy+M+SFTCpRblSf+sE8n0KBTU478vp+oCzdZOXQRofMLv14fJiAoEC9fb0a0GkI1fz/C5g7jnZCC18uHIxaaG2YTV71D007N2f/7PoYvHMW6eV9wNuIMbV5/mZAhr/HdR99YFlyhwHPWcG72n4Y+Oh7fH5eSuusQWZdvmYtkR8USNXkxzoO65VvU1r8GtgE1ufqKqSFVYeMiNI3qkHH4VLHqHxjUAO+K3gxpGYafvx/D5g1nQpfxhZZt2qEpmen5G6c3Ltxgfth8RiwYWay4wtP1/34MnCzLP8uyXP/eH6ZG2z5gGxALjJYkyepx4yirVMcYHYkx5g5kZ6P/exdWDZvnL6TNyH1tYwOyDICqfgMM169iuGH6xiSnpTx2+tivbSAnf9wHwO3jl7Fx1GDv7pSvjD4zi+sHzwJg0Bu4c/o6jp7OjxW3KA3q16GMo8NTWfc9rTq0IPyHrQCcPnYWB0d7XNxdLF4+PS33+NhqbJBzjs+D+LQP5Pom035OOHYZqzIabO7bzzbuTqgdbEk4ZvpWe33TPnw6BJrn+8/qx4m53+WLl52hM79Waqwt2paW7VsQvmkbkFP/Mva4uFt+PP85cByd1hT31LGzuHu5Wbysyq8GhqhIjNGm8z9zzy6smrXIV0bOyN2/ko0t3KtSZibZZ04hZz1exrlNh5b89sMWAP795zQOjg64FuP45xXctR3hP223qOzpqETKO9vhU9YOtVJB+5o+7Ll4J1+Zn45f443ASjjamm41znY2AFyJS8FglGlayQMAjZUKW3Xxv3fXb9eQQz/9BcDV45fQONhRxs2pQLl7jSelSolKrbp3CyL6SiQxV6OKHTdv/IM/7ckTX2NR/HsbcOcx4zdq25g9P+4G4OLxC9g52lHWvWyBctoi4nv5enM24gwAJ/edoEnHphbHtq1bjawbUehvRYM+m5TNe3F4Kf/y+shYdBeuF/xpDFlGslYjqVVIVmoklYrshGSLY9/TpF1jdv24C4ALD6i/jcaGkMEh/G95/p6W25dvE3k1sthxnypZfnZ//1H/7zNweUmSVA14F2iGqXEbB+wH3gQ+f5x1K5zdMMbHmd8bE+NQVq1ZoJx1hxCsX+2BpFKTOmssAEqv8oCM/YwPkBydyPp7F7pfNz7O5uDo6UxKVIL5fUp0Io4eZUmLLfzmYOOowe/lACK+2PpYcUuSm6cb0VGx5vcxd+Jw93IlITahQNmZS6ZgMBjZFf4Xa5d8ZZ7eo39X+gx5A5VaxbAeYx4a09bTmfQ8+zkjKhGNZ1ky8+xnjWdZMu4k5itjm9NQLtc+EG10IslnbxZYt0+HBtSb+gbWLo78Fbroodvi7ulKTJ76x0bF4e7pRkJsYoGyM5a8g9FoYNfmvXyxdH2B+Z17BXNwV8RDY96jcHXFEJcb2xgfh7p6jQLlbDqHoOn2OqjU3J308P1bHO5ebvm6fGPuxOLh5UZ8Icd/7rIZGA1G/vxjN6uWfJFvnpePJz4veBPx91GL4samZuLpYGt+7+Foy6nI/Pv8RmIaAG9+tQejUWZoyxo0r+zJjcQ0HGzUjNt0iMjkdBr7ujM6qDZKRfHScGU9nEnMcx4mRSfg5OnM3biC1/uY9dOoWK8Kp/ec4J/wQ8WKUxQnD5f74ifi5OlSRPzp+Narwuk9xzn6hOI7e7oQH5V7/02ITsDZw4Wk2KQCZWesn0XV+tU4tucfDoYfAODWpZs0ateYw9sjaNapOa5erhbHVnm6kH0nN3uuj47Htp5l2VvtifNkHPqXqge+BkkiacPvZF259fAF7+Pi6UJ8nm1IiE7AxbNg/ftO6MvPn/1i/qIm/Lf9v8/A3SNJkhr4Fhgvy3LeT8uFwARJkpTPYjt0W38hZUQfMjasxqZbP9NEpRJV9TqkL51H6rRRWDV+EVWdgGexOQAolAq6LR9JxJfbSLoV9/AFSrnpI2bTs01/BoeMwL9xXTr1aG+e98O6nwlp2pPl81YxaEzoU90Opa0VNUd15tSiTYXOv731KJtbTmTfwCXUndTjicV9d+Rcer80gLCQUdRvXJfg7u3zze/wWltq1PVjw6eP9yWiMJm//ULim71JX7MaTe+nu3+LMnn4TLq27kO/zkMIaFKfzj065psfHNKW7X/swvgEB1EbjDI3E9NY07cl73dtxOzNx0nJzMJglDl+K55xL9Xhm4FBRCal89u/Nx6+wsewNHQeExqFobJSUb1Z7acaq/D4cxnfaDAqKzU1SiD+nNBZDGr4JmorNXWa1QXgk4kf06FfMIv+WIytnS3Z+scbwmIp9QteWFcpz6UXQ7nUoh+apvWwbVDrqcTyremLZwUvDm07+FTW/8QZjc/u7z9KZOByzQHOyLKcL3csy/JVSZIigN4PWliSpDAgDGCxf1X6+3rnm29MjEPhmtvlpHB2Q04oujGk378Lu7CxZADGhDiyz55ETr1rmnfsEMpKVck+daw49aNhaFsCewYBEPnvVRy9c7uPHD2dSYkp+G0U4NX3B5F4LZpDpTD71qN/V0L6vArA2ZPn8fR2594IPg8vN2LzfCu9Jy7aNC0jXcvWn3ZQq34NNv+wLV+Z7b/sZMr7hY8hqdq/LZX7mPZzwomr2Hm7cC+KxtuZjOj8+zkjOgmNV25XpsbbGW10IvYVPLB/wY0OOxaYpns502HbPLYHv0tm3N3c7Y04j/0L7lg528N9ybTu/UMI6fOKqf4nLuDh7W6e5+7tRmx0wXMwb/23/byDmv7VzV2vDV8MZMDofgx97W30WfpC618YY3w8Srfc2ApXNwzxBff9Pbo9O7EfPRYenlh8oF4DutO9bxcATp84i2c5D/M8Dy93Yu4UrP+9fZKRnkH4T9uo41/L3PUK0DGkLXPfsXzD3B1siE7NHVMUk6LFPU9GDsDDwZba5cqiVioo52RHBRd7biam4eFoi5+HEz5lTQ8tBPl5829kIl0tiNu6X3ta9jI9ZHHt5GWc81zvZT1dSI4umHm9J1un5+SfR6jftiHn/v7X4rrmFdSvAy/2egmA6yev3Bf//9i77/AoqraBw7/Z3fRKGgmhJBBAOiT0IjVUCwj4Kk1FX1GULl0sKEVRLPAioiIqxd5QSOi9BgjSe0uHFNI2m+zuyiEvoQAAIABJREFUfH/skh5IaCF+z31duWBnzs4zfc8+55xZD1LiimY+88ePtMY/fpvxew7rTehT3QE4+88ZvKp4A5ZBIp6+niTFlxw/x5DD/nV7adG9FYd3RBJ9LpqZQy19V/0CqxDSpXmp18MYl4guX8bOxtcL401i5+fSvS36yFOomZY+kRnbInBoVg99xLFbvrf3sD70eNry5evMP2cKZA09fT1JLLT/Hwp+iKDGQXy58yu0Oi1unm7M/mEO0/5TtK+ieDBIBg5QFKUT0B8oqYfmbGAyUGK7haqqS1RVba6qavPClTcA09lTaPyqovHxBZ0Om/ZdyI7YVaCMxs8/9/82Ia0xxVr6HBgj96GtURNs7UCjRdegKaYrZf8Wvv/b9SzuPY3Fvadxcl0ETfp3AKBqsyAMafpim0+7vDYQOxdHwt7+rszxHgQ/LfuNwaHDGRw6nC1rt9N7YE8AGgbXJz0tvUjzqVarxc3DzfJ/nZYOoW05d8oyWq5aYNXccu27teHyhahiY55Ztp6w0GmEhU4jOiyCgAGW/ewZHEROqr5A8ylAVkIKOWl6PIODAAgY0IGo8ANcP3mF3xqPZHWrsaxuNZbM2CTCekwn6+p1nAPyKiKVGgWgsdWRbW2Gy+/nZb8zJPQFhoS+wNaw7bnZtIbB9UlPzSjSfFp4+9t3a8P5k5btr9OwNlPfm8Brz04luYz9cIynTqL1r4rG13L+23fqQvbunQXKaP3zzn/bVm0wRRe/f8ti1dc/07/rUPp3HcrGtdtys2mNQxqSnpZepPlUq9Xibt1+nU5Lx9D2nDmZN1ovMKgGrm4uREaUvhN5gyqVuJyUTnRKBjkmM+HHo+hYx69Amc51/Yi4ZKnQJmcauJSYTlV3Jxr4VSItK4ekDEuT1r6LCdT0Kl1f0S3fhTOz90Rm9p5I5Lr9tH6iIwA1m9VGn5ZZpPnSztE+t1+aRquhUZcQ4s7dfr+nzd+F5cY/tG4fbZ7oVKb4jbsEE3sH8cO+XcOE3mOZ0Hss+9btpVN/y5eqOs3qkpmWWaT50N7RPrdfmEarIaRLc6LPWc5BN0/LOaEoCgNHPUn4itJ/mdUfOY1tQBVsqlYGGx2ufR4mbWPpmoZzYq7i2KIhaDWg0+LYohHZ54p2pyjOmm//Zkyv0YzpNZo94bvp0r8LAHVL2P61y9fybItneKHd80zuP4mYCzEPduVNMnCSgVMUpRLwNTBIVdW04sqoqnpSUZTjwKPA/tsKZDaR+eUnOM+YBxoN2ZvWYr5yEfunnsN09hQ5Ebuw69UPm8YhqEYTakYaGQstmRc1Ix3D6p9wfX8xqJYMnPHgnfUNObMpktqdmzJ623xy9Nn88Vre0PSX1sxmce9puPp68PCovlw9G82Iv2cBsO/bdRz8fssdxS7OxDfnsv/QP6SkpNK17xBGPj+U/o/2uPUby2Dnxt2069qa33d/T5Y+i7fHzcmdt2L9UgaHDsfG1oaFqz5Ep9Oh0WrYtz2C35avBuDJ4U/QskNzjDlG0q6n8dboWbeMGbMxEr+uTXlk13xM+mz2jsvbzz3XzyYs1DISMGLq17T6eARae1tiNx8mdtPNR/pW69OCwAEdMBtNmPTZ7Hx5QSm2fw9tu7bm110rydIbeGfc3Nx5y9d/yZDQF7CxteHTlfPQ6XRotRr2bT/A7yv+AmD0jJdwcHJgzhLLyNO46ARee7boSMZimU2kL/wYtzkfoGg0ZIWvwXTpIo7PDMd4+iTZu3dh//gT2DYLAZMRc1o6ae/nHR+P775HcXRCsdFh27Y916e8VmAEa2ls27CTh7u2Ze3eX8jSZ/H6mHdy5/2y8Tv6dx2KrZ0NS77/FJ2NFq1Gy+7t+/l5+R+55Xr1DWXtH+vLFFen0TClR1NeXrUTs1nl8SY1CPJ2ZdHW49T3c6dTnSq0rVmZ3ecTeOLz9WgUhXFdG+LuaAfAuK4NGbFyO6oK9fzc6d+s7CNxj2w+SKPOzZi1dQHZ+myWTfxf7rw31sxjZu+J2Dra8eqXk9HZ2qBoFE7tPsbWFZaBGs16tOTpt4bj7OHK6KVTuXLiIh8Pu/X5XzB+MLO3LrQ8xmTioiLx7RztePXLKdhY45/cfbRQ/Odx8XBlzNKpXD5xkY+HvVvq+Ac2RRDcOYRF2z63Pkbk09x5H675mAm9x2LnaM/UL19HZ2uDRqNwdPcRwpdbMq/tH3uYXsN6A7AnbDebftxQ6tiYzMS9/RnVlr5reYzIz+vIPnsZrzFDyDpyhvRNe7FvVJuqi2agdXXGuXMrvEcP4Xzvl0kL24FTm8bU/HsRqJC+7QDpm/aVPrZVxKYImnduzpLtX1geI/Ja3ojqT9Z+ypheo2/6/tY92jBi5gjcPNx44+s3uXD8Am8OfaPM6yHuLqU0o9f+zRRFmQq8DhR+INYqYKiqqg2t5ZoAh4Dht3qMSHL/TuW2Uz+J8L91oXto+oF3bl3oHmrT6JlyjT9BqV6u8T/izrNWd+Lve9M9p9Q6/ZN160L3SMS8LuUWG2D0G+X7bC6V8v0sSVLvbJTynZple3/6xZVkkqF8G9RWX/7rNh5wc/v0y6fftxPOYcis+7ptpfX/PgOnquocYE4Js9/LV+4w0uQshBBCiAfA//sKnBBCCCEqmAe4b9r9IhklIYQQQogKRjJwQgghhKhY/p/33wfJwAkhhBBCVDiSgRNCCCFExSJ94CQDJ4QQQghR0UgGTgghhBAVi2TgJAMnhBBCCFHRSAZOCCGEEBWLKhk4ycAJIYQQQlQwUoETQgghhKhgpAlVCCGEEBWKapYH+UoGTgghhBCigpEMnBBCCCEqFnmMiFTg7oXH92jLLfbq7vHlFhugTaNnyjX+7iPflGv8nQ0ml2v8rd8OLNf4g19cV67xI2a3KLfYlV/+odxiA8TN7l6u8ZXqAeUa3/BjeLnGH7nLvVzj/zDRr1zji/tPKnBCCCGEqFjkMSLSB04IIYQQoqKRCpwQQgghKhazev/+SkFRlJ6KopxSFOWsoihTSijzpKIoxxVFOaYoyso73QXShCqEEEIIcZsURdEC/wNCgShgv6Iof6qqejxfmdrAVKCdqqrJiqL43GlcqcAJIYQQomJ5sEahtgTOqqp6HkBRlO+Bx4Hj+cr8F/ifqqrJAKqqJtxpUGlCFUIIIYQogaIoLyqKEpHv78VCRfyBK/leR1mn5VcHqKMoyk5FUfYoitLzTtdLMnBCCCGEqFjuYwZOVdUlwJI7XIwOqA10AqoC2xRFaaSqasrtLlAycEIIIYQQty8aqJbvdVXrtPyigD9VVc1RVfUCcBpLhe62SQVOCCGEEBWLqt6/v1vbD9RWFCVQURRb4Cngz0JlfseSfUNRFC8sTarn72QXSAVOCCGEEOI2qapqBF4FwoETwI+qqh5TFGWmoiiPWYuFA4mKohwHNgMTVVVNvJO40gdOCCGEEBXLgzUKFVVV1wBrCk17I9//VWC89e+ukAycEEIIIUQFIxU4IYQQQogKRppQhRBCCFGxlPInrv7NpAJ3n42e+Qqtu7TCoDcwZ9z7nD56psSyc75+B7/qfjzb9QUAghrUYsLcsdja2WIymvho2ieciDxV6ti6hi2wHzQSNBpytq3FsOb74suFdMDp1TdJf3skpounUZxccXzlDbSBdcneGU7W8oVl2+h8XntnDO26tiZLb+CtsbM5deR0kTKf//IpXj6eZGUZAHj1qfEkJ6bQf9jjDHy2HyaTGX2mnlkT53Hh9MXbXpf8Xp89n2079+FRyZ3fly++K8sE8OjclKB3n0PRaohdsZHLC34vMF+x1VFv4ShcGtckJzmN4y9+RNaVqwA41a9OnXkj0Dk7oKoqB3tMAY1Cgy8m4BBQGdVkJnH9Ac6/u6JU67Lz+CXe/3UbZrNKvzb1GR7avMD8eb9uZ/+ZKACyso0kpWey470RAMQmpfH2qo3Ep6SjAAteegx/T9cy74/n3/ovwZ2bY9AbWPjax5w/WnQQ1oxv3qKSTyU0Oi0n9h3jixmfYzabCagXwIjZI7F3tCchKoGPx3yIPl1fum0/n8D7G49iVlX6Na7O8NZFR++Hn4zh852W66mOjxtzHw0GIHjeaoK8Ldvq5+LAJ/1blnm7Ad6f9wbde3QiU5/FyyMmcjjyWIH5zs5OhK3/Ife1fxVffvjhD6ZMeoe27Vow9/0ZNGz4EM89M4Y/fl9bptiaGvWx7fgkKBqMx3ZijAgvMF9brw227Z9AzbA8kirn8BZMx3YCYNOuH9qAhpbp+9ZgOnOgzNu+81QU76/ea9n/LeowvFPjAvPnrd7L/vNxAGTlGElKz2LHW4M5GZPI7N93k56Vg1aj8ELnxvRoUrPM8XVNWuAw7FXQaMne/DeGP1cVmG/b7VHsQvuC2YyapSfzyw8xR18CrRbHFyeiDagNWi3Z29dh+OP2fsJy2FvP07RzCNl6A4tfW8DFYs79yd/MwN2nElqdlpP7TvD1jCWo1r5e3Z/tTfehvTCbzRzadIBVc769rfXYeSmRedtPY1ZV+tavwvCQgCJl1p2JZ/G+8yiKQh1PZ+b0aHhbscS9VaErcIqipKuq6qwoSgBwARitquoC67yFQISqqssURVkGdARSAQdgDzBNVdWo/MvJt9xngeaqqr6qKEpd4HPAHbADtquqWvgpzKXSuktLqgZWZVD7YdQPrsf4OWN46dFXiy37cK/2ZGYU/HB6efqLLJv/HXs376N1l5a8NP1FxgycULrgigb7oaPI+GAyatJVnN/4HzmRuzDHXC5Yzt4Bu9B+GM+dyJ2k5mST9dsytP4BaKoGlGWTC2jXpTXValalX9unaRhcn6lzJ/BsnxHFln391ZmcOFywchr263p++fYPAB7u3o5xb73K6EGv3fb65Ne3dyiD+j/GtHc+uCvLA0Cjofbc5zn85DsYYpIICZ/DtfAIMk9H5RbxG9QFY0o6e1uPwqdvW2rOGMLxFz9C0Wqo97/RnHhlARnHL6Gr5Iw5x4TGTseVz/4kZecxFBsdTX5+A48uTUnaFHnTVTGZzcz5aQuLX+lLZXdnBn/wAx0b1qSWn0dumYlPdMj9/6qthzkZdTX39evL1/NC9+a0eag6mYZsFEUp8+4I7hyCX2AVXuk4gjrN6vLiuy8zpe/EIuU+eOW93IrZxMVTaNOnHTtXb2fke6NYNmspx/ceo8uT3eg74glWfXjryqvJrDJnwxEWP9mayi4ODP52Ox2DfKnl5ZJb5lJSOkv3nGHZ4Ha42tuSlGHInWen0/Ljsx3LvL35de/RiVpBATRt3IUWLZry0cfv0KXTEwXKpKdn0L7NI7mvt+74gz//CAMg6koML4+YxOgxL5Q9uKJg2+lpDL99gpqejP1TUzGd/wc1KbZAMeOZA+RsKfilThPQEI1PdbJWzgKtDrsB4zFdOgbZWaUObzKbmfPHHhY/34PKbo4MXriajvWqU6uye26ZiY+2yv3/qp3HORmTBICDjY53nuxADS83ElIzGbTgT9rU8cfVwa4M26/B4bkxZMyeiDnxKi6zFpNzYJelgmaVvXMj2RtWA6ALaYvD0JFkzJ2MTatOoLMhbfLzYGuH6wfLyNm5EfO1+NLHB5p2DsY3sArjO44kqFkdhr87gjf6Ti5S7tNXPsg998cunkTrPm3ZvXoH9ds0pHloS6b0Gocx24irp1uZ4t9gMqvM3XqKzx5vRmVnOwb/uJ+OgV7U8sj9+ONSSiZLD1xkWf/muNrbkJSZfVux7jn1wRrEUB7+TX3gEoAx1mewFGeiqqpNgLrAIWDTTcrm9ynwkaqqTVVVrQcsuN0VbN+jHeE/rwPg+METOLs54+njUaScg6M9T744gG8/KfjhpKoqTi6OADi5OHEtvvQjkLU162JOiEG9GgsmIzn7tmDTrF2Rcvb9nsWw5gfIyXfRZmdhOnMUNefOLuSOPduz5ifLB9LRg8dxcXXG08ez1O/PSM/M/b+Doz1q6Z7PUyrNmzbCzdXl1gXLwDU4CP2FOLIuJaDmGEn4fSdePQtmvbx6tiDux60AXF29h0rtLd90K3VqQsbxS2Qct3zIGJPTwWzGrM8mZaclc6PmGEk/cgG7Krfeh0cvxVPN252qXm7Y6LT0CK7DliMlP4Jo7YHT9AypA8C52CRMZjNtHqoOgKOdLQ62NmXcG9AytBVbftkMwOlDp3BydaKST6Ui5W58gGl1WnQ2utznMPkFVuH4Xsu2H94eSetebUoV92hsMtXcnajq7oSNVkOPelXYcjauQJlf/7nMf5oF4GpvuSV4OJWhglAKvft0Y9XK3wDYvz8SNzdXKvt6l1g+KCgQb29Pdu3cD8Dly9EcO3oS822MvNNUDkC9noCaeg3MJoyn96Ot2fjWbwQ0Hn6Yos9YPiyN2ajXotHWaFCm+EevXKOapwtVPV0s516Tmmw5frnE8msPn6dn00AAani7UcPLUlnxcXXEw8me5IzSVx4BtEEPYY6LwZxgufdl796ETfNC9z593r1FsbPP9+wv1fJao0GxtUM15qDmK1taIaEt2W49988eOo2jqxPupTj3b9zjug3pyZ+LfsWYbQQgNfF6mdcB4Gh8KtXcHKjq5mC5FmpXZsv5awXK/HYsmicbVcXV3nKNeziW5mNSlIcKnYEr5CqwE3gG+KKkQtahvB8pitIP6AX8cYvl+mF5gvKN9x+53RX08vUiISYvq3E19ipevl4kJiQVKPf8pOf44fOfMOgL3qgWvLmID1bOZeSMESiKhpGPjyp1bKWSF2pS3m/nmpOuoq31UIEymhpBaDx8MP6zF7teT5Zl00rF29ebuJi8dYiPvYqPnxeJCUUrom9+NBWTycymNVv56qNvcqcPfLYfg0f8B52NjpcHjr3r63g32fl6YIjJ2zZDTBKuwQWb7uz8PDBEW26gqsmMMS0TGw8XHGv5oarQ+Pvp2Hi6kvD7Tq78r+BzIXWujnh2DyHqi79vuS4JKRn4uud9y67s7syRS3HFlo1JSiUmKZWWdaoCcOlqMi4Odoz/8m+iE1NpVbcaYx5ri1ZTtu9/Hr6eXMt3/ifGJeJR2ZPkhOQiZWd8+xa1m9bh4JYD7F6zC4ArZy7Tsnsr9q3bS9s+7fDy8ypV3IT0LHxdHHJfV3ax50hMwV+vuZSUDsAzK3ZgNqu81K4u7Wr6AJBtNDPom21oNQrPtQ6iS22/Mm03QJUqvkRF5WW8omPiqOLnS3zc1WLL9x/wCL/+cuvjWhqKcyXUtLx9rKanoPENLFJOF9QMrX8Q5uQEcrb9hJqejPlaFDatHsF4cD3obNFUrYM5MbbIe28mITUTXzen3NeV3Rw5cqX47Y5JTicmOZ2WtYru4yNXrpJjMlPNo2xN95pKXpgT8937Eq+iC6pXpJxtaF/s+gxA0dmQ/q7lSQ85e7diE9IO189+QbG1Q//dItSMtDLFB6jk60lSvntBUlwilSp7kFLMuT/l2zeo1bQ2kVsOsnfNbgB8A6tQt2V9npw4mBxDDitmLeP8P2fLvB4JGVlUdrHPfV3Z2Y6j8akFylxKsVRQn/05ArOqMqJlTdrVKP0X7ftG+sD9qzJwAO8BrymKoi1F2YPAQ7csBR9hydatVRRlnKIo7sUVyv9jt7EZhX9Bo/SCGtTCv0YVtoftLDLv8WGPsvCtzxjQ4mkWvr2IyR/eneZDABQFh6deRv/93ev/dbtef2UmT3V5lv/2fYVmrRrTZ2CP3Hk/LfuNvm2eYsGsxTw/dlg5ruW9pWi1uLV6iBMjP+XQYzPw6t0K9w4N883XUG/xWKK/XEPWpYSbLKnswg+coVvToNwKmsmkcuhcDOP7tmfFa/8hOjGVP/eeuMVS7sw7w97i+RbPYGNrQ6O2lmzR/yZ+Ss+hvZn313wcnBww5hjvWjyTWeVycgZfPtWWuY+GMDP8MKlZOQCseakrK595mDmPBjNv4zGuJGfctbgl6T/gEX7+cfU9j3OD6cI/6L+eTtaKdzFfPoFt92cAMF8+geniUeyfnIRdrxcwx164p01X4YfP061hQJEvB1dTM3n9h228PbA9Gk3Zm+9LI3v976SNHYJ+5RLs+w0FQFurHpjNpI4cQOqYQdj1GYjGp+wV+LKYO2wmI1sMx8bWhgZtG1nWQ6fF2d2ZN/pOZuXsbxi96C7e+wsxmVUuX9fzRb9g5vRoyDubT5BmyLln8cTt+1dV4FRVPQ/sBQaVovit7gKqdZlfA/WAn7D8DMYeRVGKtK+oqrpEVdXmqqo293Pyz53e75nH+Wrd53y17nMS4xPxqZLXbOLt5821uILp6wYh9anbuA4/7FnBwt8/oVrNqnzy04cA9BzYna1rtgOwefVW6jUtTf3Tun7J11A8fHJfazy8UZPzZb7sHdH4B+A85UNc5i1HW6sejqNnog2oU+oYxRn4bD9WrF/KivVLuZaQiG+VvHWo7OdNQuy1Iu+5at0nmRl6wn7dQIOmRb8tr/t9I516digy/UFiiEsq0LxpV8UDQ1zBbKMhNgk7f0smSdFq0Lk4kpOUhiE2keu7j5OTlIZZn03ShoO4NMrrvF3nwxHoL8QStaTAcyNL5OPuRFxKeu7r+JR0fNyciy0bdvA0PYPzjntld2fq+ntR1csNnVZD50Y1OVFCBqWwnsN68+Gaj/lwzcckJyThle/89/T1JOkm3QByDDnsX7eXFt0t/aOiz0Uzc+ibTHxkPNv/3EZcCRnEwnyc7YlLy+tPGp+WhU++LARAZRcHOgZVxkarwd/dkRqVnLlsrahVtmbvqro70by6JycTStd89d8Xh7Jj91/s2P0XcXEJVK2a98HvX8WXmNji179ho4fQ6XRERh4tVZxbUdOTUVzymusUZ3fU9EKZn6wMMFkqxMZjO9D41MidZdy/lqyVszD89gkoYE4p2xcGH1dH4q7nVXrjr2fi4+pUbNmwwxdym09vSM/KZtSy9bzaI4TG1X2Kfd/NmJOvofHMd+/z9MacXPS+c0NOviZW23ZdyTm8D0wm1NQUjKePoa1Zt1RxQ4f1Yvaa+cxeM5+UhGQ88t0LPHw9SY5PKvG9OYYcDqzbR/PulgEzSbHX2B+2B4Bzh8+gmlVcypiJBPBxsic+La9lJz7dgHeh7gI+zvZ0DPCyXAuuDtRwd+RySukGC91Pqtl83/4eVP+qCpzVbGAyt66gNcPykxcA+kL94TyA3CtcVdUYVVWXqqr6OGAESj0k57dv/uD57iN4vvsItofvpMeA7gDUD65HRmpGkebTP75dzRMh/+E/rQfzat8xXDkflTtQITE+kaZtmgAQ3L4ZURdKn+kzXTiF1scfxcsXtDpsWnYi59CuvAL6DNJG9ydt4hDSJg7BdO4EmZ++geli0VGiZfHTst8YHDqcwaHD2bJ2O70H9gSgYXB90tPSizSfarVa3DwsfV60Oi0dQtty7tQFAKoFVs0t175bGy5fiOJBlnboLA41/bCv7oNio8OnbzuuhUcUKHMtPALfJy0d5L0fbU3yDsuHdtLmwzjVq47GwRZFq8G9bX0yrIMfAqc8hc7FkbOvLyv1ujSoXpnLV1OITrxOjtFE+MHTdGxUtBntQnwSqXoDTQJ9895bw4c0vYEkayVo35koavoW7btZnLBv1zCh91gm9B7LvnV76dS/MwB1mtUlMy2zSPOpvaN9br84jVZDSJfmRJ+zbLebteO2oigMHPUk4SvCSrftfu5cTs4gOiWTHJOZ8BMxdAzyLVCmc21fIi5bzsXkTAOXktOp6u5IalY22UZT7vTIqGRqepaur+QXS76jfZtHaN/mEf5evZ6nB/UDoEWLpqSmppXYfDpg4GP8/NPdy76Z4y+huPuguHqCRouuTgtM5/8pWMgxrzKgrdkE840BDooC9pbKluLlj8bTH/Ol42WK36CqF5cTU4lOSrOce4fP07F+tSLlLiSkkKrPpkm+SlqO0cT47zbxSHAQoY0CyhT3BtO5k2h8/dF4W+59tm26kHNgV4EyGt+8L926Zq0xxVnureZr8egaNLPMsLNHF1QPU+GBXyVY/+1apvUez7Te44lYt5cO1nM/qFkd9GmZRZpP7Rztc/vFabQamnYJIcZ67kes20f9NpZsnG9gFXQ2OtKSCjZ9lkaDyi5cvp5JdKreci2ciadTYMGuCJ1rehMRbVm3ZH02l1Iy8Xd1KG5xopz9m/rAAaCq6knrb409iuUHZgtQLMPnRmHp23bjE2ArMARYqiiKA/AkMMlaviewUVXVHEVRfAFP4LbaSPds3EubLq1YtfM7DPos5oyflzvvq3Wf83z34kdk3vD+xPmMnvkKWp2W7Kxs5k2aX/rgZjP6FQtwmjDX8hiR7WGYYy5h1/cZTBdPY4zcfdO3u8xbDvaOKDobbJq1I+PDyUVHsN7Czo27ade1Nb/v/p4sfRZvj5uTO2/F+qUMDrU0Gyxc9SE6nQ6NVsO+7RH8ttzyYfbk8Cdo2aE5xhwjadfTeGv0rDLFv5mJb85l/6F/SElJpWvfIYx8fij9H+1x6zfehGoyc2bqVzT+frrlMSKrNpN5KoqASf8h7fA5EsMjiFu5iYcWjqLVngXkpKRzfMRHABivZxC1+C9CwuYCKokbDpG04SB2fh7UGNefjNNRNN/wPgDRS9cSu2LTTddFp9UwZUBHXl70J2azmcdb1yfIz5NFf++hfnUfOlmze2EHztAzuHaBUaZajYZxfdsz4n+/oapQr5o3/duWrSM7wIFNEQR3DmHRts+tjxH5NHfeh2s+ZkLvsdg52jP1y9fR2dqg0Sgc3X2E8OWWR2a0f+xheg3rDcCesN1s+nFDqeLqNBqmdGvIyz/twayqPN6oGkFeLizafpL6vu50qu1L20Bvdl+8yhNfbUajKIzrVB93B1sio5N4N/wfNIqCWVUZ3jqowOjV0goP30z3Hp04fGQzmfosRo6YlDtvx+6/Cow+7fdEbwY8MbzA+4ODG7Pi+89wd3ejV6+uTJt8M71kAAAgAElEQVQ+hlYtepYuuGome8sP2PUdbXmMyPFdqEmx2LR+FHP8JUwX/sGmaRfLwAazGTUrg+z11n6nGi32AyzNdWq2HkP412VuQtVpNUx5rDUvL12H2azyePPaBFWuxKJ1B6lf1YtO9S2DY8IOX6Bnk8AC5966Ixc5eCGOlEwDfx6w9PmaObA9D5Vi4E4usxn9sk9xmvo+aDRkb1mLOeoi9gOew3jhFMYDu7Dr3g9doxAwGjFnpJH52VwADOt+x/GlybjM+xqA7K1hmC+X/ffHIzcdoGnnED7a9hkGvYHPX8sbCzd7zXym9R6PnaMdE76cio2tDYpGw/HdR9iw3PK4ly0/bmTEvFd5b90nGHNy+GzCpyWFuimdRsPkh+sy8o9DmFV4vL4ftTydWbT3HPV9XOkU6E3b6h7svpzIEyt2o1UUxrYNwt2h7IOW7jnpA4dyN0fy3W+FHiPyl6qqDa3Tm2AZaTq8mMeIOGJ5jMjUfI8R8cfyqJCqWDJ336qq+qF13nygD3Aj7zxPVdXlN1uvh/27lttOXd393vQPKa2uYYZbF7qHdh/55taF7qGdDYo+GuB+avXtnT3u4k4NfnFducZf8cadNfnficqjfy232ABxs7uXa3ylekC5xjf8GH7rQvfQyF3Fdo++b7587d72zbsVx1GL7uuHT8asYfftc9Zp+rfl+8Faggqdgbvx7DZVVS+Sr1lTVdXD5GseVlX12VssJxp4pIR5d/XHZ4UQQghxh+Q5cP/KPnBCCCGEEP9qFToDJ4QQQoj/h6QPnGTghBBCCCEqGsnACSGEEKJieYCfz3a/SAZOCCGEEKKCkQqcEEIIIUQFI02oQgghhKhYZBCDZOCEEEIIISoaycAJIYQQomKRB/lKBk4IIYQQoqKRDJwQQgghKhbpAycZOCGEEEKIikYycEIIIYSoUFR5kC+Kqkoa8m47Ubt3ue3UAxke5RUaAC3lez75mbLLNX67Y++Va/z9jSaWa/zypqpKucU+YmNfbrEBfHPK9wPNoJTfvgdI0JVv/PrZOeUaP1ZrU67xh8Qsv68HIH1q//v2YeM855fyPblKIBk4IYQQQlQs0gdO+sAJIYQQQlQ0koETQgghRMUiGTjJwAkhhBBCVDSSgRNCCCFExSK/xCAZOCGEEEKIikYycEIIIYSoWKQPnGTghBBCCCEqGqnACSGEEEJUMNKEKoQQQogKRZUmVMnACSGEEEJUNJKBE0IIIUTFIhk4ycAJIYQQQlQ0koETQgghRMVilgf5SgZOCCGEEKKCkQzcfeTUIYTKr49A0WpI+TGcxCU/FZjv0KIhvtNfxK5uINHj5pIWtjN3ns+k4Th3agEahYydh4h/5/NSx23+zlD8uzTFqDewe9wSko5cLFLGo1EAbT4egc7eluhNkUTM+A6AxhOeIGhQJ7KS0gCInPMjMZsOA+Berxqt3huOjYsDqlllbe83wJBdZNnB7wyjSpcmmPTZ7Bn3OcnFxK/UKIDWH7+E1t6GmE2HOTjj2wLzHxrRm2ZvDuaXhiPITkrHv0cIjScOQFVVzEYTB9/8jmv7Thfdrs5NCXr3ORSthtgVG7m84PcC8xVbHfUWjsKlcU1yktM4/uJHZF25CoBT/erUmTcCnbMDqqpysMcU0Cg0+GICDgGVUU1mEtcf4Py7K259EG7h9dnz2bZzHx6V3Pl9+eI7Xt4N7p2bEjhzOGg1JKzcSPTC3wrMV2x11P50NE6Na2JMTuP0iPkYoq6i2Oio9f4InJrUArPKhRlLSd19DIDqUwbhPaAjOncn9gYNeSBj34hf853nQKshfsVGohcWPfZ1Foyyxk/n1Ij5GK5cRdFpCZr/Mk6NAlG0WhJ+2kr0Asu6a10dCZr/Mo51q4OqcnbcItIOFD3vbmj39lCqW6+9zeOXcO3oxSJlvBoF0Hm+5dq7vCmSnW9arj3PetXpMOc5bJzsSbtylY2jPyMnXY/GRsvDc5/Hu3EgqtnMrjeXE7PnRO7yGr07jMpdm2LSZ3NwzGKuF3O9uTUOJPiTEWjtbYnfGMmR1y3Xm427Ey0+H41jNW8yr1xl/4ufknM9g6CRj1DtibaW/abT4lLbnzUNRpCTkkHNF3oSMKQzqqJwfsVmTn8Rlhun2TvD8Otqufb3jS3h2m8cQEvrtR+78TCHrNd+w0kD8O8RgmpWMSSmsnfMYrLiUwDwblOPZjOHorHRYkhKY/MT75Z4DG54+O2h1LAeiw3jl3C1mGPRetJAHurfHjs3Jz5/6IXc6U3/24sGT3XCbDKhT0xj42tLSItOvGk8j85NqPPusyhaDTErNnFpwR8F5iu2OhosfCX33nP0xU9y7z0Adv6etN4+nwvzfuLyZ38BUO2/vagypCsAMSs2cWXJmpuuw7249ztV9eLRre+Tej4WgGsHzrJvytc3XY97QvrA/fsycIqi+CqK8r2iKOcURTmgKMoaRVHqKIpytFC5txRFeS3fa52iKFcVRZlbqNwjiqIcUhTlsKIoxxVFGXFbK6bR4PvWSK688Abner2E6yMdsQ2qVqCIMSaBmMnzub56S4HpDs3q4RBcn/OPvML53iOxb1QHx5aNShW2SpcmuAT68ke7Ceyd9BUt5zxbbLmWc59j78Qv+aPdBFwCfanSuXHuvBNfhLEmdDprQqfnVt4UrYZ2C15m75Sv+avzFNYPmIWaYyyyXD9r/L/aTWDfpK9oPue5YuO3mDucfRO/5C9rfL/OTXLnOVbxwLdjIzKiruVOi99+lLXdphIWOo1945fQ6oP/Fl2oRkPtuc/zz6BZ7OswDp9+7XCsU7Xg+g3qgjElnb2tRxH1+V/UnDEkd/vq/W80pycuYX/H8UT2exNzjgmAK5/9yb72Y4noNgnXFnXx6NK02G0qi769Q1k8/9YfQmWi0VBz9n85PngWkR3H4tW3PQ6Ftr/y010xXk/nUNtXiVnyFzVeH2qZPrgbAIe7jOf4f94m4K1nQFEASFq3n396T35wY9+IP+cFjg2axaGHx+Hdr5j4g7piTMngYJtRxHz+FwGvW46956NtUGxtiOw8gcM9JuE7LBS7at4A1Hx3OCmbIjnUYQyRXV8j80xUiatQvXMT3AJ9WdVhAlsnf0WH2c8WW+7h2c+xddKXrOowAbdAX6p1slx7Hee9wN65P/BT6FQuhEfQ9KU+ANQb1BmAn0Kn8teg92gzY1Du/qnctSnONX3Z0GY8ka99SZP3hhcbs+l7w4mc8CUb2ozHuaYvPl0s11udUY9xdftRNrQdz9XtR6k96lEAzi76i83dprG52zSOz/qBa7tPkJOSgctDVQkY0pmtvWYQ3nUqft2a4RxQGbBe+zV9WdN2AhETvyJkbvHXfsjc4US89iVr2k7ApaYvvtZ1Obnob8K7TmVd6DRi1h+iwfgnALBxdSRk7nPsePZDwjpNZtd/Py3xGNxQo3MT3AN9+a7DBDZN/opOJRyLC+sP8uOjbxaZfvXoRX7oM4NV3adxds0+2k1/+uYBNQp15w4nctAc9nQYT+V+7XCq41+gSJVBXchJyWB36zFc+XwNQTMGFZhf5+1hJG6MzH3t9FA1qgzpyv6e09jXZRJeocE4WPd1ce7VvR8g/VJ87vRyqbwJ4F9WgVMURQF+A7aoqlpLVdUQYCpQ8lmeJxQ4DQy0LgdFUWyAJcCjqqo2AZoBW25n3Rwa1yH7Ugw5V+Igx0jq39tw6dqmQJmc6AQMpy4W/ZFeVUWxs0Gx0aHY2qDodBgTU0oVt1qPEC78vAOAawfPYevmhIOPe8F183HHxsWBawfPAXDh5x1U69n8psv169iIlBNXSDl+GYDs5PRin8tTtUcIF3/eDkDiwbPYujliXyi+vTV+4sGzAFz8eTtVe4bkzm/21lAi312FquYt35hpyP2/1tGuwLwbXIOD0F+II+tSAmqOkYTfd+JVaLu8erYg7setAFxdvYdK7RsCUKlTEzKOXyLj+CVLvOR0MJsx67NJ2WnJBqk5RtKPXMCuiudN91VpNG/aCDdXlzteTn7OzYLQX4zDcDkeNcfItT924NGjRYEylXq2JOHHLQAk/rUbtw6WLwYOdapyfaflO09OYirG6xk4N6kFQPrBM+Qk3Pz8K8/YAC7Ngsi6EIfhsuXYX/19Z5H4Hj1a5Ma/9tdu3NpbvxSpKlpHO9Bq0NjbomYbMaXp0bo44tq6HvErN1qK5RgxpWaWuA4B3UM4/Yvl2ks4dA47VyccC537jj7u2Dg7kHDIcu2d/mUHgT0s56hboC+xe04CELXtKIG9LOtfqbY/0dZzMCsxFUNqJj5NAgHw7RHC5R8t11vywbPYuDpiVyimnY87OmcHkq3X2+Uft+NnvS7yvz//9Pz8+7Uh6rddlv1c25/kg2cx6bNRTWau7jlB1d6W9fTvGcLFn/KufRvXUlz7P+Vd+8Z0fW45naMdWK/xGv3aErVmP5nWDJghMbXY/Z9fze4hnLAei/gSjsWNeZnFnF/Ru09gzLK0LsQdPIuTr8dN41nuPfHWe4+J+N934dWz4Pnn3bM5sdZ7T0K+ew+AV6/m6C8nkHHqSu40p9r+pB48g9m6r5N3Hce7T6sS1+Fe3fsfGGb1/v09oP5VFTigM5CjqmpuG5SqqoeBKyW/JdfTwCfAZeBGzcoFSzNzonVZBlVVT93Oiul8PTHG5mWQcuKuoatcug9+feRJMvf8Q+1dy6m9azkZ2w+Qfa40mwQOvpXIiMlL9WfEJOHgW6lImczYpBLL1H0ulD4bZtN6/n+xdXMEwLWmL6qq0mXlJHqHv0v9kX1KiO9RIH5mTBKOheI7FoqfGZOEg/UG6d8jBH1cUm5FMb+qPZvTZ9s8On47kb3jlxSZb+frgSFfbENMEna+Bfe5nZ8HhmjLcVFNZoxpmdh4uOBYyw9VhcbfTydk/XtUe+WxIsvXuTri2T2E5O1Hit328mbn60F2dN45lx2bhG3h7ff1IDvGWsZkxpSaic7Dhczjl6jUvTloNdhV88G5cS1s/b0qRGwAW798ywayYxOx8/MoUsaQL74xzRI/8a89mDINtPznC5ofWEz0Z39iTEnHvroPOYmpBH3yCk3WzyPow5fQONqVuA5OvpVIz3f+pccm4VTo3HfyrURGvnM/f5nk01EE9LBUZmo90grnKpb1Tzx+mYDQYBStBpdq3ng3CsDJz7JvHfwqoY/JW15WbBIOfoWud79K6GOLL2Pv7YbBWoExJKRg7+1W4L1aB1sqd25CzN/7AEg9eQXPVg9hU8kZrYMtfl2a4mhdTwdfDzLzbb++hHXJzLe+mbF51z5AoykDeTTiU2o80Zaj834GwKWWL7ZuTnT+ZTqh4e8SMLA9t1LcsXAudCxKq8FTHbm05fBNy9j7epBV4N6TiF2heJZ7j6VM/nuP1tGOgFcf58IHPxcon37yCu6tHkJXyRmNgy1e3Zph71/yZ8i9uvcDOFf3pve6dwn9ZTreLevedF+Ie+ffVoFrCBwoYV4tRVEib/wBL92YoSiKPdANWA2swlKZQ1XVJOBP4JKiKKsURRmsKEqx+0xRlBcVRYlQFCXix+tFKxt3wqa6H3ZB1TjTYRhn2g/FsU0THJo3uKsxSnL6mw380WY8f4dORx+fQvCbgwFLPxiflnXY+eoiwvvOpFrP5vi2v7vrpHWwpf6oxzgy7+di50eFRfD3wxPZPvwjGk8aeFdjK1otbq0e4sTITzn02Ay8erfCvUPDfPM11Fs8lugv15B1KeGuxn4QxK/aSHZsIk3C3idw5nOkRZwC0/0Z9VWescGSPcRkZn+TFznQciT+Lz2KXXUfFJ0W50Y1iVu2jsOhEzFlGqj6ar97th5bXvuCBsO60f/vd7Bxssds7aJw8oetZMQl0f/vd2j71hDiD5xBvUcj8gontn27B5O0/zQ5KRkApJ+J4czC1bT7fioPr5xMyrFLd3Vdjsz9idXNR3Pp110EPdcdsFybHo0D2TbkA7Y+PZf6Y/vhXNP3rsW8mbr92uHTuCYHF/99z2IEThzI5c//xpSvlQEg80w0Fxf+SbMfptN01TTSjl5EvYfXRUn3fn1CCr+2GMua7q9z4K0VtF80Ehtnh3u2HiVRVfW+/T2o/j8NYjinqmpuZyVFUd7KN+8RYLOqqnpFUX4BZiiKMlZVVZOqqi8oitIISwXvNSxNrc8WXriqqkuwNLdyonbvIkfcGJeIzi8vi2Dj64Ux/uadYG9w6d4WfeQp1MwsADK2ReDQrB76iGPFlq/zbDeCBlv6ySRGnsepiic3usY6VfFAH5dcoLw+LhnHfNmJ/GWyruU1T5xdsZnO304ALN+U4/ecwpCUDkDMpsN4NArg6o6j1H42lFqF4t/IhThW8SCzUPzMQvEdq3igj0vCuUZlnKt703PDHMt0Pw96hs9iXe83yLp6Pbf81b0nca7ug62HM1zN+zZpiEsq0LxpV8UDQ1zBfW6ITcLO3wtDbBKKVoPOxZGcpDQMsYlc332cHGsH3qQNB3FpVJOU7ZamvTofjkB/IZaoW3QiLk+GuKQCmStbPw+yC29/XBK2VbzIjk0CrQatqyNG6zZffHNZbrmGf85Cfz6mQsQGa8avSv74nhjyZRpulLHLF1/nYonvPbEDyZsPoRpN5FxLJXX/KZyb1iJ19wkMsYmkHzoDQOJfe/Af1bfAMhs80416T1vO/auHz+Oc7/xz9vMgo9C5nxGXjFO+cz9/mZRzsfw9+D3A0pxao6vl9qWazOx6O2/gzKAdH9Jqyn/QjO1HcuR5HKrkLc/ezwN9bKHrPTYZB7/iy2RdvY6djzuGhBTLv9euF3iv/+N5zac3XFq1hUurtmBQFB5eNRm3Ov54t6lP0uHzOObbfocS1sUx3/o6+lmu/cIu/bqTh5dP5NgHv5AZm4QhOR2T3oBJb+DqnpO4168Ol+MLvKfRM91oYD0WCcUci/RCx+JWqrVvQPNRj/HrwFmYs4v2980vKy4J+wL3Hk8MheJZ7j2eRe49bsFB+DzSiqAZg9G5OYFZxWzIIWppOLErNxO7cjMAtaY9RVZMwX11P+795mwj2dmW+37SkYukX0zA5T5VoEVB/7YM3DEg5Jalinoa6KYoykUsGTxPoMuNmaqqHlFV9SMslbf+t7Ni+iOnsQ2ogk3VymCjw7XPw6Rt3FOq9+bEXMWxRUPQakCnxbFFI7LPlZzlO71sQ24H06iwAwQOsDQxeAXXIjs1E32hPh76hBRy0vR4BVv6GQUOaM+VcEsiM3+fiWq9mpNyytJpO3bLP1SqVw2tgy2KVoNPm4e4fjoagDPL1hMWOo2w0GlEh0UQMKADAJ7BQeSk6skqFD/LGt8zOAiAgAEdiAo/wPWTV/it8UhWtxrL6lZjyYxNIqzHdLKuXs/tKA2WEawaWx3Z1srkDWmHzuJQ0w/76j4oNjp8+rbjWnhEgTLXwiPwfbIjAN6PtiZ5h6WClrT5ME71qqOxbp972/pknLZse+CUp9C5OHL29WUlHoMHQXrkWRwC/bCrZtl+r8fbk1Ro+5PD9+PzZCcAPB9pw3Xr9mscbNE4WJoH3R5ujGoyoz9dcof9Byk2QFqk5djbWY+9d992JK3bX6BM0rqI3Phej7TJ7XdniL6Gm7U/ksbRDpeQ2ujPxJBzNQVDdCIOtapY1q1DoyLrdeybDfzcczo/95zOhfAD1OlvufZ8mtUiOy2zSP+qzIQUctL1+DSzXHt1+rfn4jrLtWfv6WoppCgEj36cY8stfe909rborPunaoeGpMcl80PnSWzuNo3YsAiqP2m53ioFB2FM0+c2id5gSEjBmK6nkvV6q/5kB+Ks13vcuoO5788/HUDn4oBXm3rEhhds5LD1sqyno78nTlW9COs8hXWh04heG0HAwHzXfloprv2BHYgOsyzfOTDvGvfvEULqWcuox+jwA3i3rIOi1aB1sMUzuBZpZ4pW8I98s4Hve07n+57TOR9+gHrWY1G5hGNxM14NatB57nD+Gj4ffSn63KUdOodjTV/sq3uj2Gip3LdtsfceP+u9x+fR1iTvsHwhP/D4W+xqMYpdLUZxZckaLn7yG1FLwwGwse5rO39PvHu3JP7XHQWWeT/u/XYeLigay6AZ5+reuARWJv1yObRCSB+4f10GbhMwW1GUF60ZMRRFaQy4lfQGRVFcgQ5ANVVVDdZpzwFPK4qyG2iuquoWa/GmwKXbWjOTmbi3P6Pa0nctjxH5eR3ZZy/jNWYIWUfOkL5pL/aNalN10Qy0rs44d26F9+ghnO/9MmlhO3Bq05iafy8CFdK3HSB9075ShY3eGEmVrk14fNeHGPXZ7B6X11es9/pZrAmdDsC+qcto+/GLaO1tidl8OHfEUbPXn6JSgxqgqmREXWPvpKUAZF/P5MTna+m1ZiaoKtGbDhO9MRJtofgxGyPx69qUR3bNx6TPZu+4vMef9Fw/m7DQaQBETP2aVh9bHmsQu/kwsZtu3sekWp8WBA7ogNlowqTPZufLC4qUUU1mzkz9isbfT7c8RmTVZjJPRREw6T+kHT5HYngEcSs38dDCUbTas4CclHSOj/gIAOP1DKIW/0VI2FxAJXHDIZI2HMTOz4Ma4/qTcTqK5hvet+zjpWuJXbGpVMejJBPfnMv+Q/+QkpJK175DGPn8UPo/2uOOlonJzPlpX1J/1QwUrYb47zehP32FahOfIv3wWZLXRRC/aiO1F4ym2a6FGFPSOf2SZfttPN2ov2oGqqqSHZvE2VF5I/1qvD4Ur34d0DjYEXJgCQkrN3Dlwx8fnNj54jdY9brlMSarNqE/FUX1Sf8hPfIcSesiiF+5kToLRxO8ewHGlHROWY997NIwan/yCs22fgQKJHy/mcwTlsv+wvSvqLNoDIqNjqxL8ZwZ+78Sd//lTZFU79KEp3dYrr0tE/KuvQFhs/i5p+Xa2z59GZ3nW669K5sPc3mz5dyv/XgbGjxjGZF7YW0Ep37YBoCDlyt9lk9GNZvJiEtm05jPcpcbvyGSyl2bErrnI4x6A4fG5l1vnTfMZnM3y/V2eMpSgj95yfIYkU2HibeOdjy94E9aLhlNjUGdyYy6xv4XP8l9f5XeLUjYeqRI017LL8di6+GMOcfEganLyLEO7Ii1Xvt9ds/HqM9mX75rv/v62ayzXvsH8l/7m/Ku/cbTn8K1lh+q2XLvOTDZcu9JOxND7OZ/6LFpLpjNnF+5heunokCnlHgsLm6KpEaXJgzb8SE5+mw25jsWT4XN4nvrsWg77Snq9m2LjYMtz+37lGOrtrDvo19pP/1pbBzt6bV4tGUdYhL5e/j8EuOpJjOnpi6l2ffTQKshdtUWMk5FUXPSQFIPn+da+AFiVm6m/sJXabPnE3JS0jk64pMSl3dD46/GY1PJBbPRxKmpSzHeZBDNvbr3+7R+iCYT+2M2msCssnfK12Rbm9TF/aU8yO27t0NRlCrAx1gycVnARWAs8Juqqg3zlXsLSAeuAr1UVX0q3zwP4BQQhKVPXC1AD2QAY1RVLfhVqpDimlDvlwMZNx8dda9pKd/zyc9U9Dl091O7Y++Va/z9jSaWa/zypqolf4jfa0ds7MstNoBvTvk+md6glN++B0i4SQXufqifnVOu8WO1NuUaf0jM8vt6AFKfD71vHzauX60v35OrBP+2DByqqsYATxYzq2Ghcm/le/lNoXlJgLf1Ze+7uX5CCCGEEHfq39YHTgghhBDiX08qcEIIIYSoUFSzet/+SkNRlJ6KopxSFOWsoihTblKuv6IoqqIod/zEZKnACSGEEELcJkVRtMD/gF5AfSyDIOsXU84FGAPsvRtxpQInhBBCiIrlwXqMSEvgrKqq51VVzQa+Bx4vptw7wHtYBljeManACSGEEEKUIP8vLVn/XixUxJ+CP9kZZZ2WfxnBWB5Xdtd+xuNfNwpVCCGEEP9y9/GpOfl/ael2WH+Ccz7F/IrTnZAMnBBCCCHE7YsGquV7XdU67QYXLI8y22L9xafWwJ93OpBBMnBCCCGEqFBKOzr0PtkP1FYUJRBLxe0pYNCNmaqqXgdyf5xZUZQtwGu3+lGAW5EMnBBCCCHEbVJV1Qi8CoQDJ4AfVVU9pijKTEVRHrtXcSUDJ4QQQoiK5cHKwKGq6hpgTaFpb5RQttPdiCkZOCGEEEKICkYycEIIIYSoWO7jKNQHlWTghBBCCCEqGMnA3QMTDOUX+/s+CeUXHOj2dzluPLD124HlGn9/o4nlGr/FkXnlGv/V5pPLNf7Hn7Yqt9gdB3xUbrEBUj/qV67xFReXco1/eXZkucZ/XWNbrvG/GedervHvtwdsFGq5kAycEEIIIUQFIxk4IYQQQlQs0gdOMnBCCCGEEBWNVOCEEEIIISoYaUIVQgghRIUigxgkAyeEEEIIUeFIBk4IIYQQFYsMYpAMnBBCCCFERSMZOCGEEEJUKKpk4CQDJ4QQQghR0UgGTgghhBAVi2TgJAMnhBBCCFHRSAZOCCGEEBWK9IGTDJwQQgghRIUjGTghhBBCVCySgZMK3P024u0RtOjcAoPewPwJ8zl39FyJZd/46g18q/syMnQkAEMnDKV199aYzWauJ15n/oT5JMUnlTq2tkFz7J96GUWjIXt7GNlhPxRbThfcHseX3yD93VcwXzqDtl4w9v2fB60OTEayfv4C08nIsm241YR3RtO2Syuy9AZmjpvDqSNnipT57OeP8arsiSHLAMCop14jOTGFQS8+yWOD+mAymkhJTOGd8e8RFx1f6tg7j1/i/V+3YTar9GtTn+GhzQvMn/frdvafiQIgK9tIUnomO94bAUBsUhpvr9pIfEo6CrDgpcfw93S9ZUz3zk0JnDkctBoSVm4keuFvBeYrtjpq/x979x0eRbk2cPg3u5teSU8IJXRCS+hNSehEaaKgSO8IKFWkCYciAoIKSFHkUETEghzE0KRIi0DoPfSS3uum7O58f2zYsCSBTSgxH+99XbmSmXlmnpndmQd/5YgAACAASURBVNl33rJZ+iE2dSuhSUwlbPgSsh7EIpmpqLxwODb1KoNO5vaMtaSEXAKg/Ce9cX27FSpHG45X6WPy8T/J9M+WcOjoCZzKOLLth1XPZZtP02vmQGoH1idbncW6id9w/9LtfDEfrp+GvZsjSqWS6yevsHnG98i64t25j169z8LtIfr3v3F1BrX2M1q+aHsIJ29EAJCZoyEhLZMjc/oTkZjK+PV70elkNDod77WoxTvNfIuc/8sls+nUsTUZajWDB4/jzNmLRsttbW04eCDv/PAu68mmH7cyYeJMFi+aRauA5gBYW1vh5uqMi5vp+3D0ThyLDl1DJ8t0q1WWQQ198sXsCYti1fFbSBJUc7Fjfsc6AIzadprzUcn4ezmytIt/kY8b4OjNKBbuOY9OlunuV5FBzavni9l9+QGrD18BoJq7A593a8zJO7Es2nveEHMnPpXPuzemdXWvIuW3btkA92kjQKEg+dddJHz3i9Fyq4a1cZsyHIvqPkRM+Jy03UcMy1wmDMK2VSMA4lduJnXnoSLlfmjgrKHUD2xAljqLbyZ+ze2Lt/LFTFs/E0e3MihVSq6cuMz3M1aj0+mo6OvD0HkjMbcwQ6vVsWb6Km6cy3/vLIyiQi3MW/UEhQLNxSNoQncbLVf6NsO8ZQ/k9CQAcs4eQHvpKABmLd9CWbG2fv6JYLRhocU6fuH5eyUKcJIkycASWZYn5E5PBGxlWZ6VOz0MGJ8bngKMl2X5iCRJ44HasiwPyo17H+gty/IbxdmPhoENKVuxLENeH0J1/+qMnjeacV3HFRjbvGNzMtMzjeb9uvpXNi7eCECXgV3o/VFvlk9dblpySYFV79Gkf/kJcmIcNtOWoTkXgi7ynnGchRXmbbqjuXXFMEtOSyZj2Qzk5AQUXhWxHvsZaR/3Nv3AHx5T6yaU8/GmR4v3qV3fl8nzxzPozZEFxn46ai5Xzl8zmnft4nX6dxpGljqLHv26MmbGCKaN+I9JubU6HfN/OciqUd1wd7Tl/S+20Kp2JSp7OhliJr31muHvzX+f4+qDWMP09B/2MqR9Q5rVKE9GVjaSJD09qUJBpc+GcqnXbLIj46m7cwEJe06iDntgCHF/rw2a5DTONB+Nc9cWVJjel7ARS3B/vy0A51qPx8zZnpo/Tud8x8kgyyTsOUnk2mDqHzPxvTdBt6B29O7Rhalzvnhu23yS2gH+uPl4MiNgDD7+VXl/3lA+7zY1X9y3o5aQmaYGYPjKCTR4oymhfxwrcj6tTsf834+yalgQ7g42vL90G61qVaCyexlDzKQuzQx/bz5ykasR8QC42lmzYXRXzFVKMrJy6LH4V1r5VsDNwcbk/J06tqZqFR9q+LakSeP6fLN8Ps1bdjaKSUtLp2Gj9obp4//sZNu2YAAmTJplmD/qg4H4+dUuwrHLfH7wKiu718fd1pL3txynlY8rlZ1tDTF3k9JZG3qHde80wt7SjISMbMOyfg0qkJmj47eLDwravEn55+86x6reLXG3t+L9tQdoVdWTyq55D0B3E9JYe+wa6/q1wt7KnITce1+jiq78PLQNAMnqbDqv2E2zSm5F2wGFAvdPR/Fg0FRyouOo8MvXpO0/TvbNvHtfTmQMUVMWU2ZQD6NVbVo1wtK3Mne6j0IyN6PchoWkHwpFl55RpF3wD2yAp48nY1qNoKp/NYbOHcnUbpPyxS0ZtRB17vk+YdVkmr7RgmN/HKbPlP788vVPnD14Gv/ABvSZ0p9Z7043LbkkYR74Hllbv0JOS8TyvSlob51HTog0CtOEhZJz8CejeYqKtVG4liNz01xQqrB4ewLaOxch2/izqSSIPnCvTh+4LOAtSZJcHl8gSdKbwHCgpSzLNYARwI+SJHkAS4H6kiS1kCTJEZgLjCnuTjRt35R9v+0D4NqZa9jY21DGrUy+OEtrS7oP7c7mZZuN5j+8sB/GyLLp/8xX6VMdXWwEclwUaDXknPwblV/zfHEW3frra+Zy8m7guvs3kZP1NX26iDtI5uagMjM590Ovd2hJ8K/6J7+Lpy9j52CLs5vTU9bKc+rYGbLU+lq5C6cv4+bpavK6F+9GU87VEW8XB8xUSjrUr8bBC/mfgB/aeSqMjg2qAXAzMgGtTkezGuUBsLYwx8r86cdv618F9Z0osu5FI+doiPvfEZw6NDKKKdOxMTE/HwQgfkcIDq/paz2sqnmTfFRfQ5MTn4ImOR3bepUBSDt9nZyYJJOP3RQN/ergYG/3XLf5JPXaN+KfrX8DcPvMdazsbLB3dcwX97DwplApUZmpoJj/v/rivVjKudjj7Wyvf//9KnPw0t1C43eevUlHP/3rbaZSYq5SApCt0Rbpunuoc+cObNz0KwDHT5zGwdEBD4/CCyJVq1bCzdWFw0eO51v2bq9ubNmyzeTcF6OTKedojbeDNWZKBR2qenDwVqxRzO8Xw+lZ1xt7S/157WRtbljWpJwzNuZKk/Plyx+RQDknG7zL2Ojz+3pzMMy48LD1zG16NaiEvZU+r5ONZb7t7L0STovKHliZFa3ewbJuNXLuRZDzIApyNKQG/41tm6ZGMZrwGLLC7sBj76155fKoQy+CVoesziLr2m1sXmtQpPwAjdo15u/fDgBw/UwYNvY2OBZw7394j1caznf9/sgyWNtaA2BtZ01ijOktLwoPH+TkGOSUONBp0YSFoqxcz7R1nb3Qhl/Xl5Y02chxD1BWqGVybuHFelUKcBrgW6Cg6q7JwCRZluMAZFk+DawHRsmyrAE+AL4BFgJrZVku/FP/KVw8XIiNzLtxxkXF4eKRr0xJ34l92frtVkNh5VH9JvVj/T/rCegWYKiNM4Xk6IIuIS+3nBiLwtHZKEZRvgqKMq5oLpwodDuq+q+hvXsDNDkm537IzcOF6IgYw3RMRCxuHgUXwmZ8+Qk/7F3DoLH9Clze5b0gQvbn/3ArTExSOh6OeTUO7o62xCSnFRgbkZBCREIKjat5A3A3NhE7KwvGr/mTXgs2s2TbEbQmNONZeDiRHR5nmM6OTMDcwzl/TERujFaHNiUDlZMdGZfvUqZ9Q1AqsCjnhm3dypiXzX+ulFaO7k4k5NZwASRFxVPGo+DC/IcbpvHFqTVkpmdyKvifYuWLSXns/XewISY5vcDYiMRUIhJSaVwlr5kuKimNdxb/Rsd5PzIgoF6Rat8Aynp58OB+hGE6/EEkZb08Co3v1bMLv/yyPd/88uXLUrFiOfYfOGpy7pi0LNxtLQzT7rYWxKYb31vuJmVwLymDAb+coN+WExy9E/f4ZootJjUTDzurvPz2VsSkqo1i7iakcTchjf7rD9L3vwc4ejMq33Z2X35Ap1reRc6vcnch55H7riYqDpW78xPWyPOwwCZZWqB0tMe6SV1URXhwfMjJw5n4iLzXND4qDqdC9mHahlmsOb2BzHQ1/wTra5vXzV5D36kDWBnyPf2mDWTTgiLc+20ckVMTDdNyaiKSTf6HJVXV+li+PwPzN4Yh2eoLl7rY+ygr1tI/sFvaoChXHckuf8GzJMi6l/fzb/WqFOBAXwh7X5Ikh8fm1wJOPTYvNHc+siwfA64AbdEX4gokSdIwSZJCJUkKvZd2r7Cwp6rkWwnPCp6E7A4pcPmGRRvo37Q/B7cdpPOAzgXGFIskYdlzOJm/fFtoiMKrApY9BqP+4evnl7cAn46eS+82AxnWbQx+TeoS9HYHo+Ud32pHzbrV2bjyp0K28Gx2n7pOW78qKBX6y0OrlTlzM4Lx3VqyaWIvwuNT2H78ylO28myiN+8jOzKeersW4jN7IKmh10D7L76TvEBL+83j48bDUJmrqNHc9KbD4tp99iZt6/oY3n8AD0dbfpnQg+2Te/HHqevEpxatCa2oevbsyk8F1LL16tmV37b+ia6Y/QALo9XJ3EvK4Lu3GjK/Yx3m7L9MalbRH9KeKX9CGmv6vM7n3Rsz+88zpGTmtQLEpqq5EZtMs0ruL22fADKOnibt71DKb16M5+LJZJ69+sKvw3n9ZjGs0QBU5mbUbq6vkW/fpxPr5nzPyGaDWTf7e0YuLHZDUIG0t86jXjuVzE1z0N27gnmHAQDo7l1Be/silr0mY9FpCLrIW/lqKYWS88oU4GRZTgE2AB8WZT1JkmyBhoAZUOijlyzL38qy3FCW5Yblbcsb5r/Z702W7VzGsp3LSIhJwPWRpzcXDxfiooyfdGvUr0HVulX579H/8sVvX1DWpyyfb/k8X74Dvx+gRacWJh+HnBSHwikvt1TGFV1SXg0IllYovCpiM3ERtvM3oKxUE+vRs1FUqJob74LVBzNRr12IHBv5+OYL9faAbvywdw0/7F1DXEwC7l55zUZuXq7ERMXmWyc29zXJSFez+/e/8PWvYVjW6LUGDPyoLxMHTCUn2/QPGDdHG6KS8mrcopPScHOwLTB21+kwOtavZph2d7SlelkXvF0cUCkVBNapxJX7+ff7cVlRCUa1ZuaeTmRHxeeP8cqNUSpQ2lujSUgFrY47M9dxrt1Erg5cgNLeGvWtCEqzgL4dmB68iOnBi0iOScTJK68GwtHDmcSowpuFNFk5nNt7knrtGhUa8yRu9o+9/8nphdai7Tp7i45+VQrejoMNVTzKcPp2/hqix40c0Z/Qk3sIPbmHyKhovMvl1eiV9fYkPKLgbdSt64tKpeL0mQv5lvXs2ZUtW/731NxG+2xrQXRaXo1bdFoWrjYW+WJaVXLFTKmgrIMVFRxtuJf0fAqpbnaWRD1S4xadosbtkRo5AHc7K1pV89Tnd7ShgrMt9xLy3q89V8IJrOaFmbLoH1ma6DjMHrnvqjxc0ETHP2ENYwmrf+Ju99E8GDwNJMi+E27Seh36BbEo+EsWBX9JYkwizl559wJnDxcSnrAPOVk5nNxzgkbtmwAQ0COQ4zv1D/Uhfx6lSr2qJu+/nJ5kVGsm2ZUxDFYwyEwHrQYAzcUjKNwqGBZpTu4kc9Ncsn7/GpDQJZo+cEx4sV6ZAlyur4DBwKN37svA450aGgCXcv/+D/ADMA/4sqgJd2zYwZhOYxjTaQwhu0No00PfIbe6f3XSU9NJjEk0ig/+IZi+jfoysMVAJvaYSPjtcD7p9QkAXhXzPgCatm/Kg5umdyrW3rmGwq0skosHKFWYNWqF5twjtXzqDNLGv0PalH6kTemH9tYVMpZ/iu7udbCywXrMHLJ++x7tzctFOv5f122jT7sh9Gk3hL93HTbUptWu70taSjrxj/XlUCqVODjpK0mVKiUt2zbj1lX96MRqtasyZcEEJg6YQmJ80fqA1Srvzr3YJMLjk8nRaNl9OoxWdfKPxLsdnUCKOot6PnnNW7UquJGqziIh90PoxPUHVCqkue9RaWdvYOXjiUU5NyQzFS5dW5Kw23gEV+Luk7j1DADA+c1mJB/R93tTWJmjsNJ/yDq8XhdZqzMa/FAaHdy4m7lBk5gbNImze07S9K1WAPj4V0WdmkFKrPF7amFtaegXp1AqqNO6AVE3TfvwfFytcq7ci0shPCFF//6fvUkr3/L54m7HJOnf/wp5DxrRSWlk5ug/3FIysjhzO4qKBfTXe9zKVetp2Kg9DRu1Z/v23fR9/20AmjSuT0pyClFRMQWu926vrgX2catevTJlHB0I+adoowBrudtzLymD8GQ1OVodu69HEVDJ+Fk0sJIboQ/096JEdTZ3k9Ipa29V0OaKrJZXGe4lpBGelK7Pf/kBrap5Guev7knoXf2DW2JGFnfj0/B2zLtN77p0n061yhUrf+aFMMwqeGFW1h3MVNgFtSJtv4lN8QoFCkd931CLahWxqOZD+tHHG2wKtntDMJOCxjEpaBwn9/xDqx6BAFT1r0ZGajpJj937La0tDf3iFEoFDVo3JDz3Hp8Qk4BvU33tc+0WdYm6Y/rDnC7qDpKjG5K9MyiUqKo1RHvznHGQdd6AEmWleugeDnCQJLDUvw+SS1kULmXR3S3aZ8CLIppQX5FRqA/JspwgSdLP6Atxa3NnLwQWSJLUUZbleEmS/IABQBNJkuoAbwB+QDYwWJKkdrIs7y1O/pP7T9IosBHfH/6eLHUWX07MKw8u27mMMZ2eXC0+8JOBlK1cFlknExMew/IpRRiFqNOR+eNyrMd+hiQpyD66G13EXSy69EN7NwzNucJvaOatu6JwK4tF5z5YdNZ/bUXGl1OQU4tWiDq67x+at2nK1mM/kqnOYs64vJrFH/auoU+7IZiZm7H0x0WoVCqUSgUnDp9i26YdAHw4YwRWNlbM/1Y/8jQqPIaJA/KPXCyISqngk7dbMXLFdnQ6HV2b+lLF05kVf/6Db3k3AupUAmDXqet0rF/VaJSpUqFgXLeWDP/md2QZapZzpUdzEzryanXcmroG380zkJQKon/ajzrsPuUmvUvauRsk7gklevM+qi77EP9jy9EkpRE2Qn9OmDk74Lt5BrIskx2ZwI0xSw2brTC9Ly7dX0NhZUGDU98S8+Nf3F/8s0mvQ2Emzfyck2fOk5SUQptuffhgcF96dO7w9BWL6eKB09QJ9Gfu38vIVmezftI3hmXTgxcxN2gS5tYWjFozGZW5GZJCIizkEoc27SlWPpVSwSfdmjPyu53odDJdG1eniocTK3aH4uvtSkAtfY3DrtzBC4++/7dikljyx3EkSd961K9VXap6mj74BiB45z46dmzNtStHyVCrGTJkvGFZ6Mk9RqNP3+7Rmc5d++bbRq+eXfn5l6LVvgGoFAomB1Tng/+d1h97LS8qO9uy4p8b+LrZE1DJjeYVnAm5F89bG4+hVEiMbVkNx9wBBYN+PcnthHTUOVo6fH+ImW19aV7B9P6YKoWCTzr4MXLzUX3+ehWo4mrPir8v4+vpSEA1L5pXcifkVgxvrd6LQpIY16Y2jtb6B5jwpHSiUtQ0KEJOI1odMXNW4v39XFAoSf5tD9k37uE8pi+ZF8NIP3Acy9rV8Fo+A6W9LbaBTdCM7sOdziOQVErK/6Afma1LyyDy40XFakI9vf8U/oENWXZoFdnqLL6ZuMywbFHwl0wKGoeFtQWT10zDLPd8vxRygT0/7AJg9eRvGDhrCAqlkpysHFZ/ssL05LKO7AM/YdH9I5AUaC4dRU6IxKxpZ3Qxd9HeOo+Zf2uUleqBToucmUH2nnX6dRVKLN+ZqN9MdiZZu9f+u0s0rxipOCOqShtJktJkWbbN/dsduA0sfORrREYCY9GPcUsFJgCHc3/mybK8MzeuIfpmWD9ZlrMfz/NQUPmgEntRf+qgKanUALT9M//Ai5fp7/++U6L5zww4UKL5G11YVKL5RzecXKL5v1rapMRy271d5Ar65yrly+4lml+ye3mjmAty77PifTfl8zJdbf70oBdo/bjCB8W8DNZjV5vw3UrPT3RAwEv7nHU/ePClHpupXokauIeFt9y/owHrx5avBFYWsGrLx+JCgaJ/g6cgCIIgCMJz9EoU4ARBEARB+P9DtOS+eoMYBEEQBEEQSj1RAycIgiAIQqki6/6V3dJeKlEDJwiCIAiCUMqIGjhBEARBEEoV0QdO1MAJgiAIgiCUOqIGThAEQRCEUkWWRR84UQMnCIIgCIJQyogaOEEQBEEQShXRB07UwAmCIAiCIJQ6ogZOEARBEIRSRXwPnKiBEwRBEARBKHVEAU4QBEEQBKGUkWRZLul9+H9HveU/Jfaizp18raRSAzC2aniJ5h8e5lCi+Sdmm5Vo/vUWJftMtjx0QYnmn9ZwWonlHmadUGK5ATZkuJRo/jhySjR/klyy+SfqSrZX/dvqeyWa/1bcmZfapnmvYZuX9jlbPnTfv7K9VtTACYIgCIIglDJiEIMgCIIgCKWKGMQgauAEQRAEQRBKHVEDJwiCIAhCqSJq4EQNnCAIgiAIQqkjauAEQRAEQShVxBdoiBo4QRAEQRCEUkfUwAmCIAiCUKqIPnCiBk4QBEEQBKHUEQU4QRAEQRBKFVmWXtqPKSRJ6ihJ0jVJkm5IkvRJAcvHS5J0WZKk85Ik7ZMkqcKzvgaiACcIgiAIglBMkiQpgW+AToAv8J4kSb6PhZ0BGsqyXBf4FVj4rHlFAU4QBEEQhFJF1r28HxM0Bm7IsnxLluVs4Cegq9H+yvIBWZYzcif/Abyf9TUQBThBEARBEIRCSJI0TJKk0Ed+hj0WUha4/8j0g9x5hRkM7HzW/RKjUAVBEARBKFV0JvZNex5kWf4W+PZ5bEuSpD5AQ6DVs25LFOAEQRAEQRCKLxwo98i0d+48I5IktQWmAa1kWc561qSiAFdCjl6PYGHwKXSyTPf6lRn0ei2j5Yt2nuLk7WgAMnO0JKRncmTqO8+c942Z/age6EeOOpvfJq4i4tIdo+Vmlua8t+IjnCq4o9PquLrvNHsW/ARAi8FBNHw3AJ1GR3pCCls//pak8DiTc5s1bIztB2OQFArUO/9EveVHo+WWb3bBqkt30GmR1WpSv/wC7b27SHb22H86G7Pq1cncs4u05V8X+/gHzxpK/cCGZKmzWD7xK25dvJUvZsb6WZRxK4NCpeTKiUt8N2M1Op2OijUrMvyzD7C0tiTmQQxffbQYdZr6ifkcA/3wmT0IlApiftxH+PLfjZZL5iqqLv0Qm7qV0CSmEjZ8CVkPYpHMVFReOBybepVBJ3N7xlpSQi4BUP6T3ri+3QqVow3Hq/Qp9mvRa+ZAagfWJ1udxbqJ33D/0u18MR+un4a9myNKpZLrJ6+wecb3yDrTOoUUxfTPlnDo6Amcyjiy7YdVz337D3WZ2Z8auef/zxNXEl7A+d9nxVicK7ih08pc2XeKnbnn/0O1Ozam36pxLO08jQcX8p8/BbFu2RCXKSNAqSTl150krfnZaLlj/7ewf7sjskaLNjGZmOlL0ETEAOC5eh6W9WqQefoSkR98WuxjD5rZj6qB9chRZ/P7xNVEFnDsvVZ8SJkK7shaHdf2nWbvgi0AVGhcg06f9sG9Rnl+GbOcyztPFDn/OzMHUivQnxx1Fhsmrsh3vplZmjN0xXhccu89F/ad4n8L9PcIp7Iu9Fk4Ejsne9KT01g3dhlJUQlFyt9v1mD8AhuQrc5i1cRl3Cng2p+8fgaObmVQqpRcPXGF/8741nC+tx8QRPu+ndDpdJzZf4rN8zeYnNs+wB/vWUNBqSB+816iV/xmtNy2iS/eM4dgVbMit0d9QVLwMQDMy7pS6bspoJCQVCpi1/1J3A+7inTcD3362ccEtG1BpjqTSWNmcun81XwxZmYqZi34hKYtGqLT6Vg87xt27dhHo2b1mTFvIjV8q/LR0Cns/OOvYu3D/2MngaqSJPmgL7i9C/R+NECSJH9gNdBRluWY55H0lS7ASZKkBS6gfx1uA31lWU6SJKli7vQ8WZan58a6AJHAalmWRz9LXq1Ox/wdoazq3xp3eyveX72bVjW8qezmYIiZ1KmB4e/N/1zjamTis6QEoFqAHy4+HiwJGE85/yp0mTeIVd3yfyAc/u5PbodcRmmmZNCmaVQLqEfYwXNEXL7Dis7TycnMpnGftnSY8h5bRi8zLblCgd2YsSRNnoAuLpYyy1eTHXIU7b27hpCs/X+RuWM7AObNmmM7YhTJUz9Gzskmfd33qHx8UFX0Kfbx1w9sgKePF6NaDaeaf3WGzR3JJ90m5Yv7YtQCQ8Fs0qpPaPZGC47+cZgPFoxh3by1XD5+idY929Jt+FtsXrzpicdc6bOhXOo1m+zIeOruXEDCnpOowx4YQtzfa4MmOY0zzUfj3LUFFab3JWzEEtzfbwvAudbjMXO2p+aP0znfcTLIMgl7ThK5Npj6x5YX+7WoHeCPm48nMwLG4ONflffnDeXzblPzxX07agmZua/F8JUTaPBGU0L/OFbsvIXpFtSO3j26MHXOF8992w/VyD3/FwaMo7x/FbrPG8zybjPyxR36bgc3c8//YZumUz2gHtcOngPAwsaSlgM7cvfMddMTKxS4Th9F+JApaKLjKLdlGekH/iHn5j1DSNaVm9x/ZwxyZhb2vd7EecIQoid8BkDSf39BsrTAoecbxT72qgH1cPbx4OuACXj7V6HzvIF8221mvrij3wUbrv0Bm6ZSNaAe1w+eIzkijt8nrqbF0OLtQ60Af9x8PJgV8CEV/avy7rwhLOo2LV/cX9/9QVjIJZRmSj7a9Cm+AX5cPniWt6b25fjWQxz/7W+qNatF1497s3686ee/X2B9PHy8GN/qA6r4V2PQ3OF82m1yvrilo74wXPtjV31M0zeaE/LHEXyb1aZhu8Z80mkcmmwN9s4O+dYtlEJBubnDud57JjmR8VTf8QXJe0+QeT2vy1R2eBx3x3+N2/DuRqvmxCRyrdvHyNkaFNaW1PxrKcl7T5ATXbTCa0DbllSsVJ7Wjbvi16AOcxZN5a0O/fLFjRo/hPjYBNo06YYkSTiW0R9nxINIPh49kyGj8q9TUkz9eo+XQZZljSRJo4HdgBJYK8vyJUmSZgOhsixvBxYBtsAvkiQB3JNlucuz5H3VBzGoZVn2k2W5NpAAjHpk2W3g0bvVO8Cl55H04oN4yjnZ4u1ki5lKSYc6FTh49UGh8Tsv3KVjnWf+yhhqtm/Ama2HAbh/5gaWdtbYuToaxeRkZnM75DIA2hwtEZfuYO/hBMDtkMvkZGbnrn8dh9z5plBVr4k2IhxdVCRoNGQe3I9585ZGMXJGhuFvydIKHv6vu8xMNJcuIGdnF+l4H9e4XRMO/nYAgLAz17Cxt6GMW5l8cQ9v4EqVEpWZyvBP9zx9vLh8XH8KnDt8lqadmj0xn61/FdR3osi6F42coyHuf0dw6tDIKKZMx8bE/HwQgPgdITi8VgcAq2reJB+9CEBOfAqa5HRs61UGIO30dXJikorzEhjUa9+If7b+DcDtM9exsrPB/rFzATAU3hSG1+KZ0haqoV8dHOztXszGc/m2b8Dp3PP/3pkbWBVy/t985PwPv3QbBw9nw/L2E3pycNUfaLJyTM5rWac6dYEwCQAAIABJREFUOfci0DyIghwNaTsPYtva+NxRnziHnKlvUck8fwWVu0vesn/OIqc/uab3aWq0b8DZ3GN/kHvt2xbh2k96EEf01fvIxfwHlHXbN+T41kMA3DlzHesCzreczGzCcmuZtTla7l+6TZnc196jqjdhx/TXQ1jIJeq2a1ik/A3aNeZw7rV/40wY1vY2OJpw7T883rZ9OrJ9xVY02RoAUuKTTc5t41eVrDtRZOfeBxK3H8ahfWOjmOwHMaiv3s035FHO0SDn5pTMzZAUxfvIbtupFb//vAOAs6cuYO9gh+sj59hDb/fuysqv1+pzyzKJCfr7TPj9SK5evo7uBdS+/38hy3KwLMvVZFmuLMvyvNx5n+YW3pBlua0sy+65ZQ6/Zy28gSjAPSoE41EjGcAVSZIe3il6AT/nW6sYYlLVeDjYGKbd7a2JSckoMDYiKZ2IxDQaV3J/5rz27mVIjsh7ckuJSsDeI/9N7CFLe2tqtKnPzaP5y60NewYSllsrYQqFiwva2LxaY11cLEqX/DcQyy7dcFr/IzZDRpC2ovhNpQVx8nAmLiLWMB0fFY+Tu3OBsTM2zOK/pzeiTlcTktuccf/6PRq3bwJA8zda4OKZf/8fZeHhRPYjTczZkQmYezjnj4nIjdHq0KZkoHKyI+PyXcq0bwhKBRbl3LCtWxnzsk/OVxSO7k4kRMQbppOi4ilTSIH8ww3T+OLUGjLTMzkV/M9z24eXzcHdiSSjY0544kOIpb01NdvU50ZuQbpsrYo4ejpx9cCZIuVVujuTE5V33mmi4lC6Ff5e2r/VkYzDJ4uU42ns3Z1IfuTYTbn2q7epz63cY39Wju5OJEbkXQuJUfE4PuG1t7K3pk6bBlw9egGA8Ct38euoL/T4dWiMlZ01No62Jucv4+FsdL4nRMVTxr3g/J9s+JRVp9ehTldzPDgEAA8fL6o39mX2tgXM2DKXSnWrmJzbzMM57xoHciLjMfMo+L5T4PqeLtTc8zV1TnxP1MqtRa59A/DwdCMyPMowHRURjYenm1GMnb3+9Rw/ZRTb9//I8u8X4uJq+kP6yybrpJf2828lCnAYvoSvDbD9sUU/Ae9KklQO0AIRT9iGYZjx93+FPrd9233hLm1rlUdZzCev4lIoFfRaOpqQdbtIvG/cXF+vWwu86vpw+Nsdzz1v5vZtJPTvTfqa1Vj3Lrnq+jn9ZjG4UX/MzM2o07wuAN9MWkrHvkEs2rEEKxsrNDmaF5Y/evM+siPjqbdrIT6zB5Iaeg20JfP0u7TfPD5uPAyVuYoazWuXyD68bAqlgt5Lx3B03W4S7scgSRJvzujLjnk/vNC8tp1bY1m7Kolrf32heZ5EoVTwztLRHF+3m8T7sU9f4QXkH7T0Iw6s20l87r1n67yNVG3iy5Q/F1C1qS+JkfEvrDbo836z+aDRIMzMzajVXF8jrlQpsXW05dNuk/nxs/V8uGLiC8ldkJzIOK60/4hLr43A+e1AVC5FaL4tApVKhVdZD06fOEeX1r05E3qeKf8Z90JyCc/HK90HDrCSJOks+pq3K8Dex5bvAuYA0cCWJ23o0WHG6i3/eWI7g5udFVHJ6Ybp6JQM3OytC4zddeEuU94sWnPBo5r0bUej9wIBeHDuFg5eeU9U9h5OpEQV3Leu2/whxN2O4tha4w6zlVvUJmB0N9b0moM22/QCjC4uDqVr3hOfwsUVbVzhAyCyDu7D9qNx+l4Dz6BjvyDavdsegBvnr+Pi5Yr+rQZnD2cSouMLXTcnK4eTe47TqH0Tzh05S/jNcGb31fcb8vTxokHrJ78vWVEJRrVm5p5OZEfF54/xciE7MgGUCpT21mgSUgG4M3OdIa729nmobxX6/GCSgL4daPmevm/dnXM3cPJy5mbuMkcPZxKf0Clck5XDub0nqdeuEVeOnH+m/XiZmvVtR5P3WgNw/9wtHL3yaj4cPZxILuSYe8wfStztKI6s1X9Vk4WtJR7VyjH8J32fUTtXBwasmci6IV88dSCDNjoeMw9Xw7TKwwVtTP5z36qZP07D3iO8/0TIMb2JtjCN+7ajQe61H37uFg6PHPuTrv0u8wcTfzuKkLXF6yz/0Ot9O9DivTYA3D13kzJeLsA1QF8jVtgghN7zhxNzO4oDa4MN85JjEvl2xGIALKwt8OvYBHUhrRYPtevXicB32wFw67z+fH/IycOZxCfUZOVk5XBqzwkatm/MxSPnSIiM4+Qufe3zzXPXkXUydk72pCakPOVVgJyoeMy98u4DZp7O5EQVft8pdDvRCaiv3cO2cS3DIIcn6TuoJ736vgXA+bOX8CzrYVjm4eVOVKTxg3liQhIZ6Wp27dgHQPD/9vLO+92KvJ8vSzFb8/9fedVr4NSyLPsBFQAJ4z5w5H6j8ilgAvp/ffFc1CrrzL2EVMIT08jRaNl94S6tauT/zr/bscmkZGZTr1zxm86Ob9zL8qCpLA+aypU9ofi/9RoA5fyrkJWqJjU2f1+qthPewcLOmuDZG43me9aqQNfPBvPDkMWkxz/9xvUozbWrKMt6o/DwAJUKy4DWZIccNYpRls17DcybNEMbXni/QFPt2hDMhKCxTAgay4k9xwnoof9Aq+ZfnYzUDBJjjD/ELK0tDf3iFEoFDVo3JPymfj8ccjsuS5LEO2N6snvTkz/g0s7ewMrHE4tybkhmKly6tiRht3HtbOLuk7j1DADA+c1mJB/RN1kprMxRWFno875eF1mrMxr8UBwHN+5mbtAk5gZN4uyekzR9S/81RD7+VVGnZpDy2LlgYW1p6KekUCqo07oBUTfzjYz/VwvZuJevgqbwVdAULu0JpX7u+V/evwrq1IwCz/8OE3piaWfFH7PzRhlmpqr5T/1hfN7yQz5v+SH3ztwwqfAGkHnxGmYVyqIq6w5mKmw7BZB+wLgp2rxmZdxmfkjk6JloE0zvX/UkJzbuZWXQVFYGTeXqnlD8co/d278Kmalq0go49ja51/7Ox6794ji0cTfzgz5mftDHnN9zgiZvvQ5AxULON4DOE3phZWfNr7PXGc23KWNHbsdvOnzQnZCfDzw1/94NO5kaNJ6pQeMJ3XOc13Kv/Sr+1VCnZpD02LVvYW1p6BenUCrwa92AiNxrP3TPCXyb6WvjPHy8UJmpTCq8AaSfu45FRU/Mc+8DZbq8RvJe00bxmnk4I1maA6B0sMG2UU0yb5l2DW5c+zNvBr7Lm4Hvsjf4AN17vgmAX4M6pKakERud/yFi355DNG2pfzBt/npjblwzbZS1UDJe9Ro4AGRZzpAk6UNgmyRJKx5bvBj4W5blhIc3kGelUir45I2GjNxwAJ1Opmv9SlRxc2TFvvP4lnUioIb+P2zsunCXjrUr8LzyXjtwlmqBfoz/+0ty1FlsnbTasGx08GcsD5qKvYcTgWO6E3MjnFF/zgPgn/V7CN1ykI5T3sfC2pL3VnwIQFJ4PD8MXWxacp2WtOVf4TD/CySFgszdwWjv3sG6/yA0YVfJDjmGZde3MPdvAFoNutQ0UhfON6zutPEnJGsbJDMV5s1bkvzJRKMRrKY4tT+U+oENWHFode7XiCw1LFsc/BUTgsZiYW3JlDXTUZmboVBIXAy5wO4f9LUwLbu8Tqd+QfrXZFcI+39+ylB6rY5bU9fgu3kGklJB9E/7UYfdp9ykd0k7d4PEPaFEb95H1WUf4n9sOZqkNMJGfAmAmbMDvptnIMsy2ZEJ3BiTt68VpvfFpftrKKwsaHDqW2J+/Iv7i4vWPfPigdPUCfRn7t/LyFZns37SN4Zl04MXMTdoEubWFoxaMxmVuRmSQiIs5BKHNu0pUh5TTZr5OSfPnCcpKYU23frwweC+9Ojc4bnmuHrgDDUC/Zj891dkq7P45ZHzf2zwfL4KmoKDhxNtxnQn+kY4H/2pHwV6bP0eTmx5eoGhUFodsfO+weu7z5AUClJ+30P2jbs4je5H5qUwMg78g8vEoUjWVnh8OR0ATUQMkaNnAVB242LMfbyRrK2ouP8HYmZ8ScbRU0XahbADZ6ka6MfYv5fov0bkkWMfGfwZK3Ov/VZjuhF7I5wRudf+8fV7OL3lIF51K/He6nFYOVhTvY0/rcf1YHn7/KM4C3PxwBlqBdbnP38vJVudzcZJebfZKcELmR/0MY4eTnQa04OoGw/45M8FAPy9fhfHtuynWlNfun7cG1mWuXHiCls+/b5Ix392/yn8Ahvw5aGVZKmzWD0xb/T8Z8FLmBo0HgtrCyasmYJZ7mCByyEX+OuH3QAc/HkfwxeNZsGer9Hk5LBywtLCUuWn1XF/xrdU+WEWklJB/JZ9ZIbdx3NCbzLO3yB57wms61Wh0ndTUDrY4tC2EZ7j3+NK2zFYVvXGe8YgZFlGkiSiV28j82rR7nsAB/YeIaBtSw6c3E6mOpOPP5xlWLbjwE+8GfguAAv+8zVLVs5lxtyJJMQn8vEYfVxdf19Wrl+Cg4M9bTq8zkeTR9Cx5dtF3o/n6d/cN+1lkYo7quj/A0mS0mRZtn1k+g/0AxUOAztyR6c+Gj8A/T+jfeLXiDytCfVFmjv5WkmlBmBs1ZKtoRke9mL6h5hqYrZZieZfb1GylerLQxeUaP5pDfN/NcXLMsy66J3Ln6cNGc9vkEtxxPHszb7PIkku2fwTS3iE5tvqe08PeoFuxZ15qSWqy5XfeGmfs743//xXlhZf6Rq4RwtvudOdH5nM11tbluV1wLoXu1eCIAiCIDzJy/xXWv9Wr3ofOEEQBEEQhFLnla6BEwRBEASh9Pk3/SeGkiJq4ARBEARBEEoZUQMnCIIgCEKp8gqPvzQQNXCCIAiCIAiljKiBEwRBEAShVBGjUEUNnCAIgiAIQqkjCnCCIAiCIAiljGhCFQRBEAShVBFfIyJq4ARBEARBEEodUQMnCIIgCEKpIr5GRNTACYIgCIIglDqiBk4QBEEQhFJFfI2IKMC9EP0+Pl1iuVfXTyqx3ACvHcss0fyhnzUq0fynp90p0fxfLW1SovmnNZxWovnnhc4rsdy23q1KLDdA3LB6JZpfYWdVovmT9ieXaP4Fka4lmv/izGYlml94+UQBThAEQRCEUkWMQhV94ARBEARBEEodUQMnCIIgCEKpIvrAiRo4QRAEQRCEUkfUwAmCIAiCUKqIr4ETNXCCIAiCIAiljqiBEwRBEAShVBF94EQNnCAIgiAIQqkjauAEQRAEQShVxPfAiRo4QRAEQRCEUkfUwAmCIAiCUKroSnoH/gVEDZwgCIIgCEIpIwpwgiAIgiAIpYxoQhUEQRAEoVSREYMYRAHuJRs4ayj1AxuQpc7im4lfc/virXwx09bPxNGtDEqVkisnLvP9jNXodDoq+vowdN5IzC3M0Gp1rJm+ihvnrpuc28y/MdaDx4BCQdZff5K59Uej5RYdumDRqTvotMiZatJXfIHuwV0Urh44LNuANuIeAJqwy2SsWlKs458ybzyvt2mOWp3JtA/ncOXCtXwx/926Ald3F7IyswAY2utDEuISmTx7LI1bNADA0soSJ5cyNKvW1uTcR2/FsHDfRXSyTPe65RnUtGq+mN1XI1h9VL9P1dwc+LxzfQDqL/qDKq72AHjaWfF1j8Ym5XQM9KPSnIGgVBC9aR/hy7cZLZfMVVRbNgabupXQJKZxbfgSsu7HIqmUVFkyEps6PkhKJTG//E34st8BUNpbU2XJSKyrlwdZ5sa4FaSeCnv68V+9z8LtIeh0Mt0bV2dQaz+j5Yu2h3DyRgQAmTkaEtIyOTKnPxGJqYxfvxedTkaj0/Fei1q808zXpON/XJeZ/akR6EeOOpufJ64k/NIdo+Vmlub0WTEW5wpu6LQyV/adYueCn4xiandsTL9V41jaeRoPLuS/fopj+mdLOHT0BE5lHNn2w6rnss3HLVn8Hzp2bE1GhpohQ8dz9uxFo+W2tjbs3/ebYbpsWU82b97KxEn/oW/fd5j/2TQiIqIAWLlqHf/9r/Hr8iTKmvWxfGsYKBTkhOwh+69fC4xT1WuO1eCppC8ai+7+DQAUXhWx7DUaLK1Alsn4Yhxocop07Mqqfpi/MRAUCjSh+8g5ZHwdqPwDMO/UF11KAgCaf3aiCd0PgEX/aSjLVUV79ypZGz8vUt6HLJo2wmHsaCSlgvTtwaRt3Gy03Pbdt7HuEgRaLdqkZJLmLUIbFa3fd3c3HKdMROnuCrJM/PgphmVF0WPmAHwD/clWZ7Fp4koeXLpttNzM0pxBK8bhUsEdnVbHxX2n+GOBfj+7z+hH1Wa1ADC3NMfWxYFP6g4qzkvB0bvxLDochk6W6ebrxaAGFfPF7LkezaoTt5AkiWrOtszvULtYuYQX65UqwEmS1A34Hagpy/LV3HmNgYVAWSAViAQ+kWX5giRJs4ChQOwjmwmQZTmpOPn9Axvg6ePJmFYjqOpfjaFzRzK126R8cUtGLUSdpgZgwqrJNH2jBcf+OEyfKf355eufOHvwNP6BDegzpT+z3p1uWnKFAuthY0mdNQFdfCz2C1eTfeIougd3DSFZh/4ia/d2AMwaNcd64CjS5nwMgDY6nJTxQ4pz2AavtWlOBZ9ydGr6NnUb1ObThR/zXqfBBcZO/uBTLp27ajRvwadfGf7uPfgdatapbnJurU5m/l8XWNWzKe52Vry/4TCtqnhQ2cXOEHM3IY21/1xn3fstsLc0JyE9y7DMQqXk5wGtTM4HgEJBpflDuNRzNtmRCdTb9TkJe0JRhz0whLj3boMmKZ3Tzcbg0rUFFaf34drwL3Hu3AzJ3IyzgRNQWJnjf+gr4rYdIet+LJXmDiJp/1muDVmMZKZCYWVuwvHrmP/7UVYNC8LdwYb3l26jVa0KVHYvY4iZ1KWZ4e/NRy5yNSIeAFc7azaM7oq5SklGVg49Fv9KK98KuDnYFOnlqBHgh4uPBwsDxlHevwrd5w1mebcZ+eIOfbeDmyGXUZopGbZpOtUD6nHt4DkALGwsaTmwI3fPmP7gYopuQe3o3aMLU+d88Vy3+1DHDoFUqeKDb63XaNzYn2VLP+O117sYxaSlpdO4SUfDdMixP9n2v12G6V9//YOx4/K/Xk8lKbB8ZyQZ30xHTorHeuKXaC4eRxd13zjOwgqzVl3Q3nnkulMosOw7gcyNS9BF3AZrO9Bqi5zfvPNgMv87BzklAcuR89FcCUWOfWAUprlwjOw/vs+3es7h/6Ext0DVqF3R8j5yDI4TPiLuo0loY2JxW7uSzMPH0NzJu/dlh90gfeBI5KwsbLp3wX7UMBJnzAGgzKefkLpuE1knTyFZWYKu6P/EyTfAD1cfD+YEfERF/6r0nDeYJd3y37v3f7eD6yGXUJopGb1pBjUD/Lhy8Cy/z9lgiHm9f0e8a1Us+uuA/j74+d/XWNnVH3dbC97/+SStfFyo7GRriLmblMHaU3dY16Mh9pZmJGRkFyvXi1aMt+H/nVetD9x7wJHc30iS5A78DEyVZbmqLMv1gflA5UfW+VKWZb9HfopVeANo1K4xf/92AIDrZ8KwsbfB0a1MvriHhTelSonKTAWy/kyVZbC2tQbA2s6axJgEk3OrqtZEFxmOLjoSNBqyj+zHvHHLxxJnGP6ULKyKdGymaN3xdbb/shOA86cuYmdvh4ubc7G2FdS9PcFb95gcfzEykXKONng72mCmVNChphcHb0QZxWw9f49e/hWxt9QXiJxsLIq1bw/Z+Vch83YUWfdikHM0xG47ilOHRkYxTh0aEfPzQQDidoTg0LKOfoEso7S2AKUChaU5crYGbaoapZ019k1rEv3jPn1YjgZtSgZPc/FeLOVc7PF2tsdMpaSDX2UOXrpbaPzOszfp6Ke/DMxUSsxVSgCyNVpkuXh3Tt/2DTi99TAA987cwMrOGjtXR6OYnMxsboZcBkCboyX80m0cPPLOkfYTenJw1R9osopWA/Q0Df3q4GBv9/TAYurcuT0/bNLXrp04cQZHR3s8PNwKja9axQdXNxeOHDn+zLkVFaqhi41Ejo8GrQbN6UOo6jTNF2fxRh+y//oVOSfvtVXWqI8u4o6+8AaQkQpy0cb/KbyroEuIQk6MAa0G7fmjqGo2NHl93a2LyFnqIuV8lLlvDTQPwtFG6O99GX/tx/L15kYx2afPImfpH9iyL11G6eYKgKpiBVAqyTp5CgBZnWmIK4o67RtxYushAO6cuY6VnQ32BZz710MuAfpz//6l2zh6OOXbVoMuzTm1/WiR9wHgYnQK5Rys8Haw0t8Hq7pz8FacUczvl8LpWccbe0szAJysn/6AKJSMV6YAJ0mSLdASGAy8mzt7NLBeluVjD+NkWT4iy/K2AjbxzJw8nImPyLtY4qPicHIvuAAzbcMs1pzeQGa6mn+C9bu3bvYa+k4dwMqQ7+k3bSCbFmw0Obfk5II2LsYwrYuPReHski/OolM3HFb+iFX/EWSs+dowX+nmif3iNdjN/RpVzbom532Um6crUeF5TQ/RkTG4e7oWGDv36xn8tm8jI8blbybw9PbAu7wXx4+Empw7Ji0TD7u8Qqm7nSUxqZlGMXcT0ribmE7/TUfou/EwR2/lvV7ZGh291x+i78bD7L8eaVJOc08nsh95v7Mj47HwdMoXk/UwRqtDk5qBysmO+B3/oM3IovH572h4ahXhK7ejSUrDsrwbOfEpVPl6FPX2LqLK4hEorJ9e0IxJScfDMe8p293Bhpjk9AJjIxJTiUhIpXEVL8O8qKQ03ln8Gx3n/ciAgHpFrn0DcHB3Iim3Vg8gKSoBhwI+oB6ytLemZpv63Diqb2osW6sijp5OXD1wpsi5S5qXlwcPHkQYpsPDI/Hy8ig0/p2eXfj1lz+M5nXr1onQk3vY/OMqvL09Tc6tcHRGl5TXiKBLikNyML7vKLwrIzm6oL1sfE0p3LwAGauRs7Ge9BXmbXqYnPchyd4JOTnvfZdTEvLlB1DWaoLVmC+weG9CgcuLS+HqgjYm71rWxsShdC34vgNg3TmIrJATAKjKeyOnpeE0/z+4rl+N/ejhoCj6x6aDe5nHzv34J577VvbW1G7TgLCjxs3sZcq64FTOjbBjFwtZ88li0jNxt7M0TLvbWhCbblwgvZuUwb2kDAb8Gkq/X05y9G7845v5V9AhvbSff6tXpgAHdAV2ybIcBsRLktQAqAWcfsp64yRJOpv7c+CF72Wuef1mMazRAFTmZtRurq+Vad+nE+vmfM/IZoNZN/t7Ri4c89zzZu3cRvLI3qg3rMbqnX4A6BLjSRrWk5QJQ8hY+w0242eAlfVzz/3Q5A9m0j3gffp2GU79pn50eaeT0fKgbu3Ys2M/Ot3z/SYgrU7mXmI6a95tzuedGzB79zlSMvW1EcEj2vBj/9eZ37k+i/Zd4n5iwYWf58XWvwpodZysN4xTjT+g7IjOWJR3Q1Ipsa1Tiah1ezjXbhLajCy8R3d/rrl3n71J27o+KB/5oPJwtOWXCT3YPrkXf5y6Tnzq02v9noVCqaD30jEcXbebhPsxSJLEmzP6smPeDy80779Fz3e6sOXn/xmm//xzL9WqN6dho/bs23+YNWu+fH7JJAmL7kPI2pa/+RKFEmUlXzI3fEHGV5NR1W2Gslq955c7l+ZqKOpFH6BeNhHtjXNY9Bj93HOYwqpDW8xrVCN10xb9DKUS83p1SF62ithBI1F5eWL9RocXug8KpYL+Sz/k0LpdxN+PMVrWoHNzzgYfR36B7Ydancy9ZDXfda/P/A61mXPgCqnPucZbeD5epQLce8DDXr8/5U4bkSTpuCRJVyRJ+vqR2Y82oQYWtnFJkoZJkhQqSVLorbQ7hvkd+gWxKPhLFgV/SWJMIs5eebVezh4uJEQX/nSTk5XDyT0naNS+CQABPQI5vjMEgJA/j1KlXv5O+IWRE+JQuuQ12SicXdHFxxUan31kH2YPm1g1OcipKQBob4WhiwpH6VXOpLzvDXyb3/Zt5Ld9G4mLjsOjrLthmbunG9GRsfnWiYnSz8tIzyB4627q+NcyWt6pW7siNZ8CuNlaEpWa1wwTnZqJ2yNPogDudla0quKOmVJBWUdrKpSx5V5uQc09t/bO29GGhuWduRqT/NSc2ZEJmD/yfpt7OpMVmZAvxuJhjFKBys4aTUIqrm+9RuKBM8gaLTlxKaScvIatX2WyIuLJiownLbcPWPyOf7Cp6/P047e3ISopLe/4k9MLrUXbdfYWHf2qFLwdBxuqeJTh9O2oApc/rlnfdowNns/Y4PmkxCTh6JVXs+Lo4URyVMHdAHrMH0rc7SiOrNU3uVvYWuJRrRzDf/qUT44spbx/FQasmYh3nUom7UdJGDG8PyeO7+LE8V1ERsXg7Z1Xo1m2rKdhQMLj6tSpiUql4syZC4Z5CQlJZGfr+yKtXbuZ+v51TN4PXVI8Cse8GieFo4tRjRgWVig8y2M9Zj42M79HWbE6VsNmoChXBTkpHu2NS8jpKZCTheZyKArvygVkKdzjNW6P18gBoE4DrQYATeh+FGWf3/uqi41D6ZZ371O6uaCNzX/fsWhUH7sB7xP/8XTIbUbWxsSSc/2mvvlVq0N96Chm1U27777Wtz0fBy/g4+AFBZz7zoWe++/OH0bs7SgOrg3Ot6x+5+acLmbzKYCbjSXRj7Q8RKdl4fpYVxE3W0taVXTR3wftrajgaM29pOI3Yb8oMtJL+/m3eiUKcJIkOQGtgTWSJN0BJvF/7N13WBTX18Dx7+wuVZp0xN67Ytdo7A01GmuMvZfYW2JJLIk9McXEaGISW4qJJhp/9lhiV7D3rigKiIAI7FJ25/1jEVhABRvh9Xyehwd25u6cmb2zs3fPvXeAzsBZoMqjcqqq1gQ+BJyzG0NV1e9UVa2mqmq1og6FU5ZvXbGJ8f6jGe8/moBth6jfwdwGLOFXkriHsUSFRVpsx9beNmVcnEaroWqjagRfNQ/2jQiLoGwt82yg8m9UJOTGHbIq6fIFND750Xh6g06Hdd1GJAZYXgg0Pr4pf1stOvxHAAAgAElEQVRVrY3prjmu4uSc0m2g8fJB65MfU2jWYv/60xo6NO5Bh8Y92LF5T0o2rWLV8sQ8jCE8zPJCrtVqcXE1v/w6nZb6Tety+cLVlPVFihfCydmRE4GnyY5yPi4ERcYSHBVHotHE1vN3qF/csgurYQlvAoPM+xMZF8/NyBjyu9gTbUggIcmYsvzE7UiKuj19vNTDE1ewK+pjzpxZ6fBo9wYR2wIsykRsC8SzcwMA3FvX5kFyl0l8cDjOdc11rbG3wbFqCfSX75B4L4r44PvYFTM3BpzrVbCYFPHY4y/gQVB4NMER0SQmGdl64ir1yxbMUO56WBTR+ngqFUr9wAuNisGQaP5wjY6L5/j1EAqnG7/zOAdXbucL/4l84T+Rs9sCqdK+HgAF/YqjfxjHw3sZh5Q2H9sZW0c7NsxIHbhteKhnepWBzKk7gjl1RxB0/ArL+n/6wmahvgyLlyynRs0W1KjZgg1/b6V7N3P3Y40afjx48JCQkLBMn9elc1uL7BtgMV6udetmXLhwJcv7YQq6hMYjH4qrF2h16Kq8SdLpNGPrDHHETupG7PR+xE7vh/HGRfTffYzp1hWSzh9Fk68QWNmARoO2eHlMIUHZeBXAFHwFjZsPSl5P0OrQVnyDpAuWXbWKY+r5pC1TDVPY08/prEo4fwFdAV+0PuZrn32TRhj2HrQoY1WyOC4TxnB//BRMkannZOL5i2gcHNC4mK9JNlX9SLr++LGjae1duY15/u8zz/99Tm0LoEb7NwEo7FcCw8M4ojM591uN7YKtoz1/zlieYZ1nsXzYOefh+rGnzzh/nHJejgQ9iCM4Wm++Dl4OpUERy6E0DYt6EBhs/lyK1CdwMyoOX6cXPyZaPL/XZRZqR2ClqqqDHi1QFOVfYDuwUlGUrWnGwb20vsFjO4/i17AaC/csJkEfzzfjFqasm7/pc8b7j8bG3ob3l07GytoKRaNw9uBptq0yz0Rb8v439JnWH41WS2J8Iks+WJT14CYjcd9/gePUT823EdmxCeOtG9h17UvSlQskBhzA1r89uopVwZiEGhND7FezAdCVrYRd177mb8gmldjFC1BjHmb7+Pf8s583G9dh8+G1GPQGpoz8OGXd2h0r6dC4B9Y2Vnz321forLRoNVoO7g1gzarUD7OW7Zqyef32bMfWaTR80KQ8Q/44hElVaVuhAMXdHVm09wJlvV1oUMKbOkU8OHjjHu1/2IVGURjdoCwudtacCI7gk62n0CgKJlWlb63iFrNXH8to4tqkpZT7dQpoNYT9uhP9xdsUnNCFmBNXidgWSOgvOyj59QiqHFxIUlQMFweZu8bu/riFEl++h9+/n4MCYb/tIu68+YPj+uQfKLloJIqVDsPNUC6P+ubpx6/V8EG7Ogz5fjMmk0rbGqUo7u3Koq2BlM3vQYNyhQDYkjx5QVFSv3VeC4tiwYbDKIp5Ik3P+hUp4fP48TuPc2HXcUo3rMz7/35Bgj6eP8YvSVk3atNsvvCfiLO3K42Hv03olWBGbpwFwIHl2ziy+uWOXhg/dQ4Bx08RFRVN43bdGdqvBx3avLiuss1bdtKiRSPOn9tHXJyeAQPHpqw7cniLxezTjh1b07ZtL4vnv/deH1q3akpSkpGIyCgGDBiT9eAmE4Y1i7EfOsN8G5FD2zGFBGHt3w1j0GWMZ448/rn6WBJ2rcN+3AJQwXguMMM4uazET9jwA7a9J4OiIenYLtSw21g17oIp+CrGC4HoavujK10N1WQEfQzxa1PPadsBM9B4+IK1LXYTFpPw57cYr5zMenyjiajPFuL+xVzQaIn932aSrt/AcUBvEs9fwrDvAE7DBqHY2+I6c6r5KaFhREyYAiYTDxYuxn3hp6AoJFy4ROz6jdk7fuDcruOUa+jHR/9+SYI+gZ/Hf5uybsKmuczzfx8Xb1eaD29PyJVgxm803y5l7/KtHFxtvp1K1TZ1OLbhQKbbzyqdRsP7b5Zi6PrjmFRoW9aHYm4OLDp8lbKeTjQo4kGdgq4cDLpP+58PolUURtUpjoud1XPFfRnkX2mB8qwzynKT5LFrc1VV3ZJm2QigDLAcmIv5NiJhQDgwQ1XVwMfcRqSdqqo3nhSvU6G2OfaiLqnyzJNkX4h6BwxPL/QSBc6ql6Pxj02+kaPxq3yXcXbhqzR1xNEcjT8zcGaOxXbIn83bzLxg4QNf/Ni07NA45myWJmpnzg62n3v38RMjXoU5Y1/cxI9nYT980Svta9zu1eWVfc42DV39n+xHfS0ycJmNXVNV9as0DzO98qqqOg2Y9nL2SgghhBDP4r88Nu1VeS3GwAkhhBBC/H/yWmTghBBCCPH/h4yBkwycEEIIIUSuIxk4IYQQQuQqkoGTDJwQQgghRK4jDTghhBBCiFxGulCFEEIIkavIbUQkAyeEEEII8VwURWmhKMpFRVGuKIryQSbrbRRFWZ28/rCiKIWfN6Y04IQQQgiRq5iUV/fzNIqiaIFvgJZAWaCroihl0xXrB0Sqqloc+Bzzf4B6LtKAE0IIIYR4djWAK6qqXlNVNQH4DWibrkxbzP+6E2AN0FhJ+0+nn4GMgRNCCCFErmL6b42B8wVupXl8G6j5uDKqqiYpivIAcMP8/9efiWTghBBCCCEeQ1GUgYqiBKb5GZjT+wSSgRNCCCFELqO+yliq+h3w3ROKBAMF0jzOn7wsszK3FUXRAc7A/efZL8nACSGEEEI8uwCghKIoRRRFsQbeAf5OV+ZvoFfy3x2BnaqqPlc7VDJwL8ECz5gciz3omEuOxQYInJ9+4s2r5TVkdY7Gn+daJ0fj1+/4eY7Gv1C8fI7Gd8hfP8dix9z+N8diAzSo1D9H4+tNUTkav6lNgacXeokmF76bo/GbzrmXo/H3D3+18f5L/0oreUzbMGAroAV+VFX1rKIoM4BAVVX/Bn4AViqKcgWIwNzIey7SgBNCCCGEeA6qqm4CNqVb9lGavw1ApxcZUxpwQgghhMhVTM93B47/F2QMnBBCCCFELiMZOCGEEELkKq9yFup/lWTghBBCCCFyGcnACSGEECJX+S/NQs0pkoETQgghhMhlpAEnhBBCCJHLSBeqEEIIIXIVk9xFRDJwQgghhBC5jWTghBBCCJGrmJAUnGTghBBCCCFyGcnACSGEECJXkRv5SgZOCCGEECLXkQzcK2RbuzouY98DjYbY9Zt4uPw3i/UO73bEoa0/qtGIKSqKiBnzMYaEAZD/0DYSr14HwBgSRvjYD59pH/pMG0CVhlWJ18fzzbgvuX7mWoYyk5dPxcUzL1qdlvNHzvHDh0swmUwULluEATOHYG1jhdFoYumUxVw5eTnLsfdfDWHetlOYVJW3Kxemb51SGcpsPXebJXvPA1DSy5k57WoAcPdBHNM3HiM0Wo+iwMIudfB1yZPt4583/yOaNW9AnN7AkEHjOXnirMV6B4c8bNm+OuWxbz5vVq9ezwcTPqbOG9WZM+9DypcvTZ9eI1m/bnOWYr4xvQcFG1UmSR/PrjHfEX7mRoYy7hUK03DBIHS21gTtPMH+qSsBcCtTkHqz+2CVx5aHt+6xY8S3JMbo0VhpeXNOPzwqFkE1mTgwdRV3Dp1/6r58vmAGLVs0Ik6vp1+/0Rw/cSbD8e/e9VfK4/y+Pvz8y5+MHTeVz+ZPo36DOgDY29vh6eGGu2fZLL0GAPZ1q+E+cTBotUSv2UzU0t8t1rv0ao9TxxaoSUaMkQ8Im7KApDvm899nyUxsK5XGcOwsd4d+lOWY6S34bDotWjQiLk5P/wFjOJHJ8e/csTblsa+vD7/++ifjxk+nR49OzJ41mTt3QgD4dvEyfvrJ8j38rKbMWsCe/UdwzevCulWLX8g20xs1Yxi1G9XEoDcwc/Q8Lp15/Ht37k+fkK+gDz0a9wOgeNmijJ8zGjt7O+7eDmX6sJnExcRlK/74j0dSt3FtDHoDU0fN4sLpSxnKfLd2Ie6ebsQb4gEY+s5oIu9H0aFnWzr3bo/JaCIuTs8n4+dx/dKNbMV/a2ovSjWsTKI+gd/Hfcuds5bPt7K1ptuiUbgV8kQ1qpzbcZQtc831W7NbE2r3aIpqMhEfa+DPiUsJuxKc5djWNWrgOGwYaLXoN24k7pdfLNbbd+qEXatWKdf+6HnzMIWGAuAwcCA2tWsDELNiBfG7dmXruDOTlXNh4R8LcPdKrYtRXScQdT/quWO/KDIL9TVuwCmKYgROA1ZAErAC+FxVVZOiKA2AcaqqtlYUxQv4ASiQXPaGqqr+2Q6o0ZB3wgjChk3AGHoPr+WL0O85SNL1mylFEi9eIbTnENT4ePJ0aIPLiIHcn/QJAGp8AqHdBj3XMfs1rIpPER+G1x9MCb+SDPhkCJPajc9QbsF789DH6AEYu/h9arV6gwMb9tJ9Yi/++PI3Tuw+hl/DqnSf2Itp70zJUmyjSWX2lpMsfrcuXk52dPtxF/VL+FDMwymlzM2IGH48cJFlPevjZGdNRKwhZd2UvwPp/0Ypahf1Ii4hCeUZ3rzNmjegWPHCVK7YiOrVK/P5Fx/TqEF7izIxMbHUrd065fG/+9bz9/otANy+dYchgyYwYmT/LMcs2LASzkW8+bXeWDz9ilFvVm/+emtahnJvzurDvxOWEnb8Kv4rxlOgQUVu7T5F/fn9OfjJL9w9dIFSXd6k8uBWBHy6hjLvNgTgj6YTsXVzotWK8axt/eSGTcsWjShRvAily9alZo0qfPP1bOrUbZPh+KtVb5by+PChzaxbtwmAseNT9/u9oX2oXLl8ll8HNBo8prxHcP+JJIWGU2D1QmJ3HSLxalBKkfjzV7nVaTiqIR6nLq1xG9uf0LGzAIj66Q8UWxucO7fKesx0WjRvSPHiRShbrh41avix8KtZ1HvzLYsyMTGx1KjZIuXxwQMbWZdc/wBr1mxg1Ohn+/L0JO38m/Juh7eY9PGnL3zbALUb1SR/EV+61O1BuSplGDd7FAPbvJdp2fot6xEXq7dY9sH8cXz98WJOHDpFqy4t6DakC9/P/ynL8d9oVIuCRQvQts47VKhSjolzxtGr1cBMy04eNp3zJy9aLNvy53bWrlgPwJvN3mDstOEMe3dsluOXalAZ9yLezG8wmoJ+xXl7Zj++aZexHvd8/z+uHTyH1krLgJ+nUKpBJS7uPsmJ9fs5/PM/AJRpUpXWH/bgx15zshZco8Fx5Eiixo3DeO8erosXE79/P8abaa79ly8TN2gQxMdj99ZbOA4axIMZM7CuVQtdyZLc798frKxw/eILEg4fRo3LXuM5reycC9OHzeTCqYwNbfHf8Dp3oepVVa2sqmo5oCnQEpiaSbkZwHZVVSupqloW+OBZglmXK03irWCMwXchKYm47buwq1/Hokz80ROo8eZvOwmnz6P19HiWUI9VvWkN/l1r/vZ2+fgl8jjlwcUzb4ZyjxpvWp0WnZUOVPNoA1UFewd7AOwd7YkMi8hy7DN3Iijgmof8efNgpdXQvGx+dl+6a1Hmz+PX6VK1KE521gC45rEF4Oq9aIwmldpFvcyxrXXYWWX/u4d/qyb8+os5uxQQcAJnZye8vB//GhcvXgQPDzcO7A8AICgomLNnLmAyZf2fuBRuVpVLa/cBEHb8KjZOebD3dLEoY+/pgpWDHWHHrwJwae0+ijSvBoBzEW/uHroAwO09ZyjSsjoAeUv4ErzfnD003I8mPjoOz0pFnrgvbdo0Z+XPawA4fOQYzi7OeHt7PrZ8iRJF8fRwZ+++wxnWvdOlHatXr3vq8T9iW6EUiUF3SLodAolJxGzejUOj2hZl9EdOoiZ/2zecOo/Oyz113aETqOkaFdnVpk0zVv1szq4dOXIcFxenJx9/8SJ4eLqzL5Pjf9GqVa6As5PjS9t+3eZ12LJmOwBnj53H0dkBN0/XDOXs7G3pMrAjy79cZbG8QNH8nDh0CoCAvUep718vW/EbtKjH//4wN4RPHzuLo5MD7p5uWX5+bJpsn529HaqavRFQ5ZpV5eifewEIOn4FO0d7HD0s34eJhgSuHTwHgDHRSPDZ6zh7m/cxPib13LO2t0m5JmaFVenSGIODMd41X/sNO3di88YblrFPnIDka3/iuXNoPMzXJV2hQiSePAlGIxgMJF29inWNGtk69vSyei7815le4c9/1evcgEuhqmoYMBAYpigZcjs+wO00ZU89SwythzvG0Hspj42h99B6uD+2fJ62LTEcOJLyWLG2xmv5Ijx/XIhd/Tce+7wncfV24/6d8JTH90PCcfXK/CI6ecU0lh5bgSFWz6FNBwBYNmMpPSb15tuDP9Bzch9+nrsyy7HDHhrwdrRLeezlZEfYQ8sP5JsRMdyMiKHX8t30+GkX+6+GpCx3tLVizJpDdFm6gwU7TmM0ZX8Ia7583ty+ndpoDL4TQj4f78eW79CxNX+u3ZjtOGnl8c5LzJ37KY9j7kaQxztvhjKxdyMyLRN56TaFm1cFoFjrmjjkM19o758LonDTKihaDY4FPPCoUJg8Pk/+QPTN583tW3dSHgffvotvvscff5fOb/HHH39nWF6woC+FCxdg5679T4yXltbLjcSQ1PM/KSQcrefjz3+n9i2I2xuQ5e1nhbn+0xx/8F3yPeH4O3V+izV/bLBY1q5dSwIDtvHrL4vJn9/nhe7fy+Th7U5Ycnc0QNjde3h4Z3z9B0zoy29L/sCgN1gsv37pJvWam687DVvXxyvf4xu+mfH0difUIn4YHj6Z1/+0zyfx6/af6D+6l8Xyzr3bs/7gakZOGcK8KV9kK76TlysP0rwPH4RE4OT9+EaLrZM9ZRpX4cr+1C722j2aMuHfL/D/4F3WT1ue5dgaDw9M91LPfdO9e2g9Hv/F0a5VKxKOmK/9KQ02GxsUZ2es/PzQembvtU8vq+cCwKQFE1i27Tt6j+r+XDHFyyENuGSqql4DtED6d8c3wA+KouxSFGWyoij5Xva+2LdsgnWZkkSvTB0jdPetdwntNZT7H87CZcxQtL4v98NjZs9pDKzeG521FeXrVACgWfeWLPv4B4bU7seyGT8wZN7wFxrTaFIJiohhafc3mfN2DWZsPE60IQGjSeX4rXDGNK7Az30bEhwZy9+nbj59g8+pQ8fWrPl9w9MLvkS7x31PuZ5N6LDxY6zy2GJKTALgwup/iQ2JoMPGj6kzrTuhRy+jZiMzmBWdO7flt0yybF06t2XtnxuzlYnMDoc2jbAtX4LIH9e8lO1nVedOb7H69/Upjzdu3E7JUnWoVr0ZO3buZenSz3Nw7168EuWK4VsoH3u27MuwbtaYebTv1ZYfNi/GPo89iYmJL2UfJr83nS6NetGv3VD8alaiVafU7uzfl/1J29pd+GrmYvqP6vWErTwfjVbDu18N58CyrUTcSm3oHFy5nXn1R7F5zi80Hv72S4lt27QpulKliP3NPPYuITCQhMOHcf3mG5w//JDEs2fhJb3v0ps+fBY9m/Rn6NsjqVSjIi06Nn0lcbNKfYU//1Wv7Ri4rFJVdauiKEWBFpi7WY8rilJeVdV7acspijIQcxaP2YVK0c3D12I7xnvhaL1Sv3VpvTww3gsnPZsaVXDq8y5hg8ZAmovko7LG4LvEHzuJdakS6IPvZnh+es17+tPkHfMb78qpK7jlS/2m5ebtTkTo/cc9lcT4RAK2HaF6s5qc2neSBh0a8tO07wE4uHE/g+cOe2r8RzwdbQlJk3ELjdbjmSYjB+DlaEd537xYaTX4uuShkJsDQRExeDnZUcrLhfx5zZMWGpbKx6ngCLJyCR0wsAe9+nQB4NjRUxZZE9983ty5G5Lp88pXKI1Op8swyD0ryvVqQpmu5jFq905ewyFfambMwceV2JBIi/KxIZHk8XHNtEzU1bts7DYXMHenFmpcGQDVaOLA9J9TntPur494cC3j+TBkcC/69esGQGDgCfIXSP3+4Zvfh+A7mR9/xYpl0el0HDt+OsO6zp3bMmLE5Ce8AhkZQ+9jlaa7WuftjjEs4/lvV9sP14FdCe41zuL8f1aDB/Wib9+uAAQePUn+/GmO39cnZUJCehUqlEGn03E8zfFHRKQO4P7xx1+ZNXPSc+/fy9S+V1ve6mYeM3j+xEU802TNPH08uBdi+fqXq1qO0hVLsubQL2h1WvK6ubDwjwUM7zSGoKu3GP3uBMDcnVqnca2nxu/cuz1vdzOPsTx78rxF1s7Tx5N7dzPW/6N9iovVs+XP7ZSvXIaNf2yxKLN13T9MnPP08W+1ezSlRtdGANw+eQ3nNO9DZ29XokMyHwLSfvYAwq+HsO/HzCcpndxwkLc/6ffU+I+Y7t1L6RIFc0bOeO9ehnLWVauSp3t3IkaOtDj3Y1etInaVuUvbacoUkm7dynLsR7J7LgCEp6mL7et2ULZymZSuV/HfIBm4ZMmNNCMQln6dqqoRqqr+oqpqDyAAeDOTMt+pqlpNVdVq6RtvAAnnLmBV0BdtPm/Q6bBv2hD9ngMWZaxKFsd14mjCx36IKTL1w0JxdAArKwA0zk5YVyxH4vWsZaC2rtjEeP/RjPcfTcC2Q9TvYG5YlPArSdzDWKLCLBsTtva2KePiNFoNVRtVI/iquQc5IiyCsrXMA9fLv1GRkBt3yKpy+fISFBFDcFQsiUYTW8/dpn5Jyyxiw1I+BN40XzQi4+K5eT+G/C55KOeTl4eGRCJizWNEjtwIo6h71sYLff/dSurWbk3d2q3ZuGE7Xd81N/uqV69MdPRDQkMyXkgBOnbK2H2WVWeX/8OaFpNZ02Iy17cepWSHugB4+hUj4WEccWGWM7niwqJIjNHj6VcMgJId6nJj21EAbN2SJ3koClVGtOXsqh0A6Gyt0dnZAJC/XnlMRhORlzPWx7eLl1OtejOqVW/G339vpUe3jgDUrFGF6AfRhIRkON0BeKdL20zHuJUqVYy8Ls4cPBSYrdfEcOYiVoV80fl6gZUOh5YNiN11yKKMdZlieE4dwd1hUzFGPMjW9h9n8ZLl1KjZgho1W7Dh761079YBgBo1/Hjw4OFjj79L57YW2TfAYrxc69bNuHDhygvZx5flz+Xr6d1sIL2bDWTP1n0pGZRyVcoQEx3L/XRjWNet+Ju2VTvTsda7DGk3glvXbjO80xgAXNzM48UURaHXyO6sW5mxaz2935f9SdemfejatA+7N++ldXI2rUKVcsQ8jCE8zPLLo1arxcXVGQCdTku9pnW4ctE8S75Akfwp5eo1qcOt67d5moMrt/Ol/0S+9J/I2W2BVG1vHrdX0K84hodxPLyXcUZls7GdsXW0Y8OMFRbL3QqndrWXbuRH+I3MG/6ZSbx4EW3+/Gi8zdd+20aNiD9gee3XFS+O45gxRE2ahBqVZr80GhQn8zVAV7QoVsWKkRCYvfceZP9c0Go1OOc1x9XqtNRpUotrF69nO+7LZFJe3c9/lWTgAEVRPIDFwNeqqqpph8EpitIIOKSqapyiKI5AMSAo8y09gdFE5LyFeHw1F0WrIebvzSRdu4nToN4knL+IYc9BXEYORLGzw22OeTbho9uFWBUpSN6Jo8Gkgkbh4fLfLGavZtWxnUfxa1iNhXsWk6CP55txC1PWzd/0OeP9R2Njb8P7SydjZW2FolE4e/A021aZvwEvef8b+kzrj0arJTE+kSUfLMpybJ1GwwfNKzPk1/2YTCptKxWiuIcTi/49R1kfFxqUzEedol4cvBZG+yXb0SgKoxuXx8Xe3EgZ3bg8g37Zi6pCGR8XOvg9ecB+ZrZu3UWz5g04eXoXcXoDQwdNSFm37+D/LGafvt3en47t+1o8v0qVivz827e4uDjTsmVjJk0eSc3qLXiSoJ0nKNioEl33fUaSPoHdY79LWddxy0zWtDBnsvZOXkbDBQPR2lpza9dJgnadBKBE29qU69UEgOubA7m4eg8Adu5OtFr1PqrJRGxIJDtHfvvU49+0eQctWjTi4vn9xOn19O8/JmVdYMA2i9mnHTu0oU3bHhm20aVzW37/Y32G5U9lNHFv5jfk+34WikZD9F/bSLhyE9dhPTGcvUTcrkO4jxuAYm+H9+fmmc1Jd8K4O2waAL4rP8O6SH4UezsK71xF2IefE7f/aLZ2YfOWnbRo0Yjz5/YRF6dnwMDULM6Rw1ssZp927Niatm0tu+nee68PrVs1JSnJSERkFAMGjOFFGT91DgHHTxEVFU3jdt0Z2q8HHdo0f2HbP7jjMLUb1eT3/asw6A3MGjMvZd2ybd/Ru1nmM0IfadquEe17twXg30372Lh6yxPLp7dvx0HqNq7N+oOrMegNTBs9K2Xdr9t/omvTPlhZW/HNrwvQ6bRotFoO7w3kr1XmL1Fd+nagZr1qJCUmEf3gIR+NmJmt+Bd2HadUw8pM+PcLEvTx/DF+Scq6kZtm86X/RJy9XWk8/G3CrgQzYqN5/w4s30bA6l3U6dWMEm9UwJiUhP5BLL+Pffr7LYXRyMMvvyTv/Pmg0WDYvBnjjRvk6dOHpIsXiT9wAIchQ1Ds7HCePh0AU2goUZMng06H61dfmZfFxfFg5kzzhIbnkJVzwcramgW/zEOn06LVagnYe5S/f36+8cDixVOyO5vn/4tMbiOyEliQyW1ExgN9kstogJ9UVf3sSdu+Vb1xjr2oY8Iccio0ACs+zvp9wV4GryGrn17oJZrnWufphV6iYaHPf4+o53GheDZuLfISlLt2Lsdix9z+N8diAzSolPXb27wMelNCjsZvalMgR+OPKfz0IS0vU/vLOduhtj945yvNVX2fv/sr+5wdcHvVfzIP99pm4FRV1T5h3W5gd/Lf84H5r2avhBBCCCGeTsbACSGEEELkMq9tBk4IIYQQudN/+Qa7r4pk4IQQQgghchnJwAkhhBAiV1H/k9MKXi3JwAkhhBBC5DKSgRNCCCFEriJj4CQDJ4QQQgiR60gGTgghhBC5imTgJAMnhBBCCJHrSAZOCCGEELnK6/lPQC1JBk4IIYQQIpeRDJwQQgghcrswFpYAACAASURBVBWT3AdOMnBCCCGEELmNZOCEEEIIkavILFRpwL0UY8Icciz28omFcyw2wIiPruRo/JBZzXI0/rbZ0TkaP/rzt3M0/pz5kTkaP3xgpRyL3aBS/xyLDbD75NIcjW+KuJOj8RMWzc3R+B3X2uVo/K3v2uZofPHqSQNOCCGEELmKZOBkDJwQQgghRK4jDTghhBBCiFxGulCFEEIIkavIjXwlAyeEEEIIketIBk4IIYQQuYrcyFcycEIIIYQQuY5k4IQQQgiRq8htRCQDJ4QQQgiR60gGTgghhBC5isxClQycEEIIIUSuIxk4IYQQQuQqJsnBSQZOCCGEECK3kQycEEIIIXIVmYUqDbhXrs+0AVRpWJV4fTzfjPuS62euZSgzeflUXDzzotVpOX/kHD98uASTyUThskUYMHMI1jZWGI0mlk5ZzJWTl7Mce/+Ne8zffR6TCdqVz0/fGkUzlNl28S6LD11BQaGkhyOz/StxJ1rP2A3HMakqSUaVdyoXpFOlgs90/O9M7UOFhlVI0Mfz07hvCDp7PUOZkcsn4+zpglar5XLAeX7+8AdUk4mq/rV4a1RnvIv7MqvtRG6ezvjaPYmmUFms63cGRUPS2f0kBW61WK8tUxvruu1RY6MASDy5G+PZ/QBYvfE22sLlzcuPbMJ4+egTY1X4pCdejStj1CdwbORiHpy+kaGMc8UiVPlyEFpba0J3nOD0lBXmWC55qL5kBPYFPIi7dY+AgV+R+CCW4kNbU6B9HQAUnRbHEr5sKjeIxKhYivZvQeHuDbH11JmP7dTuDPH23whn/p6LmFSVduV86VutSIYy2y6FsPjwNRQFSro7MrtFBQDeW3eMUyEP8Mvnwldv+T3x2J/Ef2pPSjSsRKI+gb/GLeHuWcvXxcrWmi6LRpC3kBeq0cTFHcfYPnc1AIVqlKblR93xKl2QP4Z/zbnNR7IVW1umCrbtB4JGQ+LBbST8sybTcrpKdbDrN4nY+aMw3boCgCZfYWy7DANbO1BV4j4dDUmJ2Yo/asYwajeqiUFvYOboeVw68/j37tyfPiFfQR96NO4HQPGyRRk/ZzR29nbcvR3K9GEziYuJy1b8J5kyawF79h/BNa8L61YtfmHbfWTf0dPM/f5XTCaV9k3r0a+Tv8X6O2HhfPTlT0RGx+DskIdZY/vj7e4KwOCpn3P64lX8ypTg66kjnym+tnQVbNsPAEVD4qHtJOx4TN1XrINd34nEfjY6te59CmPb5T2wsQfVRNyCMdmue4Ah0wdTo1F1DPp4PhvzGVfOXH1s2Wk/TsWnoDeDmgyxWN5hYHsGfjiAThW7EB0ZneXY2lJ+2LzVz3zuH/mHxF1/Zl6uQi3ser5P3JfjMN2+ClodNh0Go8lfHFQTCet/wHjtbJbjipfrtWnAKYpiBE5jPubrQA9VVaPSrD8BXFBV9Z00y5YB9YFowA44BExSVfX2s+yDX8Oq+BTxYXj9wZTwK8mAT4Ywqd34DOUWvDcPfYwegLGL36dWqzc4sGEv3Sf24o8vf+PE7mP4NaxK94m9mPbOlCzFNppU5uw8x7ftq+PlaEu3Xw5Sv5gnxdwcUsrcjIzlx4BrLOtSCydbKyLi4gHwyGPD8i61sNZpiEtIouPKfdQv5omng222jr98Az88i/gwucFwivqVoNvMAcxuNylDuSXvLcCQfPyDvx1LtVa1CNhwgOCLt1g0+FN6zBqYrbgAKArWDboS/9eXqDGR2L4zEeO1U6gRdy2KJV0+SuLu3yyWaQqXR+NZEMMvM80XtI5jMN48CwmGTEN5Na6MQ1Fv/qk9hrxVilNpbl/2+H+UoVzluX05MXYpkceuUPuXCXg2qkTYzpOUHP4W9/ae4fLXGygxrA0lhrfh3Ce/cWXR/7iy6H8AeDetQrFBLUmMisWxdH4Kd2/Ivy0/pPF4J2zaDMV48wzqg/CUWEaTypzdF/j27Sp4OdjSbfVh6hfxsKz/qFh+DLzBsk7Vk+s/IWVdz6qFMCSaWHvmmU59AEo0qIRbEW++bDCW/H7FaTOzD9+1m5qh3P7vN3H94Dm0Vlp6/zyJEg0qcXn3SR7cCeevcUt4Y0Cr7AdXNNh2GkLcN1NQo+5jP+5zks4cxhRyy7KcjR1W9d/CeONC6jKNBtseYzGsXIDpznWwdwSjMVvhazeqSf4ivnSp24NyVcowbvYoBrZ5L9Oy9VvWIy5Wb7Hsg/nj+PrjxZw4dIpWXVrQbUgXvp//U7b24Una+Tfl3Q5vMenjT1/YNh8xGk3MWvwz3308Fi+3vHQd8zENalamWMF8KWU++/F32jSqQ9vGb3D45Hm+Wr6WWWMHANC7fXMM8Qms2fzvs+2AosG242Divv3QXPdjFpjrPjSzum+TSd2PwbBqAaY7N56p7gGqN6yOb5F89KnXj9J+pRk+axgj3xqdadk3WtTBkK7+ATx83KnyZhVCb4dmL7iiwebtgei/m4b64D52I+aRdPYIali697KNLdZ1W2O8eTFlkVXNpgDoF4xCyeOMbf8P0X81HtScH3+W83uQNYqiuAKrgcLADaCzqqqR6cpUBr4FnAAjMFNV1dVP2/brNAZOr6pqZVVVywMRQMrVU1GUMoAWqKcoSp50zxuvqmoloBRwHNipKIr1s+xA9aY1+HftLgAuH79EHqc8uHjmzbijyY0XrU6LzkqX8mZRVbB3sAfA3tGeyLCILMc+ExJFARd78rvYY6XV0LyUN7uvWl4I/jp9m86VCuJkawWAq70NAFZaDdY686mSYDQ983u3crPqHPrTfBG+dvwy9o55cPZwyVDOkO74H8ULuRpM6LU7zxRb41UY9UEYanQ4mIwkXQpAW7Ri1p7r6oMx+DKoJkhKQA0PRluo3GPLezevStDvewGIPHYFKyd7bDwtj9PG0wWdgx2Rx8zf8oN+34tPi2oZnp92eVq+b9fm9l8HAHAs4UvksSsY9QmgmjDeuYK2aGWL8mdCH5jr3zm5/kt4s/vaPYsyf50JpnPF/GnqP/U0r1nAjTzW2qe/WE9QullVTvxpPq7bx69g62iPQ7r6TzQkcP3gOQCMiUbunL2Bk7c5ExN1O5zQC7dQn+EE1BQqieneXdT7oWBMIunYHnQVamUoZ9OqOwn/rEFNTM2waEtXwXTnhrnxBhD30HwuZEPd5nXYsmY7AGePncfR2QE3T9cM5ezsbekysCPLv1xlsbxA0fycOHQKgIC9R6nvXy9b8Z+mWuUKODs5vtBtPnLm8jUK+niS39sDKysdLd6swa7Dxy3KXAu6S82KZQCoUbE0uw6fSFlXq1JZ8thl78tiWppCJTCFp6n743vQVaiZoZyNfzcSdqxFTZNd05byS677G+YFz1D3ALWb1eKftTsAuHD8AnmcHHDN5Npva29L+wHt+eWr3zKsGzR1ED/M/CHb119NweTjj0g+/hP70JWrkaGcdfN3Sdj1l0V2UfEqgPHKaQDU2Aeo+lhzNk5kxwfADlVVSwA7kh+nFwf0VFW1HNAC+EJRlIwfjum8Tg24tA4CvmkedwVWAtuAtpk9QTX7HAgBWj5LUFdvN+7fSc2K3A8Jx9XLLdOyk1dMY+mxFRhi9RzaZP6gXjZjKT0m9ebbgz/Qc3Iffp67Msuxw2Li8XK0S3ns5WDLvZh4izI3o2IJioyj92+H6PnrQfbfSP2AD3mop/PKfbRcupve1YpkO/sGkNfLlYg791MeR4bcx8U744cYwKgVk/ns6FIMsQaObjqU7VjpKQ55UR+mfulRY6JQHDJeQHXF/bDtNgVr/4Ep603ht80NNp0V2OZBk79kps99xM4nL/o7qY1rw90I7HzyZixzN/Myth7OxIeZk8PxYVHYejhbPFdrZ41Xw0rc2WjuQoy+cAu3mqWxyusAOiu0hcpl2L+wmHi8HGxSHns52HAvNn39xxEUFUfvP47Qc/UR9t8I50Vy8nLlQZr6jw6JwMn78a+jrZM9pRpX4dr+M88dW+Pihikq9Xw2RYWjOFu+9zT5i6G4uGM8F2i53DMfoGI3ZAb247/AunGHbMf38HYn7E5YyuOwu/fw8HbPUG7AhL78tuQPDHrL7O71Szep1/wNABq2ro9XPs9s70NOCb0fhZd76vvcyy0vYfejLMqULFKAfw6ahyXsOHiMWL2BqOiYFxJf4+yGKTL1XDZF3X9M3XtkUve+oILd4OnYj/0C60btn2kf3L3duJfm2h9+Nxy3TOq/1/ierP3+T+LT1X/tZrUIDwnn2vmMQ06eRnFyRY1Kja0+yOT4fYuicXHHeMFyaIjpznV0ZWuARoOS1xNt/mIoLpl/Zr1qplf485zaAsuT/14OtEtfQFXVS6qqXk7++w4QBng8bcOvXQNOURQt0Bj4O83iLsBvwK+YG3NPcgwoncl2ByqKEqgoSuC1mBvPvZ8ze05jYPXe6KytKF/HPA6pWfeWLPv4B4bU7seyGT8wZN7w546TltGkEhQVy/edajDbvxIfbz/LQ4P525i3ox2/96jL+j5vsuHcHe6n+/B/0b7oOZNxNQais9ZRuk75lxrrEeP1U+h/mozh508wBZ3HulkvAExB5zHeOINt5wnYtOyP6e71Z/oW/qzSf+P2blaFiIBLJEbFAhBz+Q6Xv97AG79NxKbNe5jCbz/T/pnrP47v21djdosKfLzzHA/jsz/W50XQaDV0+moYh5dtJfLWvac/4XkpCjZv9yd+3Q+Z7QzaomUxrPiUuC/eR1exNtqSlV74LpQoVwzfQvnYs2VfhnWzxsyjfa+2/LB5MfZ57ElMzJl6eVnG9u3E0TOX6DxyGoFnLuLplheN5hV9PCkKNu36Eb/+CXW/8jPivkqu+xJZy9xnV9GyRfEp5MOBLQcsltvY2vDOsC6s+CzrX9izRVGwadOH+A0Zu+STAnZgehCO3chPsWnbz9y9bHr9pg+k/XxP/snOOB4vVVUfjdUJAbyeEqsGYA08fpBkstdmDBxglzzOzRc4D2wHUBSlGhCuqmqQoijBwI+Koriqqvq4/kkls4Wqqn4HfAfQqVDblI/c5j39afKOeRzBlVNXcMuX+q3LzdudiND7PE5ifCIB245QvVlNTu07SYMODflp2vcAHNy4n8Fzh2Xx0MHTwYbQh6njKkJjDHikyciYy9hSwccZK60GX2d7CuW1JygqjnLezhZlirs7cCw4kqYlvZ8at0GP5rzZtQkA109ewTVf6re3vN5uRIU8vhs4KT6Rk9sDqNy0Ouf3ncrysWZGjYlEcUzN9igOLqgxkZaFDLGpsc/uw6pu6rftpIDNJAVsBsC6RV9MUWEWT9VVrI+ufF0aNjYSeeIadvlSMw62Pq7o71rG0t+NxM4n8zKGew+w8XQhPizK/Dv8gcVzfdumdp8+cvPX3dz8dTfNPnTFqlYb1BjLDIengw2haTKuoTHxeORJX/82VPB+VP92FHLJY65/L8sMYHbU6NGUql0bAhB88hrOaerfyduV6JDITJ/31ux+3L8ewsEftzxz7LRMUfexckn9QqtxcUd9kOa9Z2OHxqcg9sNnA6A45cVu4Ifov/sYNeo+xitnUWPNg8aTzgWiyV8M46WTT4zZvldb3upmHq93/sRFPNNkzTx9PLgXYpnhLFe1HKUrlmTNoV/Q6rTkdXNh4R8LGN5pDEFXbzH63QmAuTu1TuOM3b//VV5uLoSGp77PQ+9H4ulm2Tvk6ZaXzyeZR7XE6Q38c+AYTsnDRZ6X6cF9rPKmXnc1Lm4Z6967EPbDZgGgOObFrv8U9Es/QY0Kx3j1TMa6v/z061GbXq1p2bUFAJdOXsIjzbXf3ced++nqv2zVMpSsWILlB5ah1WlxcXNm3u9zWfTRt3gX8ObbrYsA81i4bzYvZESbUUTey/z9k5YaHYHikhpbcc7s+AtiN/iT5ON3wbb3JAzLZmG6fZWENA07u/dmY7r3bMNYcrO0n++ZURTlHyCzD8TJ6bajKory2E5wRVF8MPcG9lLVp38Lf50ycHpVVSsDhTA3wh6NgesKlFYU5QbmFq8T8KQ+Ej/MDcAs2bpiE+P9RzPefzQB2w5Rv4P5w6yEX0niHsYSFWb5BrS1t00ZF6fRaqjaqBrBV82DTSPCIihby5yNKv9GRUJuZP2NVM7bmaDIOIIfxJFoNLH1YggNilp2wzQs7kngLfOFNlKfwM3IOHyd7Qh9aMCQZB64G21I5HhwJIVd0w8VzNzulVuZ4T+eGf7jObEtgFrt6wNQ1K8E+odxPLhn2dCwsbdNGRen0Wqo0KgqIVeDs3ycj2MKvYni4oni5AYaLbqS1TFeS3cRtndK+VNbtBKmRxMcFAVszceruPuicfPFdPOcxVOTTv2L4ZeZ7GoyibtbAinY2TxGKW+V4iQ91Kd0iT4SHxZFUoyevFXM40kKdq5HyFZz90XItmMpz0+7HEDnaId77TLc3WrZ1WHtbt53xSEv2qKVSLpk2RVUzsuJoKg4gh/ozfV/OYQGRS0z9A2LehJ423w+RuoTuBkVi6+THc/jyMrtfOs/iW/9J3FhWyCV25uPK79fcQwP9cSkq3+AxmM7YeNoz+YZLy7jYAq6hMYjH4qrF2h16Kq8SdLpw6kFDHHETupG7PR+xE7vh/HGRfTffYzp1hWSzh9Fk68QWNmARoO2eHlMIUFPjfnn8vX0bjaQ3s0GsmfrPlp0NH+RK1elDDHRsdxPN4Z13Yq/aVu1Mx1rvcuQdiO4de02wzuNAcAlucGjKAq9RnZn3cq/yS3KlSjCzTuh3A65R2JiElv2HKFBDcsxmpEPHmJKzuws/WMTbzep+8Lim4Iuo3FPU/d+b5J0Js0MZkMcsVO6ETujP7Ez+mO8eRH90k/MdX/hGBqfwql1X6x8xskPj7Fh+f8Y2mIYQ1sM48DWgzTp0BiA0n6liXsYS0S6a///Vm7k3Wrd6VWnN2PbjyX4ejATOr/PjQs36OLXlV51etOrTm/u3Q3nvZbDs9R4AzDduozG3Qclr6f5+CvXxXguwPL4p/UibvYg4mYPwhR0KaXxhpW1+dgBbYlKYDJmnPyQQ0zKq/t5GlVVm6iqWj6Tn/VAaHLD7FEDLSyzbSiK4gRsBCarqpqlcUOvUwYOAFVV4xRFGQGsUxRlMdAZqJDc74yiKA2BD4Hv0z5PURQFGA74AM+UFji28yh+DauxcM9iEvTxfDNuYcq6+Zs+Z7z/aGzsbXh/6WSsrK1QNApnD55m2ypzuCXvf0Ofaf3RaLUkxiey5INFWY6t02h4v1FZhv4ZiElVaVsuP8XcHVl04DJlvZxpUMyTOoXcOXgznPbL96JVFEa9WQoXO2sO3QxnwZ4LmNu9Kj2rFqGEe/YHPJ/edYwKDf2Y+e9CEvQJLBv/Tcq6jzbNZ4b/eKztbRi29H10ycd/8eBZ/v15GwB+zWvQdVpfHFydGPHjRG6dv8EXPWdmLbhqImH3amzajTDfRuTcAdSIu1jVaoMp9CbG66ewqtzIPLHBZEI1xJKwPXnYgkaLbcdx5s0k6Inf+tMTuyhD/zmBV+PKND30OUn6eI6PWpKyruE/s9jVxDzz9uQHP1Lly8Hm24jsPEnoDvPA7UsL/6bGdyMo9G5D4m6HEzDwy5Tn5/OvTti/pzHGWXZh11g6CmtXB2xcIWHP75BgOYtNp9HwfoNSDF1/DJNJpW25fBRzc2DRoSuU9XSiQVFP6hRy42DQfdqvPIBWozCqbklc7MwTGfquCeB6RCz6RCPNf9jD1CZlqVMo4xieJ7m06wQlGlZm1L8LzLcRGZ/6ugzZNItv/Sfh5O1K/eHtuHclmMEbzXV7ePk2jq3eTb6KRem6ZDR2zvaUauxHo9Ed+LrZ+1kLbjJhWLMY+6EzzLdSOLQdU0gQ1v7dMAZdxnjmCbck0ceSsGsd9uMWgArGc4EZxko9zcEdh6ndqCa/71+FQW9g1ph5KeuWbfuO3s2e3CPTtF0j2vc2D8/9d9M+Nq5+MZnJR8ZPnUPA8VNERUXTuF13hvbrQYc2zV/ItnVaLZMGd2PI1M8xmky0a1KX4oV8+WbVOsqWKEzDmpUJOHORr5avRVEUqpQryeQh3VKe3+v9Ody4fZc4QzxNeo9j+ojevFElG8MqTCYMaxdjP3i6ue4P/2Ou+5bJdX/2KXW/ex32YxYA6jPVPcCRnQFUb1Sdn/b9SLzewGdjP09Zt2jL1wxtkfXelGwzmYhf9z12A6Ym30ZkB6bQW1g364rx9hXLxlw6ioMzdv2ngqpiir6P4dcvH1tWPNbfQC9gTvLv9ekLJE+M/AtYoapq5ve4yYTyLDO6ciNFUWJUVXVI83gDEAi0VFW1VprlWiAYc6ZtNqm3EbHHfBuRiU+7jUjaLtRXbfnEwjkVGoCRc3I2vf7l6JwdYLttdtbvzfQyNPsw80khr8qc+VnLCrws49968PRCL0mLtS/uvmzPYvfJpTka3xSRs+/9hEVzczR+x7VJORp/7TvPPlP3RXCY/1cWclUvzpTC776yz9lPbvzyzMemKIob8DtQELiJ+TYiEcnDtwarqtpfUZTuwE9A2pvs9VZV9UTGLaZ6bTJwaRtvyY/bJP85Pd1yI6l92b1f/p4JIYQQ4v8jVVXvY544mX55INA/+e9VwKr0ZZ7mtWnACSGEEOL/h9ej7/DJXqdJDEIIIYQQ/y9IBk4IIYQQucrrdze6jCQDJ4QQQgiRy0gGTgghhBC5iklGwUkGTgghhBAit5EMnBBCCCFyFcm/SQZOCCGEECLXkQycEEIIIXIVmYUqGTghhBBCiFxHMnBCCCGEyFVkFqpk4IQQQgghch1pwAkhhBBC5DLShfoShBvjci54XA7GBtQcTmsrBQvnaPx45XSOxlccHXM0fjhhORpf42iXY7H1pqgciw1giriTo/E1rvlyND6m17tLTXHOk9O78Eq93rVtJhk4IYQQQohcRjJwQgghhMhV5DYikoETQgghhMh1JAMnhBBCiFwlp8db/xdIBk4IIYQQIpeRDJwQQgghchUZAycZOCGEEEKIXEcycEIIIYTIVeRfaUkGTgghhBAi15EMnBBCCCFyFcm/SQZOCCGEECLXkQycEEIIIXIVGQMnGTghhBBCiFxHMnBCCCGEyFXkPnCSgRNCCCGEyHUkA/eKDZ8xlJqNamDQxzN39Hwun7ny2LKf/DiDfAW96dtkIAAfLZpMgWIFAHBwykNMdCwDmg/OcmxN4XJYN3gHNBqSTu8lKWCLxXpt2TpYv9kRNSYKgMQTOzGe2QeAVb0OaItUBEXBGHSOxF2/Zeu4H+k6tS8VGvqRoE/gx3FfE3T2eoYyo5ZPxtkzLxqtlssB5/n5w6WoJhNV/Wvz1qjO+BT3ZWbbidw8fTVbsfdfvM28DYcxqSpvVy9J3wYVLdbP33CYgGshABgSk4iIMbBvWjcu3LnPrHUHiTEkotUo9G9YkeaVimY5rt/HPfFpXAmjPoEjo5YQefpGhjJ5KxamxheD0dpacXfHSY5/uAKA8hM64tu8KqpJJf5+NIdHLsYQaq4fj9pl8JvRA42VlviIh+xq/8mTj/9qCPO2nTIff+XC9K1TKkOZredus2TveQBKejkzp10NAm7cY/72Uyllbtx/yJy3a9CoVL4svwaPdJrah3IN/UjUx7Ni3CJupat/K1trBiwag3shL0xGE6d3HGX93F8AcPV1p/u8ITi6OhH7IIZloxYSFRKRpbjaEpWxbtXHfO4H7iBxzzqL9Tq/Bli37IEp2ry9pEObSQrcCYBNr8loC5TAePMC8SvnZPuYHxn/8UjqNq6NQW9g6qhZXDh9KUOZ79YuxN3TjXhDPABD3xlN5P0oOvRsS+fe7TEZTcTF6flk/DyuX7qR5dj7jp5m7ve/YjKptG9aj36d/C3W3wkL56MvfyIyOgZnhzzMGtsfb3dXAAZP/ZzTF6/iV6YEX08d+czH/yRTZi1gz/4juOZ1Yd2qxS98+9oyVbBtPxA0GhIPbiPhnzWZltNVqoNdv0nEzh+F6Zb52qzJVxjbLsPA1g5UlbhPR0NSYrb3Ycj0wdRoVB2DPp7PxnzGlTOPv35N+3EqPgW9GdRkiMXyDgPbM/DDAXSq2IXoyOgsx9YWrYh18x6gaEg6sZvEAxss1usq1sO6cVdMDyMBSArcTtKJ3akFrO2wGzwX48VAErauyHJc8XK9Vg04RVHcgB3JD70BI3Av+XEzIBgYrqrq4uTyjsAJoIWqqpcVRbECjgH9VVU9nN34NRvVwLeIL93r9qZMlTKMnj2CoW1GZFq2Xsu6GOL0FstmDJ2Z8veQDwcR+zA268EVBetG7xK/9nPUh5HYdpuM8epJ1Ii7FsWSLgWQuPNXi2Uan2Jo8hXHsHIaADZd3keTvySm2xk/gJ6kQgM/PIv4MKnBcIr6laD7zIHMajcxQ7nF7y3AEGM+9iHfjqNaq9oEbNjPnYtBLBo8n56zBmUrLoDRZGL2+kMs7tccL2d7un29gfplClLMyyWlzPg2NVP+/nX/OS7cMX+Y21np+LhzPQq5OxMWHce7C/+mdklfnOxsnhrXp1ElHIt6s6nOWNyqFKfqnD7802pqhnJV5/QlcNxS7h+7wps/T/g/9s47vIri/dv3npJKQjpJQOmhQ0JooUmAUAURREDpSBWkozRFQAULIqggIgJiF36IgnSQFsBQpddQUkgjpJ0kp8z7xwnJOSQhJ0jL+53bi8vszDP7mdnZnX32mdk9+LauR+zOE5z7ciOnPjTfbKoOaU+tCd058uYKtK5OBM8bxJ5X5pMRlYi9p2sR7Rd8sPkES19pThlXR15dsYvnqvpR2Tuv3LWkNFYcOM/K/s/h6mhHUnomAA0rePPL0DYA3NFl0+XLLYRU8imy7fdSq1UQPhV9mdXqDSoEVaX3e6/xUbfp+ey2f/0HF8JPo9aqGfv929RsFciZ3cfpPq0fh9bt4dDavwkIqcULU15h1YTPixZWVNh1GULmt3MQKUk4jPwAw9kI9Qz1aAAAIABJREFURPxNKzPDvwfI/uObfMX1e3/HYGePpmFYsdt8l2atm/BspWd4oWlv6tSvxdR5kxjQeViBttNHv8vZE+et0jav28ba1b8D0LJdMybOGsPoVybapG00mnh/6fcsmzORMp7u9Jkwh1aNA6n8bJ4D/smKX+jSuikvtGnGoRNnWbRqLe9PHArAwO7tyczK5re//n6QpttEt05hvNKjK9PmfPzwd66ocOg5kowvZiCSE3Ga9CmGU4cwxd6wtrN3RPtcV4yR5/LSVCoc+k0k87sFmKKvgpMLGI3FrkLD0IaUrejPoBZDqB5UnTHvj2Zs1/EF2jbr0JTMdF2+dG8/L+q3rM+tm7eKJ64o2HUcQOb388zn/5DZGC4cQSREW5kZzhws1Dmza/USpuvnCsx7Usgfs/8fm0IVQiQKIQKFEIHAUuBTi+0ewEGgj4V9KjAVuHuXmAQceBDnDaBZuxC2/rYdgLNHz+LsWgoPH498dg5ODvQc2oPvPvu+0H216tKSHb/vsllb5VsRkRyPuJMAJiOGc/+grhxoY2mBotGCWgNqLajUiAzbn/7uEtiuIeHrdgNw5dhFnFycKO3tls/urvOm1qjRaDUgzBdqzOUobl2JzmdvC6duJPCMpwvlPF3QatS0r1eJ3WeuF2r/14krdAisCEB579KU9yoNgI+rEx7ODtzOcW6KomyHYCJ/3QtA4tFLaF2dcPCxbrODjxtaF0cSj5qf+CN/3Uu5DsEAGNLyBnKNk33usSj/YlNubvqHjKhEALIS798fp6KTeMbDmXLuzmjVKtrXLMfuC9bO+7pjV+kVXAlXRzsAPJwd8u1n29komlX2xVFb/Ge/uu0acGjdHnMbj13EycUZ13v6X5+ZzYXw0wAY9UZunL6Ku68nAL5Vy3HhwCkALoSfpm5YA5t0VeWqYEqKRdyOA6MB48n9aGrYVhbAdOUUIiv/DbU4tOrQgj9/NUe8/z16GhfXUnj5eNpcPj0tI/dvRydHhLD95nXq4hWe9fOhnK83Wq2GDi0bsevQMSubK9djaFy3BgCN6lZn16HjuXlN6tXE2TH/ufAwaRBYh9KuLo9k36ryAZjiYxCJt8BowHB0D5o6TfLZ2XfuS/b23xD6vOiaunp9TNGRZucNICMVRPFXX4W0a8L2tebYwblj53LGfvd8dg5ODnQf2p0fFuWf4Rj+znC+ee8bitH1AKj8K2NKuoVIjgeTEePpg2gCgm0v71sBxdkV45V/iycseeT8TzlwRdAHmAiUVRSl3N1EIcQvAIqiTAFGYHboHggvXy/iouNytxNiEvDy9cpnN3jyQH5Z9huZuqwC91O3cR1uxycTdTXKZm2llBsiNW+6SaTdRnHJ7zxpqtTHod872D0/AqWUeYAxxVzBeOMcjsM+xnH4R5iunUYkxdqsfRe3Mp4kRSfmbt+OTcLNt+Cb2LjVM1hw5Bsy03VEbDpYbK17iUvJwLe0c+52mdJOxKUUHMGMvp1G9O00GlX2y5f374149EYTz3jcP+J1F0dfDzIs2qyLScLRz3rgdvRzJyM6r28yYpJw9M1z7Ou81ZMuEYso370ppz4yR+NcKvtiV9qZ0LXTCdsylwo9m9+3HnGpmfi6OOZul3F1JC7V2im5lpTGtaQ0BqzaTb9vd7H/cv4+3nLmJh1rlcuXbgtuZTy4HZ2Qu307NhE33/wPMHdxdHWiTptgzu033ziizl4jsEMjAALbN8LRxQlnt1JF6iquHog7eX0gUpJQSuc/79S1GuM45mPs+0wsMP+/4OPrxS2Laz8uJg5vv/zXPsCsT6fx47ZveW38AKv0lwd25/fwnxk7YyQfzlhos/atxGTKeOUd5zKe7sQlJlvZBFR8hu3hRwDYEX6UdF0mySlpNms8zajcPDElx+dum5IT8vWvqlxlFDcvjGcirNN9/AGB48jZOE1eiF2bHg9UBy9fT+Itzv2EmAQ8Cxj7B0zuz9qv15Gls35ADGnXhITYBK6czb/kpCgUF3dEisXYn5qE4pLfeVRXb4Tj0Pex7/EGiuvd80XBLuxVsrf/mM/+SWN6jP+eVqQDByiK8gzgJ4Q4DPwC9LrHZCwwH5grhChw0Y2iKMMURYlQFCUiOv1mQSY2UblmZfzL+7Nv8/5CbVq/EFqs6JutGK+cQPfNVDK/exfTtTPYdRgMgOLmjcrDD93XU9Atm4LqmeqoylZ96PqWLOw/l4mNhqKx01Kjae1HqnUvW05coW3tCqhV1pdHfEoGM37ew7s9m6NSKY+tPv/O+5U/GrzBtXUHqDKoHQCKWo1H3Yrs6fsxf/eZR81xL1Kqku9/0jGaBNeT0ljetyXzXmzE7I3HSMnMzs2PT9VxKf4OIZXK/CcdW1CpVQxeNJZdK/8i8YbZ8Vn33ndUbVyTqRvnU7VJTW7HJGIyPZzh1XAuAt1Ho9AtnoTx0gnse4x+KPstLtNff5derQcwpNsoghrXo3PPDrl5v6xcxwshvVj03lJeGzfgPnspPhMH9+TIqQu8PHYWEafO4+Ppjkr1P3J7UBTsX3yNrPX5p89RqVFXqknm6o/JWPgmmrohqAPqPZJqVKpZCb/yfhzYfMAq3d7Bnt6je7H6k+8eiS6A4eIxdJ+PQ/f1NIxXT2Hf1bxMRdOgLcZLx60e/iVPD/9Ta+DuQy/MjhvAT8AK4BOL/A5ADFCoJyGEWAYsAwgtF5Yb5O42oCudXzEvGD534jw+/j6AeYrIy8+LhNgEq/3UCq5BtboB/Bj+HWqNGjdPNz799WPG95wEmG9sLTo2Z3inUcVqoEhLRnHJewpXSrkjUq2fwsnMi0gZTu1F29L8tKmuEoQx5grozRFBY+QpVH6VMEVdLFI3tF8HWvQxr5+KPHEZD/+8J193Xw+SYxMLK4ohS8/xbf8QGNaQM/tOFmpnCz6uTsTeyWvfrTsZ+Lg6F2i7+cRVpnaznmJJy8xmzMptjG4fTN1n77/+q8rAMCq9GgpA0okrOFm02dHPA13MbSt7XcxtnPzz+sbJzwNdAYvzr63bT8s1kzn98VoyYpLIup2GUZeFUZdF/MFzuNV8Fig4Murj4kCsRcTtVooOH4uIHEAZF0dql3VHq1ZR1s2Z8p6luJ6URu2cum09G0VogD9ate039pb92tMsp/+vnbiMu78XYF7f5e7rWehLCK98MJy4q7HsWrEpN+1O3G2WjTBflvZO9gR2aIwuJaPA8pbcG3G7NyIHgC4v2mSI2Ildh342te9+vDywOy++2gWA0yfOUsY/77zx8fMhPiYhX5n4nPEgI13H5nXbqB1Yg42/Wr9stGX9dqbOs239G0AZTzduJeQd51uJt/HxtI6++3i68+m0183auky2HziKayknmzWeZkzJiWjdvHO3VW5e1v1v74jK71mcxnwAgOLqjuOwmeiWzUEkJ2K8dBqRbl6iYDgTgapcZYwXThSp22XA83TsY3bAL5y4gLd/XsTNy8+LxHvG/prBNQioW5VVB1bmjP2l+fCX+Xz59hJ8n/FlyZYvAfNauC/+WswbXcZxO956LCkIkXrbIqIGiosHIvWecpbn/7Fd2LXuDYC6XBVUz1RDE9wWxc4B1BpEdhb6XT8XqfuokWvgZATuLn2AgYqiRAIbgLqKolQFUBTFH3gDaAR0UhSlbqF7KYD1qzYwtP0IhrYfwf7N+2n3UlsAatSvQXpqOklx1jewDd/9Sc8GvekT0o8xL47n5pWbuc4bQHCL+ty4fIOEAgb/+2GKjURx80Fx9QKVGk31hhiv3DMIOZfO/VNdORBTzjSpSElCXS4AFJX5ibRcQL6XHwpj13ebmd1pMrM7TebY1sOEdG8FQKWgquhSM7gTb+1E2js55K6LU6lV1G1dn5jLtk8VF0atcl5cT0whKikVvcHIlhNXeK7mM/nsrsYlk6LLpp6Fk6Y3GJnw3U6er1+FsDoVitS6tHIbW8OmsTVsGlF/RVChZwsAPOtXQZ+qIzPOus2ZccnoU3V41q8CQIWeLYjabJ7OKlUxL9pVtn0wKZfMxz1qyxG8GwWgqFWoHe3wrF+Z1IuFrw+s5e/O9aQ0opLT0RtNbDlzk+cCrKeIQ6v5EXHNfF7dzsjiWmIa5dzynNzNp2/QsVb+Y3Y/9ny3hQ86TeGDTlM4ufUwjbu3NLcxp/9T7ul/gC4Te+Ho4sRvs1dapTu7u6Ao5shn+1EvEv6LbVFoU9QlVJ5+KO4+oNagrtsMwznrqTLL5QTqGg0wxT14FP0uv6xcR5+wQfQJG8Tuv/byfE40rU79WqSlppEQZ+1EqtVq3DzM16BGo6ZFWFMunb8CwDMV86atW7Rtyo2rttevVtWKXIu+xc3YePR6A5v3HKZVI+v1r7fvpOZGM5f/uokX295/Sr4kYbp+AZW3P4pHGVBr0NRvieFfi2XMmRmkT3uV9HeHkP7uEIyR59Etm4PpxiUMZ4+g8i8PWntQqVBXqY0ptvC1s5b8sepPRnUYzagOozmwJZy2PcwPMtWDqpORmk5SnLUT9ed3G3mlQV8GNB3IxO4TiboaxZSX3yTyXCS9gvowoOlABjQdSHxMAq93HGOT8wZgir6CysMXxc3bPH7XaoLhwlErG6WUxfkfEIwp5wWHrPVL0C0eh+7z8WRv/wHDyb1PhfMmMfM/H4FTFCUAKCWEKGuR9i5mp2428CnwvhDipqIoE4AvFEVpKYqzijiHgzsP07h1Y9bsW0VWZhbzJ+S9cfX1lqU2fRKkdddQdqx/gOlTYSJ71w/Y9xgHioLh1H5EYjTapl0xxV7DeOUE2qDWqCsFgjAiMtPJ3vwtAMaLR1A9Wx2H/rMAgTHyNMYrxY+I/bvrKHVC6/P+35+Trcvi28lf5ua9vekjZneajL2TPaOXv4XWTouiUjgXfoq/v98KQFD7RvSZNQQXD1fGrpjK9bORLOx//09n3EWjVvFW1yaMXLEVk0nwQoOqVCnjzpdbj1KznBetaj4LmKNvHepVzHUUALb+G8nRq7EkZ2Sx4Yj5RYPZPZtT3b/odVIxO47j1yaQzuELMOiyOTz+q9y8dtveZ2vYNACOTP2WxguHo3awI2bnCWJ2mp3rutN741rZD2ESpN9M4MibKwBIvRhNzK6TtN85D0wmrvywmzvnbwLPFtx+lYq32gcy8sf95vbXK08Vb1e+/PsMNf3caBXgT9NKZQi/Ekf3r7ahUhTGt6mNm5P5Tduo5HRiU3QEly943ZYtnNp1jFqh9Xn370Vk67L5zqL/p276kA86TcHN14OOY3oQe+kmb22cD8DfqzZz4OedBDSpyQtTXkEIwaXDZ/n57QKmvArCZCL7j29wGDjd/BmFo7sQcTfRtumFKeoyxnMRaEI6oaneAGEygi6NrLVf5BZ3GDoblXdZsHPAccpSstctwXip6AiMJft2hNO8TQi/h/9Mpi6TWePfz837cdu39AkbhNZOyxc/LkCjUaNSqzm0N4L/W2P+3EOvwT1o3KIBBr2BlDupvP3Ge4VJ5UOjVjNtxKuMfOdTjCYT3do2p0r5snyxZj01q1YgtHEg/5w6z6JVa1EUhfq1Apg+8tXc8gPenEfkzRgyMrNoO3AS774xkGb1H+6yhsnvzOOfYydJTk6hTbe+jBrSjx5d2j+cnZtMZP62FKdRs82fETm4DVPsdew6vYrx+kWMpw4XXlaXTvau9ThNWgACjGci8q2Ts4XDO/+hYeuGfLtvBVm6TD6Z+Glu3pebP2dUh0c4ZS9MZG9ehUOfKebP6Bz/G5EQhfa5Hpiir2K8eBRNw3ZoAurnnP/pZP3xVdH7fcI8zWvTHhfKA/gh/1+gKMosIA1wBhyFEG9Z5NUFfsYceZsNNL3rsCmKsgFYK4RYVdi+LadQHzcbJ1R4UtIAvLHItqfCR8XiT21/u/BRsGHUk31Tq+v8gh24x8XEt4v3bb6HzUevPrnxrMUK26LSj4rwvx/8G3UPA5VH8b8L+DDJnF3wJ5keFy/9X/E/L/IwWTf84b54U1ycZ6x5fAuDgQEVejy2i31V5NrH2jZb+Z+NwAkhZt0n7yRQI2dz2z15XR9htSQSiUQikRSB6X80+GSJXAMnkUgkEolEUsL4n43ASSQSiUQiKZnI+JuMwEkkEolEIpGUOGQETiKRSCQSSYnCJGNwMgInkUgkEolEUtKQETiJRCKRSCQlCvlLDDICJ5FIJBKJRFLikA6cRCKRSCQSSQlDTqFKJBKJRCIpUcif0pIROIlEIpFIJJISh4zASSQSiUQiKVHIz4jICJxEIpFIJBJJiUNG4CQSiUQikZQo5GdEpAP3SNCZ9E9MO3XDxSemDZAkXJ+oftYvW56ofpym7BPVv/7+8Seqnywcnqz+zjtPTDvM/pknpg2Q/eX8J6qP6cneUB3eXvRE9Vv+PvOJ6uv/jXqi+pKCURTFA/gZqABEAi8LIW4XYusKnAHWCyFGF7VvOYUqkUgkEomkRGF6jP/+I28BO4QQVYEdOduFMQfYY+uOpQMnkUgkEolE8mh4AViV8/cqoFtBRoqiBANlgK227lhOoUokEolEIilRCFFi1sCVEULE5Pwdi9lJs0JRFBXwCdAXaGvrjqUDJ5FIJBKJRFIIiqIMA4ZZJC0TQiyzyN8O+BZQdLrlhhBCKIpSkOc5CtgkhLipKIrN9ZIOnEQikUgkkhLF4/wOXI6ztuw++YVGzRRFuaUoip8QIkZRFD8grgCzEKCFoiijgFKAnaIoaUKI+62Xkw6cRCKRSCQSySNiAzAAmJfz/9/vNRBCvHr3b0VRBgINinLeQL7EIJFIJBKJpIRRgt5CnQeEKYpyEfP6tnkAiqI0UBRl+X/ZsYzASSQSiUQikTwChBCJQJsC0iOA1wpIXwmstGXf0oGTSCQSiURSopC/xCCnUCUSiUQikUhKHNKBk0gkEolEIilhyClUiUQikUgkJYrH+RmRpxUZgZNIJBKJRCIpYcgInEQikUgkkhJFCfoprUeGjMBJJBKJRCKRlDBkBO4xM2HOGEJaNyFLl8mc8fM4/+/FfDZf/rYQzzIeZGVmAzC29yRuJyYT2Lgu42ePpnKNyswcOZtdG/8ulrZdo0a4jB4NajW6jRvJ+OEHq3ynnj1x7NwZYTRiSk4m5cMPMd26BUCpYcOwDwkBIG31arJ27XqQ5jNk1lDqhzYgS5fF55MWcuXUlXw2M1fNwt3HHZVGzdnDp/l65leYTCYq1KjA8PdH4eDkQNzNOBaO/QRdms5mbU29hjj2Hw0qNdm7NpK14UerfLu2XbAP6wYmEyJTR8byTzBFXQO1Gqdhk1FXqApqNdl7t5L1+w+FqNyflu/2o3zrQAy6LLZPWEb8qch8Nk2m9KR6j+bYl3bmq+p5nwkKHNqRWr1bYTIa0SWmsmPSMlKjEm3WdmoeTJnpI0Cl4s5vm0n6+lerfMcGtfGZOhz7ahWJnjiPtC37cvO8Jg6m1HMNAUhc8iOpf+0pZsvN9J81hMDQYLJ1WSydtJjIAvr/zVUzcfNxR61Rc+7wWb6duQxhMn9Os93ATrTr1xGTycSxnUf48YPVNunaN2lI6XGjUdQq0jdsIu07674v1fslnLp2AqMRY/Idkt/7CGOs+dxXl/HBbeok1GW8QQgSJ0zNzSsOXd8ZQLXQQPS6bH6ZtITo05FW+VoHO179chye5X0QRsGZHUfYPP8nABq/2paQfmEIk4ms9EzWTV1O3KUom7XV1evj0H0oKCr0B7eRveO3Au00dZviOHgq6Z+Mx3TjEgAqvwo49Hod7J1AmMhYMAEM+mK1XV2jPg7dh4FKhT58K9nbC9Gv1xTHIdNI/2hcnr5/BRx6jQYHRxCCjI/HF1v/fsx4fwF79h/Gw92N9WuWPrT93ku7Wf2pHFoPvS6bPyd9RWwB136ryT2p070FDqWd+ajmkNx0V39PuiwYgYOrE4pKxa75P3F51wmbtTX1GuI4MGfs27mRrN8LGPvaW4x9y8xjn7Z5Wxy69Mq1Uz1bibS3hmG8drn4B+Ah8xA+sFvieWodOEVRjMC/mOt4FhgHbMzJ9gWMQHzOdiNAZ2F/FegnhEi22N9x4JwQoreiKIOAsTlZNYHzOfvbDJzD/DMWo3PKDQMm5NimABOEEHl3tmIQ0roxz1QsR89mr1Krfk2mfDCeIc+PKtD2ndff49zJ81Zpt6LimDNuHq+M6FVgmfuiUuEydizJkyZhjI/HY+lSsvbvx3jtWq6J/uJFMoYPh6wsHLt2xWX4cO7Mno1dkyZoAgJIfO010GrxWLiQ7EOHEBkZxapC/dBg/Cr68/pzwwkIqsawuSN5q9vkfHYfvz4/1zGbvPQtQjo3Y/8fexk1fwwr31vBmUOnaf1yW7oN786Pn3xvm7iiwnHQWNLfn4wpMR6X95aiP3LA7KDlkL1/B9nb/wBAE9wUx36jSJ/3JtrGrUCjJfXNIWBnj+vHK9Hv34EpoXg38fKh9XCr6Mt3LSZSJqgyrd4fyK9dZ+Wzu7rtKCdXbqPfno+t0uNPRfJz55kYMrOp3a8Nzab3YfOoz20TV6ko8/br3Bw8Df2tBMr/+hlpOw+Rffl6rok+Jo7YqZ/gPriHVVHn5xriULMykS++jmKn5ZnVH5K+JwJTevH6PzC0Pr4V/Znw3CiqBAUweO5w3u72Zj67Ra9/nNv/45ZOoUnnpoT/sY+aIbVpENaItzqOx5BtwNWztM1td5s4loSxkzHGxeOzYgmZew9giLTo+wuXSB80EpGVhfOLXXF9fRi3Z84BwP3tt0hd+T1Z/xxBcXQAU/Gnbqq1CsSroi8ftRrPs0FVePG9IXzRbWY+uz1f/8mV8DOotWqGfj+Daq3qcX73CY7/vp9D328HoEbbYJ6f2Y8VA+bZJq6ocHhpBBlLZiKSE3GasADDqUOYbt2wtrN3RPtcF4yR5/LSVCoc+k0gc80CTNGR4OQCRmPxGq+ocOg5kowvZpj1J31q1o8tSL9rAfoTyfxuAaboqw+mXwTdOoXxSo+uTJvzcdHGD0jl0Hp4VPRlyXMT8Q+qQoe5g1jZ7Z18dhe2HyNi1TZG7v7EKr35mG6c/fMgR9fswKtqWXp9O5kvmo+zTVxR4Th4LOnv5Yx9HyxFH1HE2Nd/FOkfvIl+33b0+8znneqZijhPmvNUOG8SM0/zFKpOCBEohKgNZAO9crYDgaXAp3e3hRDZ99gnAa/f3ZGiKDUANeYfi3UWQnxrsa9oIDRn2+q3xxRFeR4YDjQXQlQHRgA/KIri+yANatm+GZt+2wLA6aNnKFW6FJ4+HjaXj7kZy6WzVxAPcAPRVq+OMSoKY0wMGAxk7tyJfbNmVjb648chK8v895kzqLy9AdCUL4/+xAnzwJmZieHyZewaNSp2HRqFNWb3WnPk7sKx8zi7OuPu457P7u7NW61Ro9FqIGetg19Ff84cOg3Aib3HadIxxGZtdZXqmGKjMcXFgNFAdvhOtA2s248uzyFR7B1ydUGYt1UqFDt7hEGP0BXPeQGo1C6Ys2vNvv+tY5exd3XGycctn92tY5fJiEvOlx4VfhZDTlQ29uglnH1tP3cc6gagvx6N/mYs6A2kbvqbUm2aWNkYouLIuhBp0W4zdpWfRRdxCowmhC6LrPNXcW4RbLP2XYLDGrE3p/8vHbuAk6szbjb0/921Lm37dmDDl+swZBsASEm8Y5OuXc3qGG5GYYw2n/sZ23fi0LKplU320eOInHM/+/QZ1D45536F8qBWk/XPEQCELjPXrjjUahfMkXV7Abh+7BKOLk64eFv3vT4zmyvhZwAw6o1Enb5KaV9PALIsIs12Tvb5+uh+qMpXxZQQg0i8BUYDhmN70NRpnM/OvtOrZO9Yi7CIbqmrBWGKjjQ7bwAZqSCKF/tQlQ/AFG+hf3QPmjpN8tnZd+5L9vbfEHoL/er1c/SvPrB+UTQIrENpV5eHus97CQgL5uRac/9HH7uEg6sTpQq49qOPXSKtgGtfCIF9KUcA7F0cSYu7bbO2ukp1TLcsxr4DO9E2tHXsy8OuWRv0Bx5s5uVRIB7jf08rT7MDZ8leoEox7MOBshbbfYDvgK3AC8XYz5vAZCFEAoAQ4iiwCgvnsDh4+3oTFx2fux0XHY+3r3eBtjM+fZPV25YzaFy/B5HKh8rbG1N8nrYpPh61d8HaAI6dO5N9+DBAnsNmb49SujTaoCDUPj7FroOHrycJFu1PjE3Eo4xngbYzV8/i26PfoUvXEb7pAAA3Ll6nUTvzjadp52Z4+XnZrK1y98KUGJe7bUqMR+Wev7xdWDdcFq7B8ZXh6FYtBkB/6G9EViauS9biuvgnsv78BZGearP2XZx93UmLzpvyTItJopRvfgfGFmr1fo5ru4sxhVLGC31M3rE3xCagKeTY38tdh01xsEft5opT47po/Ao/dwrD3deTJIv2J8Um4l6mYCf0rdVvs/ToSnTpOg5tCgfAt6I/1RrVZPb6+cz8eS6V6to2JKi8vTDG5fW9MS7hvue+U5dOZIWbz33Ns+UQaWl4fPAu3qu+wnX0cFAVf9h0LePBHYu234lNwvU+DriDqxM12tTn0v5TuWkh/cKY8vdCOr31Cr/PWmWztqq0J6bbCbnbpuRElNLWfa8qVxnFzRvjmQjrdJ+yIMBxxLs4TVyIXevuNuvm7sPNE1OyxdiTnFCIvlcB+v6AwHHkbJwmL8SujXV0uKTg4utBikX/p8Qm4VLG9mt/78J11H6xOWMOLqbXyilsebsY/e9h49jXrhsun63B8dXh6FYuzpevDWlF9oEdNutKHj1PvQOnKIoG6Ih5etQWezXm3x3bYJHcC/gJ+BGzM2crtYAj96RF5KTfqztMUZQIRVEi4jKiiyGRn3dGz6Vvm8GM6DaGwMZ16fhSu/+0v+LiEBaGplo10n8yr7/Jjogg+9AhPL74gtIzZ6I/fRpMj3YFwpz+sxjScABaOy11mtYF4IvJi+jQrxMf/bkAR2dHDHrDQ9fN3rae1HF90f3yWDMDAAAgAElEQVSwDIcXzc6zunINMJlIGfUSKWNfwb5zT1Q+fg9d21aqvdgMn7qVOLp0Y9HGD4GM/UdJ+zuCZ3/8BL9P3iTz+DkwPtr+n9d/NqMaDkZrp6VW0zqAOSJXyq0Ub3d7kx/eX8UbX0566LqO7dtiVz2A1O9/Nieo1djVq8OdxUuJHzwSjb8fTp3bP3RdS1RqFa8sGsOBlVtIupF34w3/bhsfPjeOv+b9QJsxLz48QUXBvtsQsn7/pqDKoK5Uk8zvPiFj0Zto6oagrlr34Wnf1X/xNbLW30d/9cdkLMzRD6j3cPVLADW7hnDytz0sbjKGnwd+SNeFo0BRHqpG9tb1pI7NGfu6WwcO1FVqQHYWphuRD1Xzv2BCPLZ/TytP7Ro4wDFn3RqYI3AFXN0F2pfFvGZuG4CiKA2ABCHEdUVRooAViqJ4CCGSHmZlhRDLgGUATfxb5fZ4j4HdeOHV5wE4e/wcPv55T/4+/t7Ex8ZzL/Gx5qfljHQdW/9vBzWDavDXb1v/U/1M8fG5U6JgjsgZ4/Nr2wUH49y3L0ljx4LFVEb6mjWkr1kDgOuMGRhu3MhXtiA69O9EWG+zA3rp5EW8/L0xdw94+nqSdKvwRfj6LD3/bD1Ew3aNObHvOFGXo5jdz7xuxK+iP8GtG9hUBwDT7QRUnnlRQ5Wnt1VUIp92+E6chpjXmNg1a4P+xGEwGhEpyRgunEZdqZp5SqII6gxoS60+oQDEnbhCKf+8yEMpPw/SYm2fCgF4pnktGozpyrqe72HKtt2BNdxKQGsRNdP4emG4z7G/l6SvfiLpK7ND7/fxFLIjbVtAH9a/I6G9wwC4cvISHhbt9/D15Patwi9DfZaeI1sP06BdI07tO0FSTAL/bD4IwOUTFxEmgYuHK6lJKfetgyk+wSpirPbxKvDct29YH5eBr5IwanzuuW+Mi0d/8bJ5+hXQ7dmPXe0a8MdfRbY9pF8Yjfq0BuDmiSuUtmh7aV8PUmILbnv3D4aScDWWfSsK1jjxRzgvzh1SYF5BmO4korWIuKjcPBF3LPre3hGVb3mcRr8PgOLijuNrM9Atn4tITsB4+RQi3XyMDWciUJWrjPHiSdv1kxPRulmMPW5e+fX9nsVpzAdmfVd3HIfNRLdsDiI5EeOl0/n1L9gefX5SBPcPI6i3+dqPPnkFV4v+d/X1IPWW7dd+YK9W/Nh/PgBRRy+hsdfi5OFCRuL9z30AU1Ixx74DO3F6zXp9nbZpKNn7d9pcX8nj4WmOwOks1riNyVnnVqQ9UB5QyJvm7ANUVxQlErgMuAK2xuHPAPcu9gkGTttYnrUr19M/7DX6h73G35v30ekl89N7rfo1SUtJJzHOehBXq9WU9jAvzlZr1DRrG8KVc1dtlSsU/fnzqMuVQ+XrCxoNDq1bk3XggJWNpkoVXCZMIHnaNESyxToMlQrF1dVsU6kS2sqVyY6wnuoojM2rNzGx0zgmdhrH4a2HaNXDPKAFBFUjIzWD2/es5XBwcshdF6dSqwhu3YCoyzcBKJ2zaF1RFHqOeZkt32+2uf3Gy+dQ+ZZF5e0Lag12Ia3RH7Fuv8o3b9ZdE9QEY6zZSTEl3EJTK8icYe+ApkoNjNHXsYV/V23npw7T+anDdK5sOUKNHs0BKBNUmezUjALXuhWGV63yhM4bzJ+DF6CzYeC2JPPfC2jL+6MtWwa0Glw6PUfazoO2FVapULmZ1wjZB1TAPqAi6fvvDUwXzLbVfzGt0wSmdZpAxNZDtMjp/ypBAehSM0i+p//tnRxy18Wp1CoCWwcTndP/EVsPUzPEHI3zreiPRqsp0nkDyD57Ds0zZVH7mc99p7atydwbbmWjDaiC25QJJE6egel2Xp/oz55HVaoUKjfzuWcfHITh6jVsIfy7bXzWaSqfdZrK6a0RBHdvAcCzQVXITM0gNT5/37eb+DIOLo78Mdv67VrPCnnLbqu3DiIhMtamOgCYrl9E5eWP4lEG1Bo0QS0xnDqcZ5CZQfqMV0mf/Rrps1/DeO08uuVzMd24hOHcUVR+FUBrDyoV6sq187/8UKT+BVTeFvr1W2L495C1/rRXSX93COnvDsEYeR7dsjlm/bNHUPmXz9OvUhtTrG3X3pPmyOptLO80jeWdpnFhawR1e5j73z+oClmpugLXuhVGSnQiFZvVBsCzij8ae61NzhsUMPY1bY0+ooixL8biAU1RsAtphf7A0+XACSEe27+nlac5AvdACCEyFEV5A1ivKMpS4GWgjhAiGkBRlFBgJvC1Dbv7EJivKEoHIUSioiiBwEAg/wpgGziw4yBN2zTmtwPfk6nLYu74+bl5q7ctp3/Ya2jttHz2w4doNBpUahX/7D3C79//CUCNetWY/81cXNxK0TwshKGTBvJK6CDbxI1GUj/7DPePPgKVisy//sIYGYnzoEEYzp8n68ABSo0cieLoSOl33wXAdOsWydOng0aDx6JF5rSMDO68994DvQl2ZGcE9UOD+XLPVzmfEVmUm/fJpoVM7DQOeycHpi6fgcZOi0qlcCr8X7asMUcimndtScf+nQA4uDmcnb9st13cZEK3chHOUz8ElYrs3X9huhmJw0uDMFw9j+HIAezbvYimTjAYDJjSU8lYYn7LL2vrepxGvInLR98CkP33ZkzX83/+oigidx6nfOt69N/3CXpdNjsmLsvN6735PX7qMB2AptN6U61bU7SOdgw6vIjTP+7m8KfraD69D1onBzoufQOA1OhENg5eYJu40UTcnCWU+2YuqNTcWbuV7EvX8RzTj8xTF0jfdQiH2gH4fz4TtWspSoU2xjC6L5FdRqBo1Dy7xvyGniktg5gpHz3QFOrxnUcIDA3m0z1LyNJl8dWkvHU2729awLROE7B3smfi8qlo7bQoKhVnwv9l+xrziz+7f9nB8I9GM3/rZxj0epZMXFSYVL62J3+yGK+F80GlJv3PvzBcjcRl6ED0Zy+Que8ArqOHozg54PGeOcJrvBVH0pQZYDJxZ/FSvBZ/DIpC9rkLpP9e/Knrc7uOUS00kCl/LyRbl8Wvk7/KzRu76QM+6zSV0r4etBnzInGXonhjozkadmDVVv75eRdNB7SjarM6GA0GdHfS+WXiEtvFTSYy1y7FacS75s94HNqOKfY6dh1fxXj9IsbThwsvq0sne/d6nCYsAATGMxH51qnZpP/bUpxGzTbrH9xm1u+Uo3+qCP1d63GatAAED6ZfBJPfmcc/x06SnJxCm259GTWkHz26PNxp8ks7j1M5NJBRexbkfkbkLq9tep/lnaYB0HpqH2q9YL72xxxczPGfdrF34Tq2z/2eTvNeo9GQDiDgj4lfFSaVH5MJ3YpFOE+7Z+zrOQjDlZyxr33O2GfMGfu+zHvDWVOjLqbEeJtmHCSPF+Vp9S4VRUkTQpQqJG8WkCaE+Lgwe0VR/sC8Xq2jEKKJRboaiAKChBAxOZG5BndfVFAUZSDWnxEZifkTJgJIBSYKIe77ESzLKdTHze8BT0rZzMirrk9Uf0XT4r9c8DD5bl/Zoo0eIe2cbZ8WfRS8q3N4ovof+dv2ZuqjYFFMmSemDTCjW9oT1X+Qz6s8TBzettGhf0R8GJz/szCPk9eb/Le11/8Vt593PdxFeUUQWi7ssZ1wu25ue6xts5WnNgJXmPOWkzerKHshRJecP9+9J92I+Ttyd7cr3JO/Elhpsb0EKMbjrkQikUgkEsmj5al14CQSiUQikUgK4mn+Ptvj4ml+iUEikUgkEolEUgAyAieRSCQSiaREYXpK1+8/TmQETiKRSCQSiaSEIR04iUQikUgkkhKGnEKVSCQSiURSopATqDICJ5FIJBKJRFLikBE4iUQikUgkJYqn+UfmHxcyAieRSCQSiURSwpAROIlEIpFIJCUKGYGTETiJRCKRSCSSEoeMwEkkEolEIilRCPkhXxmBk0gkEolEIilpyAjcI2Bj0JN7Mhh+qvQT0wZ4z87wRPVHHXB7ovpDsvVPVH+Gyu6J6k81mZ6o/vwY7yemPb1CzBPTBnhpreMT1X/StPx95hPVn3JkzhPV7x884Ynq//iY9eQaOBmBk0gkEolEIilxyAicRCKRSCSSEoWQETgZgZNIJBKJRCIpacgInEQikUgkkhKFfAtVRuAkEolEIpFIShwyAieRSCQSiaREId9ClRE4iUQikUgkkhKHdOAkEolEIpFIShhyClUikUgkEkmJQr7EICNwEolEIpFIJCUOGYGTSCQSiURSopAvMcgInEQikUgkEkmJQ0bgJBKJRCKRlCjkT2nJCJxEIpFIJBJJiUNG4CQSiUQikZQoTPItVOnAPU60wY1wHjYGVCoyt24k89cfrPLtO3bF4fkXwWRE6HSkL/4Y441raAKq4zxmUo6Vgu6HlWSH732gOgyeNZSg0AZk67L4fNJCrp66ks9m+qpZuPu4o9aoOXv4NMtnfoXJZKJCzYoMe28UWnstJqORr2cs5dKJizZrO7cIpsyM4ShqFcm/bCFx2a9W+Y4Na+M7fRj21SoSNX4eqZv35+b5TBlMqVYNQaWQvv8Yt+Z89UDt7z9rCIGhwWTrslg6aTGRBbT/zVUzcctp/7nDZ/l25jKEyQRAu4GdaNevIyaTiWM7j/DjB6vvq+cRWo+AuQNR1Cqiv9/JtcW/W+Urdhpqff46LnUrob+dyqlhn5F5Iz43376sJ032LuDqR79yfcmfADwztCP+fdsAEP39Tm4s22Rz+wfNGkr90GCydFl8MemzQvr/ndz2nz18hm8s+n/oeyOxs9diNJpYXsz+d20VRLlZQ0GtIvHHbdz6cq1VfqnGNSn3zms41qjA1dc/JnnTAQDsynpT6eupoFJQNBriV24kYc1mm3Ut6fHOQGqGBpGty+L7SUu4efqqVb7WwY7BX47Hq3wZTEYTp3Yc4Y/5PwLw4sz+VA2pZa6Tgx2lvErzVt3BNunaNWqEy+jRoFaj27iRjB+sr32nnj1x7NwZYTRiSk4m5cMPMd26ZT4uw4ZhHxICQNrq1WTt2vVAbR/57ggatW5Ipi6LTyZ8wqVTlwu1nbXiHfye9WV425FW6T2GdWfYzKH0rNuLlNspJUq/3az+VA6th16XzZ+TviL2VGQ+m1aTe1KnewscSjvzUc0huemu/p50WTACB1cnFJWKXfN/4vKuE8XSL4wZ7y9gz/7DeLi7sX7N0oeyz4IYMOu13LFvyaRFBY59b61622LsO8OKnLHvjc8n4VepLADOrs6kp6QztdP4R1ZXiW0U6cApimIE/gUUwAiMFkIcUBSlAvCnEKJ2IeXWA75CiCb3pE8CXgMyAT2wWAixWlGU3cAkIUSEoigVga3AaGAv8DVQN6cOyUAHIURaEfXVAGeBAUKIjHvSrwL9hBDJOWVqAYuBspinlVcDc4UQQlGUgcBHQBRgB3wqhPi6qOOWD5UK55HjSJkxEVNCPKU//Qr9wf0Yb1zLNcnevZ2svzYAoG3cFKehr5P69hQM165yZ+xwMBlR3D1w+3wF2YcOgMlYrCoEhQbjV9GfMc8Np2pQNYbNHcnUbpPz2S14fT66NB0Ak5a+RUjnZuz/Yy/9pg7k189+5NjuowSFBtNv6kDe6T3d5vb7zhrF9YHT0ccmUHHtQlJ3HiT70o1cE0N0HNFvLsBjSA+roo5BNXCsX5Mrz78OQPmfPsKpUR0yDv9brPYHhtbHt6I/E54bRZWgAAbPHc7b3d7MZ7fo9Y9z2z9u6RSadG5K+B/7qBlSmwZhjXir43gM2QZcPUsX0WaFavMGc+zl98iKTqThlg9I2BJB+oWoXBP/V1qjT04nvMlYynRrSpWZr3Bq2Ge5+QHv9idxx/Hcbefqz+Dftw3/dJiGyDYQ+NM0ErYeQRd5q8j2m/vfjzHPjaBqUABD545kWoH9/2Fu+ycufZMmnZtx4I+99J06gF8/+4njOf3fd+oAZvWeUaSu+VioeGbucC6+8g76mESq/fkxd7YdJvNiXv9nRyVwbcJn+Ax/0aqoPu4257tNQWQbUDk5UGP7Iu5sO4z+VpJt2jnUbBWId0Vf5rQaS4Wgqrz83hAWdMtf/51f/8nF8NOotWpGfz+TGq0CObv7OP83J89ZbzmgA+VqVbC57S5jx5I8aRLG+Hg8li4la/9+jNfyrn39xYtkDB8OWVk4du2Ky/Dh3Jk9G7smTdAEBJD42mug1eKxcCHZhw4hMjKK1faGoQ0pW9GfQS2GUD2oOmPeH83YrgXfgJt1aEpmui5furefF/Vb1ufWzaLPtadNv3JoPTwq+rLkuYn4B1Whw9xBrOz2Tj67C9uPEbFqGyN3f2KV3nxMN87+eZCja3bgVbUsvb6dzBfNxxW7HgXRrVMYr/ToyrQ5Hz+U/RVEYGgwvhX9GP/cSKoEBTBk7ghmdpuSz+6z1z+yGPvezB37Fo3Oq1vfGYPISEl/ZHW1FbkGzrY1cDohRKAQoh4wFfigqAKKorgBwUBpRVEqWaSPAMKARkKIQKANZqfMsmw5YDMwUQixBRgL3BJC1MlxFodgdvyKqm9tIBsYUUB6EvB6jp4jsAGYJ4SoBtQDmgKjLPb5c059WwHvK4pSpqhjcC+agBoYo6MwxcaAwUDWnp1omzS3shG6vEFZcXAk9/zMysp11hQ7O3jA0HHDsMbsXmt+er947DxOrs64+bjns7t7Aas1ajRaTe4HE4UQOJZyAsDJxZmkONtvoI51A8i+Fo3+RizoDaRs3INLmxArG31UHFnnI0GYrAsLgWKvRdFqUOy0KBoNhsRkm7XvEhzWiL057b907EKx29+2bwc2fLkOQ7YBgJTEO/fVc61fBd3VW2Rei0PojdxafwCvDg2tbLw7NCDml78BiPvjIO7N856HvDo2QHc9jvTzeU6Oc9WypBy9iEmXjTCauH3gDN6dG9vU/oZhjfg7t/8v4Gxj+8ntf3DK7X8nbhej/50Dq5IVGUv29VsIvYHbG/ZSul0jK5vsm3Hozl3L1/9Cb0DkHHPFTouierClu3XaNeTwuj0ARB67iKOLM67eblY2+sxsLoafBsCoN3Lj9FXcfD3y7Su4a1OObNifL70gtNWrY4yKwhhjvvYzd+7Evlkza93jx83XOaA/cwaVtzcAmvLl0Z84AUYjZGZiuHwZu0aN8mkURUi7JmxfuwOAc8fO4exaCo8C+t7ByYHuQ7vzw6Kf8uUNf2c437z3zQMNP09aPyAsmJNrzbMW0ccu4eDqRCkft3x20ccukRaXf2wRQmBfyhEAexdH0uJuF78ShdAgsA6lXV0e2v4Kwjz27QYebOyzpEnnZhzY8GAzQJKHS3FHQlfAljO3O/AH8BPQ2yJ9GjBSCJECIIRIEUKsssj3wxx5my6E2GCRlhuyEEKcF0Jk2VjfvUCVAtLDMUfbAF4B9gshtubsPwNz5O+tewsJIeKAy0B5G/VzUXl6YUqIy902JcSj9vTKZ2ffuRtuy3/AadAI0r/Ki8RoqtWg9JcrcfviW9K/WFDs6BuAp68nidF503NJsYl4lvEs0HbG6ll8c/Q7dOk6DuZMZX07ezn9pg1iafg39J8+iO/n33/60BKNryeGmITcbX1sAppCtO9Fd/wcGQdPUvXAGqoeWEP63iNkX75RdMF7cPf1JCk6MXc7KTYR9zL5b84Ab61+m6VHV6JL13FoUzgAvhX9qdaoJrPXz2fmz3OpVLegUysPB18PMi30sqITsfe1HjTt/TzIijLbCKMJQ2oGWg8X1E72VBj9Alc//s3KPu3cDdwaV0fjXgqVox1ebYNwKGvbcfTw9SQxOq8PEmMT8CikD6avnsXyo6vJtOj/lbOX02/aQJbk9v93NukCaH09ybbQ1sckovW1rd4AWj8vamz9jDqHvyF2ybpiR98ASpdxJ9miP5JjEyldgHN2F0dXJ2q3CebC/lNW6e5lvfB4xocLB04VUtIalbc3pvi8684UH486x0ErULdzZ7IPHwbIc9js7VFKl0YbFITax8cmXUu8fD2Jtzj+CTEJePrmH38GTO7P2q/XkaXLtEoPadeEhNgErpy9mq9MSdB38fUgxaLvU2KTcCmT34EpjL0L11H7xeaMObiYXiunsOXtVUUXeorw8PWwuvaTYhPxKHTse4elR1eRaTH23aV6o5rcSUgmNjLmkdbXFkxCPLZ/Tyu2OHCOiqIcVxTlHLAcmGNDmT7Ajzn/+gAoiuIKuAgh8k+857EK+FwIYXnXWgG8qShKuKIocxVFqWqDPoqiaICOmKdNLdPVmCN/dx3EWsARSxshxGWgVE6dLctWAioBlwrQG6YoSoSiKBGrrj/4yZ21cT3Jr71Cxrdf4dirf2664fxZ7owayJ3xI3Ds+Spo7R5Ywxbm9p/F0IYD0Nppqd20LgDt+3Zk5ZzljAgZwsrZyxn14ZhHWoe7aJ/1w77KM1xs0Z+LzfvhFFIPxwa1HqnmvP6zGdVwMFo7LbWa1gHMT6Wl3Erxdrc3+eH9Vbzx5aQi9vLgVJzck+tfbcSYYf2sknExisjPNxD083QCf5xG6qlIhNFUyF4enPf6z2JYw4Fo7LTUzml/u74dWTnnG0aGDGHl7G8Y+Zj6H0Afk8DZdmM53WIEni+FovEqYvr6P6JSqxiw6A32rNxM4o04q7zgLk05vukQwvTwB3aHsDA01aqR/pM5ApUdEUH2oUN4fPEFpWfORH/6NJgefn8DVKpZCb/yfhzYfMAq3d7Bnt6je7H6E9sd9pKofz9qdg3h5G97WNxkDD8P/JCuC0eBohRdsAQyr/+7jGo4yOrav0vTri1k9O0pwpaXGHQ504coihICrFYUpcB1bzk2ZYCqwL6cNWT6HPvrNmhtB/oqirIyJxKGEOJ4juPUDmgL/KMoSogQ4mwh+3BUFOXuoqG9wDf3pJfFvDZumw31uUsvRVGaA1nAcCFEvsd/IcQyYBlAYufn8o3spsQEVF55T84qL2+MiQn3muWSvWcHzq+PJ/1T63TjjWuITB3q8hUxXjpfZMU79O9Em97tALh88iKe/t6Ym58TkbmVWGhZfZaef7YeomG7xpzcd5znerRmxSzz8r/wjfsZOd/2G7ghNhGNX94Tt9bXC8N9tC1xadcU3fHziAzzU3n6nggcg2qgizhdZNmw/h0J7R0GwJWTl/Dwz4v6ePh6cvs+kRx9lp4jWw/ToF0jTu07QVJMAv9sPgjA5RMXESaBi4crqUkFL6bOjE3CwULP3t+TrFjrAHZWTBL2ZT3JiklCUavQuDihT0qldP0q+DzfmCozX0VT2hlMAlOWnpsrthDzwy5ifjBPhVae1pvM6MLb0L5/J9rmtP/SyUt4+uf1gaevF0lF9v/hnP4/QaseoXxr0f8j5o8utGy+fcUmYmehrfXzRB9rW/9b7edWErrz1ynVqFbuSw73o0W/doT0Mb/wcf3EZdws+sPN15M7sQUfu94fDCP+aiy7V+R/QaR+l6b8OnOFzXU2xcfnTomCOSJntIjI3cUuOBjnvn1JGjsW9HmrRNLXrCF9zRoAXGfMwHDDtuhzlwHP07FPBwAunLiAt8Xx9/LzIjHWevypGVyDgLpVWXVgJWqNGjfP0nz4y3y+fHsJvs/4smTLl4B5LdoXfy3mjS7juB1f+ITMk9YP7h9GUO9QAKJPXsHVou9dfT1IvWX7NGhgr1b82H8+AFFHL6Gx1+Lk4UJGYvFepHichPXvSOucsf/KyYtW176HrydJRY59hwhu14h/95lf1lCpVTTqEMK05yc+2orbiFwDV8y3UIUQ4YqieAGFx//hZcAduKqYn1BcgT5CiOmKoqQpilLpPlG4D4F+wK+KorwghDDk6KYB64B1iqKYgE7c9ULyk+twFpSuKIoTsAXzGrhFwBmgpaVhjsOYJoRIyWnDz0II2+9WBWC4cA512XKoyvhiSkzAvmVr0j6yDmaq/MtiijbPFmsbhmCKvmlOL+NrnoIxGVF5l0Fd7llMcbE26W5evYnNq803ofqtG9BxQGf2b9hD1aBqZKRmkHzPWg4HJwccSjmSHHcblVpF/dYNOPvPGQBuxyVRq0ltTh88RZ1mdYmJjLa5/bp/L2BXwR9tuTLobyXi2rklURM+tKmsPjoe95fbg1oFioJTwzokrVpvU9ltq/9i2+q/AAhsHUy7AZ0I37CPKkEB6Apov72TA44W7Q9sHcz5nPZHbD1MzZA6nAk/hW9FfzRaTaHOG0Dqscs4VfLF4VlvsmKSKNOtKadHLrKySdgSgd/Lz5EScRGfLk24vc/slB55YVauTcVJL2FMz+Tmii0AaL1c0SekYF/WE+9OjYjoVPiLBFtWb2JLbv8H02FAZ/Zv2EvVoAAyUtOL7P/g/9fefcdHVWYNHP+dmSQk9E5oKkVBFKWJgKwrTRALKJYFLNhg7aAUwbUXrCjYsbxYUde1i4AUC4IgTZpSREB6MwLpyZz3jztJJj3B3DsZOF8/fJy5986cJ1PPnKfc7h345SenTft376dVp5NZ8+MqTj7jFHaW4vlP/Hk9FY6rT0zjuqTv3E+NC/7BplueKv6GON2vGQkH0ZQ0/NUqUfm0E9n96mfF3xD4/q2ZfP/WTABadWvLmVf1Zuln8zmu7fGkHEziwJ78453OveMyYqtUZOqY/DOd6zZrQFy1Svy+dF2J4gOkr12Lv1EjfPHxBPbuJbZ7d/566KFcx0Q1b06V228nYfRoNCGkTT4fUrkyeuAAUU2bEt2sGQfGFzsMGYDP3/iCz99wZi537H4aFww5n28+/ZaWbVuSdDCR/Xme+y/e+pIv3voSgHqN6vLAlPsZfakzyeeytgOzj3tj/hRuOffWYmeBhjv+kje/Zsmbzu/05t3b0OGqs1nz2QIatG1O6sHkAse6FebA9n00OeNkVnz4HbWaNyCqQnS5Tt4g92df2+Bn3/zPvqd5Ie/9vJ99bbt34NfgZx9A666nsv23rew/jB9exh2lSuBEpCXgB/YBFQs5bCDOLNEFwds0wX+poisAACAASURBVKms3YUzAeJ5EbksmBxVBi5S1dDBVMOBd4HXgjNAuwBrVPVPEYkBWgHflKbdoYIzUm8FPhGRF4B3gHEi0lNVZwUnNUzCSSbLTiCTxBefoeqDT4LPR+rX08jcsom4y68hY/2vpC+cT+x5FxHdpj1kZqCHDnFogvNBHdXqFOIuGQSZGRBQDr3wNHqg6AH0BVk6ZzHturXnue9eJjU5lRdG5iQTT0x7hlF9h1OhYix3vvofomOiEZ+wasFKZr7tfAi8NOY5rr7vevx+P+mpabx85/MlD54ZYOf9L9L49YecZUQ+nEnahi3Uvu1yUlau59CchcS2Pp5GL9yNv2plKnc7nTq3Xs7GvjdwcPo8KnU+haZfvgAKh75bwqE5i0r99y+fs4Q23drz9Hcvkpqcyssjn83e98i0CYzrezsVKlbgjlfHBv9+H2sWrGTW207i9M0Hsxn2xM08NnMiGenpvHjHpMJCAc6YtrVjX6fte+PA72PH1G9IXLuVpqMv4cDPG9k7Ywnb351Lq+dupvOPE0lPOMSqYROLvE+AU167negaVQhkZLJ27OtkHCjZjMSlc5bQtlsHnv3uJdKSU3k+5O9/YtrTjOo7ggoVKzDm1buyn//VC1YyM7hkx8tjnufq+67D5/eTnprOy3e+UKK4AGQG+OPuyTR/+z7E72Pf+7NJWfcH9e8YRNKKDfz19SIqntqcpq+MxV+tMtV6nkb92wfyS89biD2+EY3uvgZVRUTY9fInpPy6udiQea2Zu4yTurXlnm8nkpacxjujXszeN3raYzzedwzV42vS+5aL2LlhG6O+fBSA79+YwYL35wBO9+nSz4uv/OX+2zM5OHEiNZ54wllC6KuvyNy0iUpXX03G2rWkzp9P5RtuQOLiqHb//QAEdu0i4a67ICqKmpOc11kgKYm/Hn7YmdBQSovm/MRp3U/j/+a9TmpyCk/dkVPaf2H6c9zY52/9Pi338TfMWU6zbm248bsJ2cuIZLlu2iO82nccAN3HDuSkfl2Ijovhlh+fZfl7c/n+mY+Y9dA79H30Ojpe2wcUPr/j8JYxKsioex/lp2UrSEg4QI/+l3PjtVcw4PzeZXb/AMuCn33PfPdS8LMv57Nr/LSnGdt3BLEVKzDy1XHZ7/01C1YxK2S5ns7nl6/u0/I8Ni2UiNQE3geOAzYBl6pqvvKviByDM0ytMc4Uxr6quqnI+y5olkmeO81afgOcGaPjVPXL4DIi64HQOd0TcRKwRhpyxyKyFLgBWASMImcmaTrwlKq+nWcZkRjgC+DnYOyRwdg+4EtgjBbScBE5pKqVi9suIp8DH6jqWyLSGmcZkfo4CepbwAMhy4h0KE0FrqAuVK8MW+Xu2KDiPBiTEd74aRXCGv/aFHfHJhbnpdiU4g9y0Vh3hmeV2BR/bNhi33Vc6Ze3KEtX/hYX1vjhdqav8AkpXhi9pCTDw91zZfvbwxp/6uZPPB0UeEKdDp59z67bs/iw/zYReRzYr6qPisidQA1Vzbd+VTAHelhVvw4WtwJZQ8kKU2wFTlX9hWzfBEQXsOuJAo5tF3L1cQqobqnqWSGX03DGvGUp8XTHgpK3grar6vkhl1fiLBFS0O2mAFNKGt8YY4wxJqgfOfnFGzg9iLkSOBFpBUSp6teQPWysWHYuVGOMMcZEFPXwv9BVJoL/hpaiqfVUNWtpip1AQevIngAkiMhHIrJMRJ4IrphRpIg8lZaI1AJmF7Crh6raCEtjjDHGlInQVSYKIiKzgPgCduU6VVFwWFZBXb9RwD+AtjgrdrwPDCFnFY0CRWQCF0zSCpppaowxxpgjXHmaxKCqPQvbJyK7RKS+qu4QkfrA7gIO2wosz1qhI3gq0k4Uk8BZF6oxxhhjjDs+A64KXr4K+LSAY34CqotI1hJt3XGWOCuSJXDGGGOMiShejoH7mx4FeonIepyTETwKICIdRORVAFXNxFltY7aIrMRZdeOV4u44IrtQjTHGGGPKu+CQrx4FbF8MXBdy/WvglNLctyVwxhhjjIkoqmFedLIcsC5UY4wxxpgIYxU4Y4wxxkSUgJ3M3ipwxhhjjDGRxipwxhhjjIkoxZ3H/WhgFThjjDHGmAhjFThjjDHGRBQbA2cJnCsazv49bLH3DC3VMjJlbtAn4S3qvj+qfljjfzT+QFjjvzGieljjn/zQorDGX3Vv57DF7vXonrDFBpgxKDas8aVapbDGT1+5Lazxr2x/e1jjv7lkQljjG+9ZAmeMMcaYiGJj4GwMnDHGGGNMxLEEzhhjjDEmwlgXqjHGGGMiSsC6UK0CZ4wxxhgTaawCZ4wxxpiIoraMiFXgjDHGGGMijVXgjDHGGBNRbBkRq8AZY4wxxkQcq8AZY4wxJqLYqbSsAmeMMcYYE3GsAmeMMcaYiGJj4KwCZ4wxxhgTcawCZ4wxxpiIYmdisATOc089dT99+nQjKSmZ66+/g+XLV+XaX7lyJWbP/jD7esOG9Zk69WNGjbo/e1v//ufw3nsv06XLeSxduqLEsf0ntiP2oqHg85G+YCZpsz4s8LioU7sQd+04Ep8YTuCPDQD4GhxH7GU3Q2wcqJL05AjISC/Nnw7A0PuH0r5bB1KTU5l4xzP8tuq3Qo/9z2t3E39MPDf3ugmAM849g0EjBtGoeWPuuOB2NqzYUOr4WX7YvI8nvl9HQJX+rRpwTfvj8h0zc/0uXlq0ERHhhFqVGd/75MOK1eHBK2jYvQ0ZyaksGDGZ/Ss35TumZuvj6PzMMKJiY9g2ZzmL734LgFPuuIjmg84iZf9BAJaP/4Dtc36mUqPanP/t4xzYuAOAvUs2sOjO/yuyHb5jTyLmn5eCz0fGqnlkLJ6Ra7+/VWdiug5AExMASF8+l8zVPwAQ3fUi/Mc5f3/6omlkrlt8WI/FPY+M5qyeZ5CSnMKoW+5l9Ypf8x0THR3FfY/dSaczOhAIBHjq4eeZ/sVsTuvcjrsfHknLVsdz2/Vj+erzWYfVBvD2+S/M8AdupnP300lJTuHhEY+zbtX6fMc8+98J1K5Xi9SUVOc2A0eTsC+h1LH8LdpS4YJrnff+olmkz/2o4ONadyLuyjEkTRxJYOtv4I+iwoB/42vUHDRA2qevkblxdenjNz2FmN5XgPjIWP4N6fM/z7U/6pR/ENNjIIGDfwKQsfhrMpZ/k3NATBxx/36MzLWLSZvxZqnjR516GnFDbgafn7Q5X5L66dRc+2N6nk+F3v0hEEBTkkma/BSBbZuJ7tqT2PMvyz7Od0xTDt05lMzNhX9uFeaq+66jTbf2pCWn8uLISWxatTHfMXe+cQ/V69bAH+Xn10VreP3uyWggwK3PjaR+04YAVKpaicQDiYztO6LUbSjIfx6ZwHc/LKJmjep88vZLZXKfxhtHTAInIodUtXKebS2Al4HqQAXge+B/wGPBQ5oD24BkYIWqXiki/YGPgRNV9VcRWRi8bU0gLng8QH9V3VSaNvbu3Y3mzY/jpJPOpGPHtkya9DBnntkv1zGHDiVy+unnZF+fP/9LPv30q+zrlStX4uabr2HhwqWlCQ3iI/aSG0h6/j9owj4qjnyajFULCez8I/dxFeKI/ucFZG4K+WL1+Yi94g5S3ppAYPvvULEKZGaWLj7QvlsHGhzXgGFnDqVF2xbc8PCNjOx3R4HHdu7TmZTE5FzbNq/dzCNDH+Gm8TeXOnaozIDy6LdrebFfW+pVrsDgD37in01q06xmzstnc0ISry/ZxJQBHagaG83+pLTDitWg+6lUaRLPp2fcQe12zeg4fgjTz7sv33EdH72ahaNeZe/S3+j29igadDuF7XOd5PyXV6bzy0vT8t3m0OZdTOt1V8kaIkJMt4GkfvQMeuhPYgeOJXPjCnT/jlyHZaxbTPo37+Xa5jvuZHx1GpPyzkPOF/rFd5C5aRWkpZQsdtBZPbtyXNNj6N6xH23at+bBJ8ZxUe8r8x130+3XsW/Pfnqc3h8RoXqNagBs37qD0Tffy3U35b9NaXj5/Bemc/fTadSkIZd1vYKT2p3IyPHDGXr+TQUee//ND/PrinWHH0x8VLhwKMmT70P/2kfcrY+TsXoRuntr7uMqxBLT9TwyN6/N3hR9ei8AkicMRypVI/a6u0meNApKU/0QIeacq0h551H0wH5ir32AjHVL0L3bcx2WsebHQpOzmLMuJrAlf7Jfsvg+4q65jcSHRxHYt4cq418iffF8Ats2Zx+S9sNs0mY5SWVU+y7EXXkjiePHkD5vFunznB8KvsZNqDTywcNK3tp0a098k/qM+OcNNG97Atc+9G/u7j8633ETb3qC5EPO597wl8bQ6dwuLPh8HpNufjL7mMv/czVJBxJL3YbC9O/bi0EDLmDcg08Wf3A5YmPgjvwxcJOAp1W1jaqeCDyrqjOC19sAi4HBwetZ3woDgXnB/6OqpwePvQd4P+u2pU3eAM4//2zeeed/ACxatIzq1asSH1+30OObN29C3bq1mDdvUfa2e+8dyZNPvkhqamqpYvuOPYHAnh3ovl2QmUHG0u+Iat0p33EVzr2ctFkfouk51TV/y3YEtm9ykjeApIOggVLFB+h09unM+d8cANYuW0ulqpWoUbdGvuNiK8bS//r+vP/s+7m2b92wlW0bt+U7vrRW7TpA42pxNKoWR7TfR+/j6/HNxr25jvl49TYubd2IqrHRANSsGHNYsRr3bs/vH84DYO/S34ipVom4utVzHRNXtzrRVeLYu9T5Yvj9w3k07tPhsOIVxhffBP1rN3pgLwQyyVi3GH+zU0t221oNyNy23nnOM9LQvVvxH3tSqdvQ85x/8vEHXwCwfMlKqlarQp16tfMdd/Ggfrw48XXA+ZD+c79Tcdr2xw5+XbOeQKD0r71QXj7/henauwvTP/wagNVLf6FKtcrUqluzTGNk8R1zPIG9O9D9wff+8nlEndQx33ExvQeRNvfjXJV1qdeYzA0rAdDEv9DkRKcaV5r4DZoR2L8LTdgDgUwyV/9I1AntS377+OOQSlXJ3LiyVHGz+Ju3JLBrO4HdOyAzg7T5c4g+7YzcByUnZV+UCrEFJqgxZ/Qgff7cw2pD+14d+f5/3wCwYdk6KlatRPUCPvuykjd/lJ+o6KgCk5RO557B/M++P6x2FKRDm9ZUq1qlzO7PeOdIT+DqA9k/M1W1yE8AEakMdAWuBf5V1o1p0CCerVtzKh7btu2kQYP4Qo+/9NIL+O9/c7oa2rQ5mUaN6jN9+pxSx/ZVr0UgYU/29UDCXqRardzHNGqGVK9N5prc3WO+ug0AJe6GB6g46hliegwodXyAWvG12Lsj54ty38591Iqvle+4y0dezseTPyE1uXRJakntTkyhXpXY7Ov1KldgT2LuWJsTktiSkMSQDxdz5X9/4ofN+w4rVlx8DRK359w2cft+4uJr5Dsmacf+Qo9pcXUvzp31CJ0mXE9MtYrZ2ysfU4e+Mx+i1//uok7HFkW2QypVR4PdUwB68E+kUvV8x0Ud347YwXcTc+5QpLLThsCeP/AfdxJERUNsJXyNWyBV8n/5FCe+fl12bNuZfX3n9l3E18/9A6ZKVacKdvvYm/hszrs899rj1K5TtomNl89/YerE12b39t05bdqxhzrx+ZNZgHETRjNl5mSGDL/8sGJJ1ZpoQs77Tv/al/+937Apvuq1yfx1Sa7tge2/E9WqI/h8SI26+Bs1Q6rnf88WGb9KDfRAzutbD+4v8PXjb9mRuOsfocKAW5GqWc+5ENNrMGmzpuY7vqR8NWsT2JfzWAf27cFXI/9jHXN2f6pMfJu4wcNInvJsvv3Rnc8ibf7sw2pDzfia7Nue8xzs37mPmvUKfl3f+ea9vLT0DVISk1k4bUGufS07tuKvvQns3LSjwNseTQKoZ//KqyM9gXsamCMiX4nICBHJ/42VWz9guqquA/aJSMl/Jrrgkksu4IMPPgNARHj88bu5886H3AkmQoULryP1k9fy7/P58TdtRcqbT5L0zBiiTumM/4SSVW9Kq0mrJsQfW58fZywo/mAXZQaULX8l88qF7Rjf+2QenPsLB1NLP+bv71r3xiw+7Xw7X/a6i+RdCbS7dzAAybsT+Oi04Uw7+z8sue8dur5wI9GV4/5WrMyNK0h+fRwp7zxIYMsvxPQeAkBgyy9k/r6K2MvGUOGc6wjs2Fi6LrRSiIqKokHDeJYu+pkLug9i2eIVjL2/bMb6lEZ5ef7vv+URrux5HTdeeBundjyFPhf3KvsgIlQ4/2pSP88/hjLjp9kE/tpL3G1PUqHftc7Qir9ZAS1IxvplJD83nORXxpH5+yoqXDAMgKgOPcncsBw9uL+Ye/j70mZ+wsHbLif53cnEXnRFrn3+5idCWiqBPza53o5Hr7yfG0+7mqiYaE7u0jrXvi4X/KNMq28msh0xY+AKoqr/JyIzgD44ydkwETlVVQsr7QwEJgYvvxe8vqSQY3MRkaHAUICoqBr4/U4lYdiwK7nmmoEALFmygkaN6mffpmHDeLZv35n/zoDWrU8kKsrPsmVO0bBKlcq0atWCmTOdbsV69erw4YevcfHF15ZoIkMgYR/R1etkX/dVr43+FVJVqBCHr/4xVLxlvPP3VK1B3NC7SZ78IJqwj8wNq9HEAwBkrFmMr1EzMtf9XGzcvleeS++BvQFYv2I9tevn/PKtFV+LfTtzVzZatmtJ81Oa8+oPr+GP8lOtVjUeeX884y4bW2yskqpbKZZdB3PGb+06lEqdShVyH1M5ltb1qhLt99GwahzHVq/IloRkTqoXXez9nzCkJ80HdwNg3/KNVGpQi6zaZ6UGNUne+Weu45N3/knF+jm/xkOPSdl7IHv7hnfm0u1NZ8xgIC2DtLRDAOxfuYlDm3ZTpWk8kFNpCKWJCbmqHlKlRvZkhWwpOeNqMlbNI7prTqU146evyPjJGYsZ0+daAn/uKu5hAOCKay7lsisuAmDF8tXUb5hTcY5vUI+dO3K398/9CSQlJjP9C6fSMe3Tr7lkcP8SxSopt5//wlx0VT8uGHwuAL8sX0vdBjnVx7r167Bn5958t9kb3JaUmMzXn8ymVZsTs7teS0oP7Eeq57zvpFqt/O/9+GOI+7fz41CqVCd2yDhSpjxCYOtvpIUkdnE3jSewJ/fYtWLjH/wzpKIGUqVmrmowAMmHsi9mLJtLTHenA8TfqDm+xi2Iat8TiYkFfxSalkr63NzDK4oS2L8XX62cx9pXqw6BP/M/1lnS58+h4nXDc22L7tKNtB9K1/PR68pz6P6vswHYuGI9tRrkPAc142uxf1fhSWl6ajpLZi6k/dkdWTnP+Zz1+X107NOZcecVPG7YHH2O9AocqrpdVV9X1X5ABlDgVDIRqQl0B14VkU3AKOBSEZESxpmsqh1UtUNW8gbw8stvcvrp53D66efw2WczGDzY+VLs2LEtf/11kJ07C/7CvfTSftnVN4ADBw7SqFEbWrQ4gxYtzmDRomUlTt4AAlvW4avTAKlZD/xRRLU7k4yVC3MOSEkicdxgEu+/lsT7ryVz01qSJz9I4I8NZPyyBF+DYyG6Avh8+JufTGDnlhLFnfbml9x2zq3cds6t/DhjAd0HdAegRdsWJB1M4s/duT/Iv3r7K4acdhXXnXEtYwaMZvvv28s0eQM4qV4VtvyVxLYDyaRnBpixfhdnNcndpdKtaR0Wb3Pa9mdyGpsTkmhYtWQVrnVTZjGt111M63UXW6cvocnFXQGo3a4ZaQeSSN6dO3FK3p1A+sFkardrBkCTi7vyxwznd0PoeLnG53QgYa0zIqBCzSqIz3lpVj6mDlWa1OPQloJfSwCBnZuQ6nWRqrXA5yfqhA5k/pYnAa9YNfuiv+mpBLImOIhAbCXnYu2G+Go3JLB5TYkei7de/4Dzuv2L87r9i6+nzeXCS88DoE371hw8cIg9u/J/kc6e+R2dujpjALuc2ZENa/PP1vs73H7+C/PRG58y5OyhDDl7KN/NmJddTTup3YkcOpDIvt25v9D9fh/VajjPiT/KT5eendi49vdSxw38sR5f7fpIjbrOe79NVzLX/JRzQEoSifddRdL4YSSNH0Zgy7rs5I3oGOd9D/iPPxUCmfknPxQXf/tGfDXjkep1nGr+SZ3IWJd7EpZUznmd+09oTyA4wSH1kxdJfnY4yc+NIG3Wu2Ss+L5UyRtA5m+/4otviK9OPPijiOnSnfTF83Md44tvmH05qm0nMneEjLUVIabzWaTPL10C9/WbXzG27wjG9h3B4pkL+ceAswBo3vYEkg4mkpDns69CxdjscXE+v4+23Tuw/becdrTueirbf9vK/p1l250fqVTVs3/l1RFdgRORPsBsVU0XkXigFjmzSPO6GHhLVYeF3P5b4B/Ad2XRnunT59CnTzfWrPmepKRkhg4dmb1v4cKvcs0+vfji8+jX76qyCOsIBEj58CUq3viAs5TAj18T2LmFmL6DydyynsxViwq/bXIiaXM/oeLICaCQuWZxvnFyJbF4zmI6dOvA5O9fcZYRGflM9r6JX03itnNuLfL2nXp3ZtgDw6hWsxr3/N+9/L7md+694p5StyPK52PMmS248dNlBBT6tapPs1qVeWHhb7SqW5WzmtShyzE1WbBlHxe9swC/CMO7NKd6XOmrL9tmL6dBj1PpN/8pMpLTWDBicva+vl8/nD2LdNHYKXR5Zij+2Bi2z/2Z7XOc5Krtf/5FjZOOBVUSt+5l4WhncH/dTi05ddQAAhmZEFAW3vl/pCUkApUKbogGSJv7HhUuvM1ZymH1D+j+HUR3Op/A7s1kblxBdNvu+JsGv6RTkkibOcW5rc9P7CXOa1XTUkid8fphTWKZ+/U8zurZlbk/fUZKcgqjb70ve98Xc9/jvG5O1eWx+ycy4cWHuPuhkezf9yejb3GOO6VtK158YwLVqlWlR+8zuW3Mv+nT9eJSt8PL578wC2YvpHP30/ngh7dJSU7hkdsfz943ZeZkhpw9lOiYGCa8+zhRUX78fj8/fb+Ez975svTBAgFSP3mFuOvvDS4jMpvArj+IOXsgmVs35E7m8pDK1Yi77l5QJXBgHylTJxZ6bKE0QNr0N4gdONpZwmb5t+jebUT/cwCB7b+TuX4pUaedTdQJ7dBAJiQnkvr5y6WPU5hAgOTXJ1Fp3OPg85H2zVcEtm4i9pKrydi4lowl86nQ+0KiWreHzAwCiQdJeuHR7JtHnXgKgX17nEkQh2nZnCW06daeZ757idTkVF4eOSl73/hpTzO27whiK1Zg5KvjiI6JRnzCmgWrmPX29OzjOp/vTvfpqHsf5adlK0hIOECP/pdz47VXMOD83mUex5Q9Kc/ZZWmISAAIre1PABoB5wJZ/SVPqOrbIbf5BhipqotFZC7wmKpOD9l/K85yIjeIyBCgg6oWu4ZFbOwxYXtQ9ww9JVyhARj0SVjD8/6oY8Ia/6PxB4o/yEUXjS4kgfPIyQ8V8UPAA6vu7Ry22L0ePcxlLsrIjEHVwhpfqoX3tZe+8u/PUP87bvgxvI//m0smhDV+dO2mJeqtKiuVKzbx7Hv2UNLvnv5tJXXEVOBUtbDu4NuLuM1ZIZe7FbB/UsjlKcCUw26gMcYYY0wZOWISOGOMMcYcHbQcL+/hlSN+EoMxxhhjzJHGKnDGGGOMiSh2MnurwBljjDHGRByrwBljjDEmohwpK2j8HVaBM8YYY4yJMFaBM8YYY0xEsVmoVoEzxhhjjIk4VoEzxhhjTESxMXBWgTPGGGOMiThWgTPGGGNMRLEKnFXgjDHGGGMijiVwxhhjjDERxrpQjTHGGBNRrAMVxPqRyx8RGaqqky3+0RXb4lt8i3/0xj+a/3ZzeKwLtXwaavGPytgW3+Jb/KM3/tH8t5vDYAmcMcYYY0yEsQTOGGOMMSbCWAJXPoV7HMLRHP9o/tstvsW3+Edn7PIQ35SSTWIwxhhjjIkwVoEzxhhjjIkwlsAZY4wxxkQYS+CMMcYYYyKMJXBhJiLx4W6DMXmJiJ2lxbhGRE4rYt8VXrYlnESkjoh0EJHqHsc9xst4xh02iSHMRGQnsAqYCvxPVRM8jH1RUftV9SOX419ZTPw33Yyfl4hEAycD21R1twfxrge+UdX1IiLA68AAYBMwRFWXuhz/c+BmVd2cZ3tP4BlVPdnl+JOK2q+qt7oYu6qqHihk3zGqusWt2EW0qRZwJrBFVZd4FDMKOAdoGdz0CzBdVTNcjrsC+AEYm/WZJyInAy8A+1W1v5vxQ9pRF7gJOCm4aTXwgqru8iD2dcAjwG9AE2Coqn7mdtxg7KWq2s6LWMY9lsCFmYj4gZ7Av4C+wI84ydynqprscuwAsDz4D0BCdquqXuNy/GcL2XUB0FBVXa0CichLwLOqulpEqgELgEygJjBSVae6HH8V0FZV00VkEHAHcDbQFrhXVf/hcvzBwIPAa8DjQB3gGeBY4Ea3kwgRScP58fIBsJ3crz9U9Q0XY2d/gYnIbFXtUdA+N4nIF8CdqrpKROoDS4HFQDNgsqo+43L8hsAcYAewDOfxbwvEA91UdbuLsaOAUTir/z8ItMb5/LtDVb9wK26eNpwBvAtMAbJe6+2Bq4DBqvqDy/FX4TzOe0SkKfCOqnZ2M2ZI7GWq2taLWMY9lsCVIyISg/Nr+F9AN2C2qg52MV7/YKzmwKfAVFXd4Fa8YtoiwGBgDLAGeFhVV7gcc7WqnhS8PBw4S1X7B7u1v3L7A05Elqtqm+Dld4GFqjoxeN2rJKIaTvLWA4gGHgZeUQ8+GIIVp0uAy4AM4H3gQy+q0KFfYHm/zLz6csvz+hsHtFTVK0WkCvCDqp7icvwpwPK8iaKI3Aq0V9Wr3IwfjDUKeAwnge/oZtJYQOwfgRtUdVme7W2Al1X1dJfj53qPe1kVE5HdwHuF7Xez+m3Kjo1zKUdUNU1E1uB0Y7QHTnQ53ifAJyJSCegHPBX8Ur1LVb91M3aW4C/xIcBInOrjxaq61ovYQFrIGizFjAAAEW1JREFU5V7AfwFUdaeTT7ouEKy8/ImTQD0csi/OiwYArYCOwCKgA1AP53Mh3e3AqroPeAl4SUQa4fyYWCMiY1T1LbfDF3K5oOtuCX2MewCvAKjqwWB13G2dVHVI3o2qOklEXH0Pikgz4Hmcx/pEnB+u34nIw6r6f27GDlE1b/IGoKrLg0m02xrlGUaQ67rLSVQyOVVHE6EsgSsHRKQxzpfXQKASThfqBar6q0dNSAH+Ag7gdJ/FehFURG4CbgNmA31UdZMXcUMkiMh5wDbgDODaYLui8CaBugeny8wPfKaqq4Px/wlsdDu4iLyG02V2o6ouCCby9wM/i8hwVZ3pdhuC7WiH89rvBXyFN18sdUXkdpxuw6zLBK/X8SA+wB8icguwFWgHTAcQkTicaqjbihqikeRy7Bk43ccfBq+vFZEPgAkicp2qnuFyfHAK/zVU9c88G2vizQS/UXmue5lQ7XNziILxhnWhhpmIzAca4lR/pno1eDkYuztO4tgRmAW8p6qLPYwfAHYDe8hd9RCcMXhudyGdAEzCGfPzjKpOCW7vDZytqne4GT8YKwqoEvolIiIVAb+qHnQ59ghgkqpm5tneGmcgt9tj8B4AzsWpOL+HB4PnQ2LfW9R+Vb3fgzbUBR4A6gPPZyXMItINpwvzSZfjb8SpfOfbBTyuqs1cjF1ZVQ8Vsq+nqs5yK3ZInKHA9TiPQdaEofY4Xbqvq+rLbrchpC2VAQp7TFyI96Oqdipge1dgoKre5EU7zN9jCVyYiciZwPdejDkqIHYAWAHMw0mgcrXB7XEQIvJvnKpDQX/7Zar6uJvxy5vgOMDuwCDgPFWt50HMcM7CCwC/k1PtyXodeJLAH+1EpMiuSlW92qu2QHa36iDgX1ljAz2IeR4wmtyv/ydU9XOP4t8AjMXpeQE4BDymqi94ET/YhrY4j/slOO/Hj1S1sAlmphyxBK4cEJGrgFvJPZV/ktvLaIjIEIoY7+N2iV1EMoFvgStUdVuefa4P6A3Ogs07FmovMFdV57kZO087OuF8gPbHmQF7E06X6p9F3vDvxw33LLxji9qveZY3KePYJwHNspZtEJGngWrB3c+py0u4BGN+TtHvvwvcbkNhRKSeR0l8A5xJLINwZqKOx0kgVrodO9xE5D9AF5ylfDYGtzUFJuJMaHrIxdgn4AxbGIjzmfc+zsz7It+TpnyxBC7MgsnbcOB2nDK+4IyHeQKnW8/twdxhIyLLcNZ9ugcYETIexpOZgMHHPq+awKXA+x4s4/AIzq/eLTjjHj8GFqtqEzfjhsQP6yy8Itrlw+nGecfFGJ8D41V1fvD6GuBuoCIwQD1Yhyw41rFQXk0kyiLOYrIDcJKpE1W1gYuxhuIkDw1xlpH5AGfpJE9e+8E25P0Bl4sHPRBrgVNVNSXP9jjgZ1U9wcXYAeB74NqslQdEZKOqNnUrpil7Nokh/G4ALswzgH+OiAzAGRfkWgJXDioAqqqviMi3wDsici5wk6omFdWuMgxeYIVRnPXh5uOsieam64B1wIvA56qaKiJe/qIK6yw8EamKU21sCHwGfA3cjLMe3s+AawkcUD8reQs6oKr/C7ZrmItxs4UmaCJSJ7htjxexQ+LG4cxAH4QzoaUKTiX4O5dDP4ez7uKgrHG3Hr/2wZlAFE6aN3kLbkz2YBbyRTjjn+eKyHSc7xpPpt6bsmMJXPhVLWj2papuCn7BucnVQdIlparrRKQz8BCwTIo5Q4MH7Un2aBmR+jgzLwcCz4jIXCBORKI8Gswf7ll4b+EsobIAJ5kdh/Ml0l9Vlxd1wzKQK0HNM6C7rsuxswUnU9yC83iLiGTgLC79gAex3wX+AcwEnsVZ1HeDqn7jdmycpH0AztJF8TgVOC9m3oZqoarjPI4ZapuI9FDV2aEbg5PLdrgZuIAlpIbjzMZ+EfjYqxno5u+xBC78iprK7+qZGIrqogmOj3JbdpYUTFjuDP4anIp3SznkbpAzK/QKnKUdXBWc/TkdmC4iFYDzcJYv2SbO2QEGudyEp4GZIlLQLLynXY4N0FRVWwOIyKs4X1rHFFSVcMF2ETldVReGbgyOR/RkMdng0iVdgdNU9ffgtqbAiyIyQlXdfg5a4STQvwC/qGqmh1WwGcExrllrAF4G7BKRX3ASCC8Sqz44PxrC5VbgUxGZR84Y1A44Sxr1czOwiExR1SGqmogzDvZdEamBM6RjDE5Sb8o5GwMXZiKSBBR09gPB+YKrVMC+sortxxnv1RBnCYdVwVlZ44A4D8ag9Q/+Esy7vQYwTFUfdTn+QZyu2tByWxLOxIrh6uGq8HnaVQWnW931c8GGcxZe3okqXkxcCYnVEWfg9hRyJ69X4cyAXuRBG5YBvVR1b57tdYCZbr//grFa4lSAL8MZzN4CONntCQyFjXEVkeNxxj96UYH8GTiLQroOVXW/B22Ixem+znr/rcE5pZarP2K8fK8Z91gCF2Zhnok3BWiMswr/6TiVhw44C2zmS6xM2ZKcxWMLpKoTvGpLOARnISdmXcWpPiaRs4yIq0MIRKQeOUuoKE7yOgtnGQvX18ESkVWqenJp97nYnvbkLCexVVW7uBhrK1Do69uL176IpOIs4l1QAqfhGtDv0SSeX3ES98KSV9dnYZu/z7pQwy9Og2dcEJEKqpqatSPYneNaAoeTrJ2iqoHgL8GdOEsr7HMxZrkS7DI9h5wlXNbgdO94MQYtdBzWMCB04VAvzkV6TxG7VVUfdDO+qvrdvP8SxN8F3CM5Z4K4CjgT+J9HTUg7zH2uUGcR8SUicifO2mRu8gOVKSR5cjl2ljVeVDkLk2cSz6c4Px5uwllY2O1JPA2Bpyj88e/uYmxTRqwCF2ahpWyvu5TC2YVVHohIQ5yB2zuAZTgfZm1xzszQzcsuVC+WTSkgZkFnmqiEc0qxWqpa2cv2eKk8rIOVpwKZaxcQq6quDuovZBbwTTizgFeoqmvjsMrDZ01R7zkv1sETkU/JmcTTA2fyjAC3uT2JJxyfN6bsWQUu/KSQywVdL2stRWRFSKxmIdfRI38l/IeBF/Ou9yYit+IsKFrQOnFu8fyXlKo+lXU5OO7uNuBqnCUFnirsdkeIX3HWwTovZB2sEV42INwVSAqfBXyhB7OAy8OSFRNDr+RdBw9wbR28oHBO4jFHAEvgwi/vmQAK2+eGU4F6wB95tjfG6U490nVS1SF5N6rqpOAim0e84JIhtwODgTeAdnmXFTlC2TpY4U0gengQo0iqOiWM6+ABpIe0JVNEtnqYvI0JvSIi0cDJwDZV3e1RG8zfZAlc+DUSkUk4Xx5Zlwleb+hy7KeBsXknSgS7Vp4Gznc5frgVtUxLUhH7yoSIrCQnSW8eWv0E9yugIvIETiIzGWitHp1IuzywdbCAMCYQXszwLE6Y18EDOFVEDpDzwyEu5Lrbk3guEpFtqrpaRKrhVGEzgZoiMlJVp7oY25QRGwMXZlLw6ZyyqYvnIxWRn1T1tEL2rcz6dX6kEpGNOAOG8+0CHlfVZi7HP54iKqBZXXsuxg8AqUAGuau9nswCLW9C1sG6TFXDXiFyW7hnAYebiCzHWUD5TeA9Vd0qR8nppERktaqeFLw8HDhLVfsHF1X+ysbHRQarwIWZmwlaCVQvYl+cZ60In28pvMroRRdKWCugqurF2RYiRrDreHLw3xGvHIzBCytVbROyDt4sEdkLVPFiAgNkrwH3b6A5sAJ43aPZ75B7lnMv4L8AqrpTvDkLjSkDVoELMxH5rKj96uL5SEVkKjBHVV/Js/06nAVGL3MrtrEKqDHliZfr4AXjvY/Tjf09zlJGm1X1NjdjhsSeizNRaRswF2gZTN6igFWq2rLIOzDlglXgwq8zThfaVGAh3g6kHg58LCKDyX0qlxjgQg/bERZS9DlXVVXfcrkJR3sF1Jhyw+N18ABahUwieQ1nQXWvDAMm4SyZNFxVsyat9QC+9LAd5m+wBC784sk5ofkgnDfPVFVd7XbgYDdBFxHphjMDCeBLVZ3jduxyosDqF3ABzgQStxO4xSJyfSEV0CWF3MYYUwaKWwfPgyaETiLJ8LLrUlXX4ZwLNu/2GSJyomcNMX+LdaGWI+Kc0Hwg8ARwv6o+F+YmHTXE+fQcjDO9fg3wsKq6+iEePJXTxzjjUfJVQEN+FRtjylg4F9INxi+Xk0hEZIuqHhOO2KZ0LIErB4KJ27k4ydtxOL8GX1fVbeFs19EgOOZjCM5s1B+B8arq6RpweSqgq4+iCqgxYRM6zlRE/JTThXRFpIaXazOKyB+q2tireObwWRdqmInImzhf3tNwqm6rwtyko4aI3IRz9oHZQB9V3RSOdqjqXJyBxMYY74RzId3SmA14edoxq+pECKvAhVlwLa6sMvpRvxaXl4KP/W5gDwU/9kf6qcSMOWqV1y7MvNw4b6mIHKTgRE2AOFW14k4EsCcpzGwtrrBqEu4GGGPCJlZV04s/LOzKvMqiqlXK+j6N9yyBM0etvAvoGmOOKgvxtmvSmDJlCZw5ahXTjVBuulCMMa6IlFMOREo7jcdsDJwxxpijjohsBSYUtl9VC91XRvErAulZ3bgi0gLoi3NGho9CjqupqvvdbIuJTDb+yhhjzNHID1QGqhTyz23TcZaNQkSa46xH1xS4SUTGZx1kyZspjFXgjDHGHHVEZKmqhm0MXJ516B4EaqrqTSISAyyxcyGb4lgFzhhjzNEo3GPLQqsn3XFO5YWqpgGBsLTIRBSbxGCMMeZodK6IDAeaAyuB11Q1w8P4K0TkSWBbsA0zAUSkuodtMBHMKnDGGGOORk/jnHt4JXAO8JTH8a8H9uKMgztbVZOC21sBT3rcFhOBrAJnjDHmaNQqZAzaa8Aij+N3VdVH825U1fki0s/jtpgIZBU4Y4wxR6PQc6F62XWa5XkROTd0g4j4RGQKcGoY2mMijFXgjDHGHI1OFZEDwcsCxAWve7WQd2/gKxGJUdWPRSQW+BA4AJzvcmxzBLAEzhhjzFFHVf1hjv+7iPQEZohIPeBy4CdVHRHOdpnIYevAGWOMMR4Tkaw16BoAb+AsI/J41n5VXRqOdpnIYQmcMcYY4zERmVvEblXV7p41xkQkS+CMMcYYYyKMzUI1xhhjPCYil4vIFQVsv0JEBoWjTSayWAXOGGOM8ZiILAR6qOqhPNsrAd+pavvwtMxECqvAGWOMMd6Lzpu8AahqIhAdhvaYCGMJnDHGGOO9uGC1LRcRqQLEhKE9JsJYAmeMMcZ47zXgQxE5NmuDiBwHvBfcZ0yRbCFfY4wxxmOq+qSIHAK+E5HKwc2HgEdV9cUwNs1ECJvEYIwxxoRRsNsUVT0YvH6aqv4U3laZ8s4SOGOMMSbMRKQVMDD4L0FVO4S5Saacsy5UY4wxJgyCY96ykrZ04Figg6puCl+rTKSwSQzGGGOMx0RkAfAlTiFlQHDdt4OWvJmSsgTOGGOM8d4uoApQD6gT3GZjmkyJ2Rg4Y4wxJgxEpBpwEU4X6vFAdaC3qi4Ka8NMRLAEzhhjjAkzEakLXIqTzB2jqo3D3CRTzlkCZ4wxxpQjIjJSVZ8MdztM+WYJnDHGGFOOiMgWVT0m3O0w5ZtNYjDGGGPKFwl3A0z5ZwmcMcYYU75Y15gpli3ka4wxxnhMRFZScKImOEuLGFMkGwNnjDHGeExEji1qv6pu9qotJjJZAmeMMcaUAyJSG9in9sVsSsDGwBljjDEeE5FOIvKNiHwkIm1FZBWwCtglIn3C3T5T/lkFzhhjjPGYiCwGxgHVgMnAOar6o4i0BKaqatuwNtCUe1aBM8YYY7wXpaozVfW/wE5V/RFAVX8Nc7tMhLAEzhhjjPFeIORycp591jVmimVdqMYYY4zHRCQTSMRZNiQOSMraBcSqanS42mYigyVwxhhjjDERxrpQjTHGGGMijCVwxhhjjDERxhI4Y4wxxpgIYwmcMcYYY0yEsQTOGGOMMSbC/D+I2iaC4b4XCgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 720x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "kp2-Qzu4-0YB",
        "outputId": "b105adb8-9e1b-41fb-bfc6-66383aace32e"
      },
      "source": [
        "plt.figure(figsize=(20, 5))\n",
        "\n",
        "features = ['LSTAT', 'RM']\n",
        "target = dataset['MEDV']\n",
        "\n",
        "for i, col in enumerate(features):\n",
        "    plt.subplot(1, len(features) , i+1)\n",
        "    x = dataset[col]\n",
        "    y = target\n",
        "    plt.scatter(x, y, marker='o')\n",
        "    plt.title(col)\n",
        "    plt.xlabel(col)\n",
        "    plt.ylabel('MEDV')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9wt_H9wgPP_v"
      },
      "source": [
        "#Only LSTAT and RM, High correlation with MEDV"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "halm_vDBAE72",
        "outputId": "f4c822e2-060e-4712-da81-9aefafd84463"
      },
      "source": [
        "X = dataset[['LSTAT','RM']]\n",
        "Y = dataset['MEDV']\n",
        "# splits the training and test data set in 80% : 20%\n",
        "# assign random_state to any value.This ensures consistency.\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state=5)\n",
        "\n",
        "def create_polynomial_regression_model(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  \n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "\n",
        "def create_polynomial_regression_model_plot(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  plt.scatter(Y_test, y_test_predict)\n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "create_polynomial_regression_model(1)\n",
        "create_polynomial_regression_model(2)\n",
        "create_polynomial_regression_model(3)\n",
        "create_polynomial_regression_model(4)\n",
        "create_polynomial_regression_model(5)\n",
        "create_polynomial_regression_model(6)\n",
        "create_polynomial_regression_model(7)\n",
        "create_polynomial_regression_model(8)\n",
        "create_polynomial_regression_model(9)\n",
        "create_polynomial_regression_model(10)\n",
        "create_polynomial_regression_model_plot(3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            " Polynomial degree =  1\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.742168977550195\n",
            "R2 score of training set is 0.6378494716421765\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.616389821591518\n",
            "R2 score of test set is 0.6226095344053366\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.780080653578728\n",
            "R2 score of training set is 0.7490381917074231\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.3654613464581242\n",
            "R2 score of test set is 0.7994257448387364\n",
            "\n",
            "\n",
            " Polynomial degree =  3\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.642032789801251\n",
            "R2 score of training set is 0.7633243416985511\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.2867255241712297\n",
            "R2 score of test set is 0.8087009341496691\n",
            "\n",
            "\n",
            " Polynomial degree =  4\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.3272680425119745\n",
            "R2 score of training set is 0.7943329206046794\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.907815606192326\n",
            "R2 score of test set is 0.7295704781761068\n",
            "\n",
            "\n",
            " Polynomial degree =  5\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.188881567813193\n",
            "R2 score of training set is 0.8072770878206937\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.678063306009294\n",
            "R2 score of test set is 0.7604344453559367\n",
            "\n",
            "\n",
            " Polynomial degree =  6\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.19360926288804\n",
            "R2 score of training set is 0.8068418168229595\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 5.9692100868682365\n",
            "R2 score of test set is 0.36901403011965284\n",
            "\n",
            "\n",
            " Polynomial degree =  7\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.106162928503452\n",
            "R2 score of training set is 0.8148134070768942\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.8896830802231186\n",
            "R2 score of test set is 0.7320742779318059\n",
            "\n",
            "\n",
            " Polynomial degree =  8\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.082798824456929\n",
            "R2 score of training set is 0.8169148382015996\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.8110126540912126\n",
            "R2 score of test set is 0.7428024922549312\n",
            "\n",
            "\n",
            " Polynomial degree =  9\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.085935497333634\n",
            "R2 score of training set is 0.8166334141663304\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 21.166564482816664\n",
            "R2 score of test set is -6.933900000231601\n",
            "\n",
            "\n",
            " Polynomial degree =  10\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.745867463392141\n",
            "R2 score of training set is 0.7526178285511558\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 62.41706869468602\n",
            "R2 score of test set is -67.99104325534056\n",
            "\n",
            "\n",
            " Polynomial degree =  3\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.642032789801251\n",
            "R2 score of training set is 0.7633243416985511\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.2867255241712297\n",
            "R2 score of test set is 0.8087009341496691\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YNmvCZWbMBhR"
      },
      "source": [
        "3 is best in case of Lstat and RM\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3e7l_kHLODPQ"
      },
      "source": [
        "#Remove RAD,TAX,DIS,INDUS,NOX,AGE, as they re having high correltion with independent variables"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "akleeOrJMFqg",
        "outputId": "da9ebedd-b0b4-4b3d-c230-df54d51e76e1"
      },
      "source": [
        "X = dataset[['RAD','TAX','DIS','INDUS','NOX','AGE']]\n",
        "Y = dataset['MEDV']\n",
        "# splits the training and test data set in 80% : 20%\n",
        "# assign random_state to any value.This ensures consistency.\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state=5)\n",
        "\n",
        "def create_polynomial_regression_model(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  \n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "\n",
        "def create_polynomial_regression_model_plot(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  plt.scatter(Y_test, y_test_predict)\n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "create_polynomial_regression_model(1)\n",
        "create_polynomial_regression_model(2)\n",
        "create_polynomial_regression_model(3)\n",
        "create_polynomial_regression_model(4)\n",
        "create_polynomial_regression_model(5)\n",
        "create_polynomial_regression_model(6)\n",
        "create_polynomial_regression_model(7)\n",
        "create_polynomial_regression_model(8)\n",
        "create_polynomial_regression_model(9)\n",
        "create_polynomial_regression_model(10)\n",
        "create_polynomial_regression_model_plot(2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            " Polynomial degree =  1\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 7.909126074963801\n",
            "R2 score of training set is 0.3129407626861247\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 6.038380725485597\n",
            "R2 score of test set is 0.3543056908316877\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 6.970636978648492\n",
            "R2 score of training set is 0.4663185375060429\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 6.1196088020465975\n",
            "R2 score of test set is 0.33681713657267254\n",
            "\n",
            "\n",
            " Polynomial degree =  3\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 7.133844263953277\n",
            "R2 score of training set is 0.4410352324481548\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 17.696690144333736\n",
            "R2 score of test set is -4.545874888039336\n",
            "\n",
            "\n",
            " Polynomial degree =  4\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.18510782997417\n",
            "R2 score of training set is 0.8076241771956136\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 82.72749830998349\n",
            "R2 score of test set is -120.19529416424814\n",
            "\n",
            "\n",
            " Polynomial degree =  5\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.931181066379269\n",
            "R2 score of training set is 0.9056324935427023\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 430.805476865656\n",
            "R2 score of test set is -3285.6117691138547\n",
            "\n",
            "\n",
            " Polynomial degree =  6\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.6980859257587024\n",
            "R2 score of training set is 0.9200444271678574\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 1837.2246599581958\n",
            "R2 score of test set is -59772.750496693334\n",
            "\n",
            "\n",
            " Polynomial degree =  7\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.521151594645625\n",
            "R2 score of training set is 0.9301871919990584\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 1314.3929127605736\n",
            "R2 score of test set is -30593.00911487824\n",
            "\n",
            "\n",
            " Polynomial degree =  8\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.400515676084448\n",
            "R2 score of training set is 0.9367083702489251\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3779.025225966879\n",
            "R2 score of test set is -252897.09399823355\n",
            "\n",
            "\n",
            " Polynomial degree =  9\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.393490160314722\n",
            "R2 score of training set is 0.8735175193682909\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4578.994829938101\n",
            "R2 score of test set is -371300.1383236115\n",
            "\n",
            "\n",
            " Polynomial degree =  10\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.6861916546660356\n",
            "R2 score of training set is 0.920747827323518\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 2950.5820636369217\n",
            "R2 score of test set is -154169.53177801968\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 6.970636978648492\n",
            "R2 score of training set is 0.4663185375060429\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 6.1196088020465975\n",
            "R2 score of test set is 0.33681713657267254\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZvH79p58Opyw"
      },
      "source": [
        "# In these highlly correlated variables we have degree 2 as the best"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "eMXzW809QDt3",
        "outputId": "718f5e65-9a3b-4114-ce92-96cca1006593"
      },
      "source": [
        "X = dataset[['LSTAT','RM','PTRATIO','CHAS','ZN']]\n",
        "Y = dataset['MEDV']\n",
        "# splits the training and test data set in 80% : 20%\n",
        "# assign random_state to any value.This ensures consistency.\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state=5)\n",
        "\n",
        "def create_polynomial_regression_model(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  \n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "\n",
        "def create_polynomial_regression_model_plot(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  plt.scatter(Y_test, y_test_predict)\n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "create_polynomial_regression_model(1)\n",
        "create_polynomial_regression_model(2)\n",
        "create_polynomial_regression_model(3)\n",
        "create_polynomial_regression_model(4)\n",
        "create_polynomial_regression_model(5)\n",
        "create_polynomial_regression_model(6)\n",
        "create_polynomial_regression_model(7)\n",
        "create_polynomial_regression_model(8)\n",
        "create_polynomial_regression_model(9)\n",
        "create_polynomial_regression_model(10)\n",
        "create_polynomial_regression_model_plot(2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            " Polynomial degree =  1\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.279302687452605\n",
            "R2 score of training set is 0.693880981762264\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.62985654835923\n",
            "R2 score of test set is 0.620404509575904\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.971183071982922\n",
            "R2 score of training set is 0.8267883881291745\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.362023407834468\n",
            "R2 score of test set is 0.7998353230223607\n",
            "\n",
            "\n",
            " Polynomial degree =  3\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.5565280023681747\n",
            "R2 score of training set is 0.8610720424396896\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.6122147133730356\n",
            "R2 score of test set is 0.7689355734944336\n",
            "\n",
            "\n",
            " Polynomial degree =  4\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.6208985540565326\n",
            "R2 score of training set is 0.8559975434009172\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 5.677221076261566\n",
            "R2 score of test set is 0.4292346671023547\n",
            "\n",
            "\n",
            " Polynomial degree =  5\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.011656880172879\n",
            "R2 score of training set is 0.9003796259849992\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 457.98454343220277\n",
            "R2 score of test set is -3713.390986063489\n",
            "\n",
            "\n",
            " Polynomial degree =  6\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.645365238481023\n",
            "R2 score of training set is 0.923138568119405\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 1941.5859927417914\n",
            "R2 score of test set is -66756.37245906473\n",
            "\n",
            "\n",
            " Polynomial degree =  7\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.5727502436261482\n",
            "R2 score of training set is 0.9273003295711306\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 7308.795756430495\n",
            "R2 score of test set is -945969.5710552868\n",
            "\n",
            "\n",
            " Polynomial degree =  8\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.5236787149239706\n",
            "R2 score of training set is 0.9300471656835585\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 28639.59844573184\n",
            "R2 score of test set is -14525122.151306292\n",
            "\n",
            "\n",
            " Polynomial degree =  9\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.4938571709632975\n",
            "R2 score of training set is 0.9316906206113205\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 27651.854863613662\n",
            "R2 score of test set is -13540493.084843121\n",
            "\n",
            "\n",
            " Polynomial degree =  10\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.4905066491069436\n",
            "R2 score of training set is 0.9318740459697179\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 70630.2243209207\n",
            "R2 score of test set is -88341982.38358304\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.971183071982922\n",
            "R2 score of training set is 0.8267883881291745\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.362023407834468\n",
            "R2 score of test set is 0.7998353230223607\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I94X1ts3Qzv6"
      },
      "source": [
        "# This is a bad model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wjYaAWnKQDwv",
        "outputId": "2f86e654-cbde-4a8d-e2a4-221403627020"
      },
      "source": [
        "X = dataset[['LSTAT','RM','PTRATIO']]\n",
        "Y = dataset['MEDV']\n",
        "# splits the training and test data set in 80% : 20%\n",
        "# assign random_state to any value.This ensures consistency.\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state=5)\n",
        "\n",
        "def create_polynomial_regression_model(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  \n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "\n",
        "def create_polynomial_regression_model_plot(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  plt.scatter(Y_test, y_test_predict)\n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "create_polynomial_regression_model(1)\n",
        "create_polynomial_regression_model(2)\n",
        "create_polynomial_regression_model(3)\n",
        "create_polynomial_regression_model(4)\n",
        "create_polynomial_regression_model(5)\n",
        "create_polynomial_regression_model(6)\n",
        "create_polynomial_regression_model(7)\n",
        "create_polynomial_regression_model(8)\n",
        "create_polynomial_regression_model(9)\n",
        "create_polynomial_regression_model(10)\n",
        "create_polynomial_regression_model_plot(2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            " Polynomial degree =  1\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.386481681430843\n",
            "R2 score of training set is 0.6813253184413657\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.511115471825208\n",
            "R2 score of test set is 0.6396256581611648\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.346345107337677\n",
            "R2 score of training set is 0.7925155278601569\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.2671671435144654\n",
            "R2 score of test set is 0.8109708940924586\n",
            "\n",
            "\n",
            " Polynomial degree =  3\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.167456732195062\n",
            "R2 score of training set is 0.8092434825356716\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.3351653301512543\n",
            "R2 score of test set is 0.8030206457342617\n",
            "\n",
            "\n",
            " Polynomial degree =  4\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.932951173622039\n",
            "R2 score of training set is 0.8301074653507698\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.370001893788637\n",
            "R2 score of test set is 0.6618189839037402\n",
            "\n",
            "\n",
            " Polynomial degree =  5\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.609989256534466\n",
            "R2 score of training set is 0.856863957668927\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.380521396387074\n",
            "R2 score of test set is 0.7976266352762532\n",
            "\n",
            "\n",
            " Polynomial degree =  6\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.442872952302031\n",
            "R2 score of training set is 0.8698095345399144\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 5.521779227746234\n",
            "R2 score of test set is 0.4600618034299445\n",
            "\n",
            "\n",
            " Polynomial degree =  7\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.201841841350352\n",
            "R2 score of training set is 0.8874003767636869\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 36.67997629554686\n",
            "R2 score of test set is -22.825612108419318\n",
            "\n",
            "\n",
            " Polynomial degree =  8\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 3.1100469623249603\n",
            "R2 score of training set is 0.8937641541528092\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 29.91440238693131\n",
            "R2 score of test set is -14.846984629019284\n",
            "\n",
            "\n",
            " Polynomial degree =  9\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.923189509534335\n",
            "R2 score of training set is 0.9061463582470207\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 113.07727158252037\n",
            "R2 score of test set is -225.43138146753392\n",
            "\n",
            "\n",
            " Polynomial degree =  10\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 2.8395801282334787\n",
            "R2 score of training set is 0.9114384023532589\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 2660.538360912269\n",
            "R2 score of test set is -125349.19810797661\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 4.346345107337677\n",
            "R2 score of training set is 0.7925155278601569\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 3.2671671435144654\n",
            "R2 score of test set is 0.8109708940924586\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-NlstkEGRPUL"
      },
      "source": [
        "#This model is slightly better with degree 2 "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0UTPfVNMHyZb"
      },
      "source": [
        "Degree 3 fits the best"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XrVGGf_BlICn",
        "outputId": "64ab5672-35df-46ea-ba9f-64be7ad6acc2"
      },
      "source": [
        "Y = dataset['MEDV'].values\n",
        "X = dataset['LSTAT'].values\n",
        "X=X.reshape(-1,1)\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state=5)\n",
        "\n",
        "def create_polynomial_regression_model(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  \n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "\n",
        "def create_polynomial_regression_model_plot(degree):\n",
        "    \n",
        "  \"Creates a polynomial regression model for the given degree\"    \n",
        "  poly_features = PolynomialFeatures(degree=degree)\n",
        "  \n",
        "  # transforms the existing features to higher degree features.\n",
        "  X_train_poly = poly_features.fit_transform(X_train)\n",
        "  \n",
        "  # fit the transformed features to Linear Regression\n",
        "  poly_model = LinearRegression()\n",
        "  poly_model.fit(X_train_poly, Y_train)\n",
        "  \n",
        "  # predicting on training data-set\n",
        "  y_train_predicted = poly_model.predict(X_train_poly)\n",
        "  \n",
        "  # predicting on test data-set\n",
        "  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test))\n",
        "  \n",
        "  # evaluating the model on training dataset\n",
        "  rmse_train = np.sqrt(mean_squared_error(Y_train, y_train_predicted))\n",
        "  r2_train = r2_score(Y_train, y_train_predicted)\n",
        "  \n",
        "  # evaluating the model on test dataset\n",
        "  rmse_test = np.sqrt(mean_squared_error(Y_test, y_test_predict))\n",
        "  r2_test = r2_score(Y_test, y_test_predict)\n",
        "  print('\\n\\n Polynomial degree = ', degree)\n",
        "  print(\"The model performance for the training set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of training set is {}\".format(rmse_train))\n",
        "  print(\"R2 score of training set is {}\".format(r2_train))\n",
        "  print(\"\\n\")\n",
        "  plt.scatter(Y_test, y_test_predict)\n",
        "  print(\"The model performance for the test set\")\n",
        "  print(\"-------------------------------------------\")\n",
        "  print(\"RMSE of test set is {}\".format(rmse_test))\n",
        "  print(\"R2 score of test set is {}\".format(r2_test))\n",
        "create_polynomial_regression_model(1)\n",
        "create_polynomial_regression_model(2)\n",
        "create_polynomial_regression_model(3)\n",
        "create_polynomial_regression_model(4)\n",
        "create_polynomial_regression_model(5)\n",
        "create_polynomial_regression_model(6)\n",
        "create_polynomial_regression_model(7)\n",
        "create_polynomial_regression_model(8)\n",
        "create_polynomial_regression_model(9)\n",
        "create_polynomial_regression_model(10)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            " Polynomial degree =  1\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 6.359747160874321\n",
            "R2 score of training set is 0.5557607919017009\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 5.603922693267485\n",
            "R2 score of test set is 0.44387778308553183\n",
            "\n",
            "\n",
            " Polynomial degree =  2\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.659327503555834\n",
            "R2 score of training set is 0.6482234863955951\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.844853554783464\n",
            "R2 score of test set is 0.5843313387817805\n",
            "\n",
            "\n",
            " Polynomial degree =  3\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.500608475568189\n",
            "R2 score of training set is 0.6676783362949508\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.8339159223405845\n",
            "R2 score of test set is 0.5862060287070143\n",
            "\n",
            "\n",
            " Polynomial degree =  4\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.395687430338543\n",
            "R2 score of training set is 0.6802351277980186\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.607705742815973\n",
            "R2 score of test set is 0.6240280480657858\n",
            "\n",
            "\n",
            " Polynomial degree =  5\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.313877639563282\n",
            "R2 score of training set is 0.6898582123557166\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.665422885163444\n",
            "R2 score of test set is 0.6145500398957269\n",
            "\n",
            "\n",
            " Polynomial degree =  6\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.312066263495023\n",
            "R2 score of training set is 0.6900696164190467\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.613540545581086\n",
            "R2 score of test set is 0.6230752480052164\n",
            "\n",
            "\n",
            " Polynomial degree =  7\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.311569262849725\n",
            "R2 score of training set is 0.6901276083141616\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.59275287823382\n",
            "R2 score of test set is 0.6264642868400669\n",
            "\n",
            "\n",
            " Polynomial degree =  8\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.298112714423804\n",
            "R2 score of training set is 0.6916957064225184\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.791000285450684\n",
            "R2 score of test set is 0.5935207619671656\n",
            "\n",
            "\n",
            " Polynomial degree =  9\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.290142161852378\n",
            "R2 score of training set is 0.6926226429649409\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.5539918633646925\n",
            "R2 score of test set is 0.6327426679293999\n",
            "\n",
            "\n",
            " Polynomial degree =  10\n",
            "The model performance for the training set\n",
            "-------------------------------------------\n",
            "RMSE of training set is 5.295069039544572\n",
            "R2 score of training set is 0.6920498357297055\n",
            "\n",
            "\n",
            "The model performance for the test set\n",
            "-------------------------------------------\n",
            "RMSE of test set is 4.905708958437507\n",
            "R2 score of test set is 0.5738234663236941\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Etzgj2oyaYjo"
      },
      "source": [
        "This is also not a good model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qwPChbDmabF6"
      },
      "source": [
        "# The best model was the with variables LMSTAT and RN, because in that we had a higher R2 value increasing in test set as compared to training set and RMSE was decreasing which shows it had the best performance."
      ]
    }
  ]
}
